// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [Aisle]
            Decoders.addDecoder(clazz: [Aisle].self) { (source: AnyObject) -> [Aisle] in
                return Decoders.decode(clazz: [Aisle].self, source: source)
            }
			// Decoder for Aisle
            Decoders.addDecoder(clazz: Aisle.self) { (source: AnyObject) -> Aisle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Aisle()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [Alert]
            Decoders.addDecoder(clazz: [Alert].self) { (source: AnyObject) -> [Alert] in
                return Decoders.decode(clazz: [Alert].self, source: source)
            }
			// Decoder for Alert
            Decoders.addDecoder(clazz: Alert.self) { (source: AnyObject) -> Alert in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Alert()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.link = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"])
                instance.linkText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linkText"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expirationDate"])
                instance.acknowledgeDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["acknowledgeDate"])
                return instance
            }
			

			// Decoder for [ApiResponse]
            Decoders.addDecoder(clazz: [ApiResponse].self) { (source: AnyObject) -> [ApiResponse] in
                return Decoders.decode(clazz: [ApiResponse].self, source: source)
            }
			// Decoder for ApiResponse
            Decoders.addDecoder(clazz: ApiResponse.self) { (source: AnyObject) -> ApiResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApiResponse()
                return instance
            }
			

			// Decoder for [Asn]
            Decoders.addDecoder(clazz: [Asn].self) { (source: AnyObject) -> [Asn] in
                return Decoders.decode(clazz: [Asn].self, source: source)
            }
			// Decoder for Asn
            Decoders.addDecoder(clazz: Asn.self) { (source: AnyObject) -> Asn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Asn()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.poNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["poNo"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["vendorId"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.orderDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["orderDate"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.billingName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingName"])
                instance.billingAttention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAttention"])
                instance.billingStreet1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingStreet1"])
                instance.billingStreet2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingStreet2"])
                instance.billingCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingCity"])
                instance.billingState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingState"])
                instance.billingZipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingZipCode"])
                instance.billingPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingPhone"])
                instance.shipToName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToName"])
                instance.shipToAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToAddress"])
                instance.shipToStreet1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToStreet1"])
                instance.shipToStreet2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToStreet2"])
                instance.shipToCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToCity"])
                instance.shipToState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToState"])
                instance.shipToZipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToZipCode"])
                instance.shipToPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToPhone"])
                instance.corporateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateName"])
                instance.corporateAttention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateAttention"])
                instance.corporateStreet1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateStreet1"])
                instance.corporateStreet2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateStreet2"])
                instance.corporateCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateCity"])
                instance.corporateState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateState"])
                instance.corporateZipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporateZipCode"])
                instance.accountCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountCode"])
                instance.buyer = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["buyer"])
                instance.carrier = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["carrier"])
                instance.confTo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["confTo"])
                instance.fob = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fob"])
                instance.printed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["printed"])
                instance.projectNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["projectNo"])
                instance.remarks = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remarks"])
                instance.requestBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestBy"])
                instance.terms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["terms"])
                instance.usedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usedBy"])
                instance.lineItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lineItems"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [BillOfLading]
            Decoders.addDecoder(clazz: [BillOfLading].self) { (source: AnyObject) -> [BillOfLading] in
                return Decoders.decode(clazz: [BillOfLading].self, source: source)
            }
			// Decoder for BillOfLading
            Decoders.addDecoder(clazz: BillOfLading.self) { (source: AnyObject) -> BillOfLading in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BillOfLading()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.bolNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bolNo"])
                instance.bolDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["bolDate"])
                instance.shipFromName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipFromName"])
                instance.shipFromAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipFromAddress"])
                instance.shipFromCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipFromCity"])
                instance.shipFromState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipFromState"])
                instance.shipFromZip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipFromZip"])
                instance.sid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sid"])
                instance.isShipFromFOB = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isShipFromFOB"])
                instance.shipToName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToName"])
                instance.shipToAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToAddress"])
                instance.shipToCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToCity"])
                instance.shipToState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToState"])
                instance.shipToZip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToZip"])
                instance.shipToLocationNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToLocationNo"])
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.isShipToFOB = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isShipToFOB"])
                instance.billToName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToName"])
                instance.billToAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToAddress"])
                instance.billToCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToCity"])
                instance.billToState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToState"])
                instance.billToZip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToZip"])
                instance.isTrailerLoadedByShipper = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTrailerLoadedByShipper"])
                instance.byDriver = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["byDriver"])
                instance.codAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["codAmount"])
                instance.feeTermsCollect = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["feeTermsCollect"])
                instance.feeTermsPrepaid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["feeTermsPrepaid"])
                instance.customerCheckAcceptable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["customerCheckAcceptable"])
                instance.carrierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrierName"])
                instance.trailerNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trailerNo"])
                instance.sealNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealNo"])
                instance.scac = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scac"])
                instance.proNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["proNo"])
                instance.prepaid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["prepaid"])
                instance.collect = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["collect"])
                instance.thirdParty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["thirdParty"])
                instance.isThisAMasterBOL = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isThisAMasterBOL"])
                instance.masterBOLId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["masterBOLId"])
                instance.isFreightCountedByShipper = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isFreightCountedByShipper"])
                instance.byDriverPallets = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["byDriverPallets"])
                instance.byDriverPieces = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["byDriverPieces"])
                instance.specialInstructions = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specialInstructions"])
                instance.orderInfoLines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderInfoLines"])
                instance.carrierInfoLines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["carrierInfoLines"])
                return instance
            }
			

			// Decoder for [BillOfLadingCarrierInfoLine]
            Decoders.addDecoder(clazz: [BillOfLadingCarrierInfoLine].self) { (source: AnyObject) -> [BillOfLadingCarrierInfoLine] in
                return Decoders.decode(clazz: [BillOfLadingCarrierInfoLine].self, source: source)
            }
			// Decoder for BillOfLadingCarrierInfoLine
            Decoders.addDecoder(clazz: BillOfLadingCarrierInfoLine.self) { (source: AnyObject) -> BillOfLadingCarrierInfoLine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BillOfLadingCarrierInfoLine()
                instance.seqNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["seqNo"])
                instance.huQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["huQuantity"])
                instance.huType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["huType"])
                instance.packageQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["packageQuantity"])
                instance.packageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["packageType"])
                instance.weight = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["weight"])
                instance.isHazardousMaterial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isHazardousMaterial"])
                instance.commodityDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commodityDescription"])
                instance.nfmcNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nfmcNo"])
                instance.carrierClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrierClass"])
                return instance
            }
			

			// Decoder for [BillOfLadingOrderInfoLine]
            Decoders.addDecoder(clazz: [BillOfLadingOrderInfoLine].self) { (source: AnyObject) -> [BillOfLadingOrderInfoLine] in
                return Decoders.decode(clazz: [BillOfLadingOrderInfoLine].self, source: source)
            }
			// Decoder for BillOfLadingOrderInfoLine
            Decoders.addDecoder(clazz: BillOfLadingOrderInfoLine.self) { (source: AnyObject) -> BillOfLadingOrderInfoLine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BillOfLadingOrderInfoLine()
                instance.customerOrderNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerOrderNo"])
                instance.noPackages = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["noPackages"])
                instance.weight = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["weight"])
                instance.palletslip = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["palletslip"])
                instance.additionalShipperInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalShipperInfo"])
                return instance
            }
			

			// Decoder for [BillingCode]
            Decoders.addDecoder(clazz: [BillingCode].self) { (source: AnyObject) -> [BillingCode] in
                return Decoders.decode(clazz: [BillingCode].self, source: source)
            }
			// Decoder for BillingCode
            Decoders.addDecoder(clazz: BillingCode.self) { (source: AnyObject) -> BillingCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BillingCode()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.userId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["userId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.billingCodeTypeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["billingCodeTypeId"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                return instance
            }
			

			// Decoder for [BillingCodeType]
            Decoders.addDecoder(clazz: [BillingCodeType].self) { (source: AnyObject) -> [BillingCodeType] in
                return Decoders.decode(clazz: [BillingCodeType].self, source: source)
            }
			// Decoder for BillingCodeType
            Decoders.addDecoder(clazz: BillingCodeType.self) { (source: AnyObject) -> BillingCodeType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BillingCodeType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.billingCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingCode"])
                instance.isActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isActive"])
                return instance
            }
			

			// Decoder for [Building]
            Decoders.addDecoder(clazz: [Building].self) { (source: AnyObject) -> [Building] in
                return Decoders.decode(clazz: [Building].self, source: source)
            }
			// Decoder for Building
            Decoders.addDecoder(clazz: Building.self) { (source: AnyObject) -> Building in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Building()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [BusinessTransaction]
            Decoders.addDecoder(clazz: [BusinessTransaction].self) { (source: AnyObject) -> [BusinessTransaction] in
                return Decoders.decode(clazz: [BusinessTransaction].self, source: source)
            }
			// Decoder for BusinessTransaction
            Decoders.addDecoder(clazz: BusinessTransaction.self) { (source: AnyObject) -> BusinessTransaction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BusinessTransaction()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.serverName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serverName"])
                instance.queueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueName"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.messageBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageBody"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [Carrier]
            Decoders.addDecoder(clazz: [Carrier].self) { (source: AnyObject) -> [Carrier] in
                return Decoders.decode(clazz: [Carrier].self, source: source)
            }
			// Decoder for Carrier
            Decoders.addDecoder(clazz: Carrier.self) { (source: AnyObject) -> Carrier in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Carrier()
                instance.carrier = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["carrier"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [CarrierService]
            Decoders.addDecoder(clazz: [CarrierService].self) { (source: AnyObject) -> [CarrierService] in
                return Decoders.decode(clazz: [CarrierService].self, source: source)
            }
			// Decoder for CarrierService
            Decoders.addDecoder(clazz: CarrierService.self) { (source: AnyObject) -> CarrierService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CarrierService()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [Carton]
            Decoders.addDecoder(clazz: [Carton].self) { (source: AnyObject) -> [Carton] in
                return Decoders.decode(clazz: [Carton].self, source: source)
            }
			// Decoder for Carton
            Decoders.addDecoder(clazz: Carton.self) { (source: AnyObject) -> Carton in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Carton()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.orderNo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderNo"])
                instance.cartonNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cartonNo"])
                instance.cartonTypeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cartonTypeId"])
                instance.cartonLPN = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cartonLPN"])
                instance.weightLbs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightLbs"])
                return instance
            }
			

			// Decoder for [CartonContent]
            Decoders.addDecoder(clazz: [CartonContent].self) { (source: AnyObject) -> [CartonContent] in
                return Decoders.decode(clazz: [CartonContent].self, source: source)
            }
			// Decoder for CartonContent
            Decoders.addDecoder(clazz: CartonContent.self) { (source: AnyObject) -> CartonContent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartonContent()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.groupOrderId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["groupOrderId"])
                instance.orderNo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderNo"])
                instance.cartonNoId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cartonNoId"])
                instance.lineItemId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lineItemId"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.quantityScanned = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantityScanned"])
                instance.completed = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["completed"])
                instance.toteId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["toteId"])
                instance.pickerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickerId"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [CartonType]
            Decoders.addDecoder(clazz: [CartonType].self) { (source: AnyObject) -> [CartonType] in
                return Decoders.decode(clazz: [CartonType].self, source: source)
            }
			// Decoder for CartonType
            Decoders.addDecoder(clazz: CartonType.self) { (source: AnyObject) -> CartonType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CartonType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.abbreviation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["abbreviation"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.lengthIn = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lengthIn"])
                instance.widthIn = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["widthIn"])
                instance.heightIn = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["heightIn"])
                instance.innerLengthIn = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["innerLengthIn"])
                instance.innerWidthIn = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["innerWidthIn"])
                instance.innerHeightIn = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["innerHeightIn"])
                instance.weightLbs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightLbs"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.isActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isActive"])
                return instance
            }
			

			// Decoder for [Customer]
            Decoders.addDecoder(clazz: [Customer].self) { (source: AnyObject) -> [Customer] in
                return Decoders.decode(clazz: [Customer].self, source: source)
            }
			// Decoder for Customer
            Decoders.addDecoder(clazz: Customer.self) { (source: AnyObject) -> Customer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Customer()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.customerNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerNo"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.attention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attention"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street2"])
                instance.street3Province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street3Province"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipCode"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.fax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fax"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.bossBranch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bossBranch"])
                instance.packageCarrierId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["packageCarrierId"])
                instance.truckCarrierId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["truckCarrierId"])
                instance.weightBreak = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["weightBreak"])
                instance.sector = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sector"])
                instance.division = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["division"])
                instance.costCenter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["costCenter"])
                instance.county = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["county"])
                instance.area = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["area"])
                instance.customerType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerType"])
                instance.massLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["massLevel"])
                instance.massFactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["massFactor"])
                instance.priceLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["priceLevel"])
                instance.openDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["openDate"])
                instance.closeDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["closeDate"])
                instance.restrictionPercent = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["restrictionPercent"])
                instance.externalId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["externalId"])
                instance.cycleDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["cycleDate"])
                instance.manager = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manager"])
                instance.alternateInventory = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["alternateInventory"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                instance.faxGone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["faxGone"])
                instance.residential = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["residential"])
                instance.csrBranch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csrBranch"])
                instance.extrinsicText1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extrinsicText1"])
                instance.extrinsicText2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extrinsicText2"])
                instance.extrinsicText3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extrinsicText3"])
                instance.extrinsicNumber1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["extrinsicNumber1"])
                instance.extrinsicNumber2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["extrinsicNumber2"])
                instance.extrinsicDecimal1 = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["extrinsicDecimal1"])
                instance.extrinsicDecimal2 = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["extrinsicDecimal2"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.omsCustomerId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["omsCustomerId"])
                return instance
            }
			

			// Decoder for [EmailTemplate]
            Decoders.addDecoder(clazz: [EmailTemplate].self) { (source: AnyObject) -> [EmailTemplate] in
                return Decoders.decode(clazz: [EmailTemplate].self, source: source)
            }
			// Decoder for EmailTemplate
            Decoders.addDecoder(clazz: EmailTemplate.self) { (source: AnyObject) -> EmailTemplate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmailTemplate()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.subjectText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subjectText"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fromName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fromName"])
                instance.fromAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fromAddress"])
                instance.emailTemplateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailTemplateType"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [ExternalShipment]
            Decoders.addDecoder(clazz: [ExternalShipment].self) { (source: AnyObject) -> [ExternalShipment] in
                return Decoders.decode(clazz: [ExternalShipment].self, source: source)
            }
			// Decoder for ExternalShipment
            Decoders.addDecoder(clazz: ExternalShipment.self) { (source: AnyObject) -> ExternalShipment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExternalShipment()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.orderId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderId"])
                instance.carrierId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["carrierId"])
                instance.parcelAccountId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["parcelAccountId"])
                instance.thirdPartyParcelAccountId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["thirdPartyParcelAccountId"])
                instance.freight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freight"])
                instance.trackingNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingNo"])
                instance.dim1In = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dim1In"])
                instance.dim2In = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dim2In"])
                instance.dim3In = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dim3In"])
                instance.weightLbs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightLbs"])
                instance.dimWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dimWeight"])
                instance.residential = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["residential"])
                instance.zone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zone"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }
			

			// Decoder for [FulfillmentPlan]
            Decoders.addDecoder(clazz: [FulfillmentPlan].self) { (source: AnyObject) -> [FulfillmentPlan] in
                return Decoders.decode(clazz: [FulfillmentPlan].self, source: source)
            }
			// Decoder for FulfillmentPlan
            Decoders.addDecoder(clazz: FulfillmentPlan.self) { (source: AnyObject) -> FulfillmentPlan in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FulfillmentPlan()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.orderSmartFilterId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderSmartFilterId"])
                instance.locationSmartFilterId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationSmartFilterId"])
                instance.maximumNumberOfOrders = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maximumNumberOfOrders"])
                instance.createPickWork = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPickWork"])
                instance.pickingRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickingRule"])
                instance.layoutRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["layoutRule"])
                instance.pickSortRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSortRule"])
                instance.createPickList = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPickList"])
                instance.pickListFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListFormat"])
                instance.pickListLayout = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListLayout"])
                instance.pickListGroup = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListGroup"])
                instance.pickListSort = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListSort"])
                instance.createPickSummary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPickSummary"])
                instance.pickSummaryFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSummaryFormat"])
                instance.pickSummaryLayout = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSummaryLayout"])
                instance.pickSummarySort = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSummarySort"])
                instance.cartonizeOrders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cartonizeOrders"])
                instance.autoShipCasebreakCartons = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["autoShipCasebreakCartons"])
                instance.preGenerateParcelLabels = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["preGenerateParcelLabels"])
                instance.overridePackingSlipTemplateId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["overridePackingSlipTemplateId"])
                instance.createPackingSlip = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPackingSlip"])
                instance.createOrderAssemblyGuide = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createOrderAssemblyGuide"])
                return instance
            }
			

			// Decoder for [FulfillmentProcess]
            Decoders.addDecoder(clazz: [FulfillmentProcess].self) { (source: AnyObject) -> [FulfillmentProcess] in
                return Decoders.decode(clazz: [FulfillmentProcess].self, source: source)
            }
			// Decoder for FulfillmentProcess
            Decoders.addDecoder(clazz: FulfillmentProcess.self) { (source: AnyObject) -> FulfillmentProcess in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FulfillmentProcess()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.processNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["processNo"])
                instance.workBatchId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["workBatchId"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.allocationPlanId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["allocationPlanId"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.orderSmartFilterId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderSmartFilterId"])
                instance.locationSmartFilterId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationSmartFilterId"])
                instance.orderLimit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderLimit"])
                instance.numberOfOrders = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfOrders"])
                instance.numberOfLines = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfLines"])
                instance.numberOfSKUs = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfSKUs"])
                instance.completedPicks = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["completedPicks"])
                instance.totalPicks = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalPicks"])
                instance.shippedCasebreaks = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shippedCasebreaks"])
                instance.totalCasebreaksToShip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalCasebreaksToShip"])
                instance.shippedOrders = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shippedOrders"])
                instance.totalOrdersToShip = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalOrdersToShip"])
                instance.completedToDo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["completedToDo"])
                instance.totalToDo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalToDo"])
                instance.createPickWork = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPickWork"])
                instance.pickingRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickingRule"])
                instance.layoutRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["layoutRule"])
                instance.pickSortRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSortRule"])
                instance.firstPickPosition = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["firstPickPosition"])
                instance.pickListFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListFormat"])
                instance.pickListLayout = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListLayout"])
                instance.pickListGroup = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListGroup"])
                instance.pickListSort = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickListSort"])
                instance.pickSummaryFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSummaryFormat"])
                instance.pickSummaryLayout = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSummaryLayout"])
                instance.pickSummarySort = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickSummarySort"])
                instance.createPickSummary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPickSummary"])
                instance.createPickList = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPickList"])
                instance.preGenerateParcelLabels = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["preGenerateParcelLabels"])
                instance.shipDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["shipDate"])
                instance.autoShipCasebreakCartons = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["autoShipCasebreakCartons"])
                instance.cartonizeOrders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cartonizeOrders"])
                instance.createPackingSlip = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createPackingSlip"])
                instance.overridePackingSlipTemplateId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["overridePackingSlipTemplateId"])
                instance.createOrderAssemblyGuide = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["createOrderAssemblyGuide"])
                return instance
            }
			

			// Decoder for [IntegrationPartner]
            Decoders.addDecoder(clazz: [IntegrationPartner].self) { (source: AnyObject) -> [IntegrationPartner] in
                return Decoders.decode(clazz: [IntegrationPartner].self, source: source)
            }
			// Decoder for IntegrationPartner
            Decoders.addDecoder(clazz: IntegrationPartner.self) { (source: AnyObject) -> IntegrationPartner in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IntegrationPartner()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [InventoryAdjustment]
            Decoders.addDecoder(clazz: [InventoryAdjustment].self) { (source: AnyObject) -> [InventoryAdjustment] in
                return Decoders.decode(clazz: [InventoryAdjustment].self, source: source)
            }
			// Decoder for InventoryAdjustment
            Decoders.addDecoder(clazz: InventoryAdjustment.self) { (source: AnyObject) -> InventoryAdjustment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InventoryAdjustment()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.lob = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lob"])
                instance.skuId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["skuId"])
                instance.poNoId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["poNoId"])
                instance.adjustmentDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["adjustmentDate"])
                instance.adjustmentTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adjustmentTime"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.qty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["qty"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.authorizedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizedBy"])
                instance.printed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["printed"])
                instance.orderNo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderNo"])
                instance.adjustmentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adjustmentCode"])
                return instance
            }
			

			// Decoder for [InventoryDetail]
            Decoders.addDecoder(clazz: [InventoryDetail].self) { (source: AnyObject) -> [InventoryDetail] in
                return Decoders.decode(clazz: [InventoryDetail].self, source: source)
            }
			// Decoder for InventoryDetail
            Decoders.addDecoder(clazz: InventoryDetail.self) { (source: AnyObject) -> InventoryDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InventoryDetail()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseLocationId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseLocationId"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.distributionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["distributionDate"])
                instance.unitsPerCase = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerCase"])
                instance.unitsPerWrap = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerWrap"])
                instance.revisionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["revisionDate"])
                instance.productionLot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productionLot"])
                instance.oldestReceiptDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["oldestReceiptDate"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.poNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["poNo"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [Item]
            Decoders.addDecoder(clazz: [Item].self) { (source: AnyObject) -> [Item] in
                return Decoders.decode(clazz: [Item].self, source: source)
            }
			// Decoder for Item
            Decoders.addDecoder(clazz: Item.self) { (source: AnyObject) -> Item in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Item()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.accountCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["accountCodeId"])
                instance.lowStockContactId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lowStockContactId"])
                instance.legacyLowLevelContactId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["legacyLowLevelContactId"])
                instance.lowStockCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lowStockCodeId"])
                instance.majorGroupId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["majorGroupId"])
                instance.subGroupId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["subGroupId"])
                instance.productCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["productCodeId"])
                instance.summaryCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["summaryCodeId"])
                instance.buyerId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["buyerId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.vendorSKU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorSKU"])
                instance.upc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upc"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.packingSlipDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["packingSlipDescription"])
                instance.absoluteMax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["absoluteMax"])
                instance.additionalDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalDescription"])
                instance.backorder = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backorder"])
                instance.chargeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chargeCode"])
                instance.commodityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commodityCode"])
                instance.compCode = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["compCode"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.criticalAmount = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["criticalAmount"])
                instance.overallFixedReorderPoint = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["overallFixedReorderPoint"])
                instance.overallLeadTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["overallLeadTime"])
                instance.listPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["listPrice"])
                instance.lotControlFlag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lotControlFlag"])
                instance.maxCycle = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxCycle"])
                instance.maxInterim = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxInterim"])
                instance.numericSortOrder = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numericSortOrder"])
                instance.outsideVendor = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["outsideVendor"])
                instance.pickNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pickNo"])
                instance.podOrderSuffix = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["podOrderSuffix"])
                instance.podRevDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["podRevDate"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.seasonalItem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["seasonalItem"])
                instance.requiresProductionLot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requiresProductionLot"])
                instance.sector = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sector"])
                instance.secure = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secure"])
                instance.serialCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serialCode"])
                instance.unitCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCode"])
                instance.unitsPerWrap = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerWrap"])
                instance.weightPerWrap = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightPerWrap"])
                instance.voidDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["voidDate"])
                instance.wrapCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapCode"])
                instance.extrinsicText1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extrinsicText1"])
                instance.extrinsicText2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extrinsicText2"])
                instance.extrinsicText3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extrinsicText3"])
                instance.extrinsicNumber1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["extrinsicNumber1"])
                instance.extrinsicNumber2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["extrinsicNumber2"])
                instance.extrinsicDecimal1 = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["extrinsicDecimal1"])
                instance.extrinsicDecimal2 = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["extrinsicDecimal2"])
                instance.casebreakEnabled = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["casebreakEnabled"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.forwardLotMixingRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["forwardLotMixingRule"])
                instance.storageLotMixingRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["storageLotMixingRule"])
                instance.forwardItemMixingRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["forwardItemMixingRule"])
                instance.storageItemMixingRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["storageItemMixingRule"])
                instance.allocationRule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["allocationRule"])
                instance.hazmat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hazmat"])
                return instance
            }
			

			// Decoder for [ItemAccountCode]
            Decoders.addDecoder(clazz: [ItemAccountCode].self) { (source: AnyObject) -> [ItemAccountCode] in
                return Decoders.decode(clazz: [ItemAccountCode].self, source: source)
            }
			// Decoder for ItemAccountCode
            Decoders.addDecoder(clazz: ItemAccountCode.self) { (source: AnyObject) -> ItemAccountCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemAccountCode()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemBuyer]
            Decoders.addDecoder(clazz: [ItemBuyer].self) { (source: AnyObject) -> [ItemBuyer] in
                return Decoders.decode(clazz: [ItemBuyer].self, source: source)
            }
			// Decoder for ItemBuyer
            Decoders.addDecoder(clazz: ItemBuyer.self) { (source: AnyObject) -> ItemBuyer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemBuyer()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemLegacyLowStockContact]
            Decoders.addDecoder(clazz: [ItemLegacyLowStockContact].self) { (source: AnyObject) -> [ItemLegacyLowStockContact] in
                return Decoders.decode(clazz: [ItemLegacyLowStockContact].self, source: source)
            }
			// Decoder for ItemLegacyLowStockContact
            Decoders.addDecoder(clazz: ItemLegacyLowStockContact.self) { (source: AnyObject) -> ItemLegacyLowStockContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemLegacyLowStockContact()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemLowStockCode]
            Decoders.addDecoder(clazz: [ItemLowStockCode].self) { (source: AnyObject) -> [ItemLowStockCode] in
                return Decoders.decode(clazz: [ItemLowStockCode].self, source: source)
            }
			// Decoder for ItemLowStockCode
            Decoders.addDecoder(clazz: ItemLowStockCode.self) { (source: AnyObject) -> ItemLowStockCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemLowStockCode()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemMajorGroup]
            Decoders.addDecoder(clazz: [ItemMajorGroup].self) { (source: AnyObject) -> [ItemMajorGroup] in
                return Decoders.decode(clazz: [ItemMajorGroup].self, source: source)
            }
			// Decoder for ItemMajorGroup
            Decoders.addDecoder(clazz: ItemMajorGroup.self) { (source: AnyObject) -> ItemMajorGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemMajorGroup()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemProductCode]
            Decoders.addDecoder(clazz: [ItemProductCode].self) { (source: AnyObject) -> [ItemProductCode] in
                return Decoders.decode(clazz: [ItemProductCode].self, source: source)
            }
			// Decoder for ItemProductCode
            Decoders.addDecoder(clazz: ItemProductCode.self) { (source: AnyObject) -> ItemProductCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemProductCode()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemReceipt]
            Decoders.addDecoder(clazz: [ItemReceipt].self) { (source: AnyObject) -> [ItemReceipt] in
                return Decoders.decode(clazz: [ItemReceipt].self, source: source)
            }
			// Decoder for ItemReceipt
            Decoders.addDecoder(clazz: ItemReceipt.self) { (source: AnyObject) -> ItemReceipt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemReceipt()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.poNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["poNo"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.legacyPoNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legacyPoNo"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.orderDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["orderDate"])
                instance.factCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["factCost"])
                instance.mlCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mlCost"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.orderQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderQuantity"])
                instance.requestedDeliveryDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["requestedDeliveryDate"])
                instance.unitCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCode"])
                instance.wrapCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapCode"])
                instance.unitsPerWrap = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerWrap"])
                instance.cost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cost"])
                instance.sell = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sell"])
                instance.pricingPer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pricingPer"])
                instance.maxFreight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maxFreight"])
                instance.chargeFreight = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chargeFreight"])
                instance.maxOther = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maxOther"])
                instance.distDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["distDate"])
                instance.voidDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["voidDate"])
                instance.freezeAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["freezeAction"])
                instance.revDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["revDate"])
                instance.artBack = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["artBack"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.sample = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sample"])
                instance.sampleTo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sampleTo"])
                instance.maxOvers = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxOvers"])
                instance.maxUnders = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxUnders"])
                instance.receivedSfp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["receivedSfp"])
                instance.budgetCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["budgetCode"])
                instance.accountingCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountingCode"])
                instance.taxExempt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taxExempt"])
                instance.capitalize = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["capitalize"])
                instance.accrual = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accrual"])
                instance.oddQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["oddQuantity"])
                instance.freightCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightCost"])
                instance.receivedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["receivedDate"])
                instance.receivedQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["receivedQuantity"])
                instance.fromProd = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["fromProd"])
                instance.sfpComplete = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sfpComplete"])
                instance.endQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["endQuantity"])
                instance.endVal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["endVal"])
                instance.endFact = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["endFact"])
                instance.interimQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["interimQuantity"])
                instance.interimVal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["interimVal"])
                instance.interimFact = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["interimFact"])
                instance.lastAct = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastAct"])
                instance.weightPerWrap = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightPerWrap"])
                instance.norcs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["norcs"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["vendorId"])
                instance.bsVendor = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["bsVendor"])
                instance.mlVendor = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["mlVendor"])
                instance.receiptNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["receiptNo"])
                instance.paidFull = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["paidFull"])
                instance.enteredBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enteredBy"])
                instance.receivedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receivedBy"])
                instance.lineNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lineNo"])
                instance.prodLot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prodLot"])
                instance.unitsPerCase = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerCase"])
                instance.caseWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["caseWeight"])
                instance.height = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["height"])
                instance.width = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["width"])
                instance.length = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["length"])
                instance.dockTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dockTime"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.impressions = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["impressions"])
                instance.asnLine = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["asnLine"])
                return instance
            }
			

			// Decoder for [ItemSubGroup]
            Decoders.addDecoder(clazz: [ItemSubGroup].self) { (source: AnyObject) -> [ItemSubGroup] in
                return Decoders.decode(clazz: [ItemSubGroup].self, source: source)
            }
			// Decoder for ItemSubGroup
            Decoders.addDecoder(clazz: ItemSubGroup.self) { (source: AnyObject) -> ItemSubGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemSubGroup()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ItemSummaryCode]
            Decoders.addDecoder(clazz: [ItemSummaryCode].self) { (source: AnyObject) -> [ItemSummaryCode] in
                return Decoders.decode(clazz: [ItemSummaryCode].self, source: source)
            }
			// Decoder for ItemSummaryCode
            Decoders.addDecoder(clazz: ItemSummaryCode.self) { (source: AnyObject) -> ItemSummaryCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemSummaryCode()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [JobTime]
            Decoders.addDecoder(clazz: [JobTime].self) { (source: AnyObject) -> [JobTime] in
                return Decoders.decode(clazz: [JobTime].self, source: source)
            }
			// Decoder for JobTime
            Decoders.addDecoder(clazz: JobTime.self) { (source: AnyObject) -> JobTime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobTime()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.secondDuration = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["secondDuration"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.userId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["userId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.jobTypeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["jobTypeId"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                return instance
            }
			

			// Decoder for [JobType]
            Decoders.addDecoder(clazz: [JobType].self) { (source: AnyObject) -> [JobType] in
                return Decoders.decode(clazz: [JobType].self, source: source)
            }
			// Decoder for JobType
            Decoders.addDecoder(clazz: JobType.self) { (source: AnyObject) -> JobType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.jobCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jobCode"])
                instance.isActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isActive"])
                return instance
            }
			

			// Decoder for [LineOfBusiness]
            Decoders.addDecoder(clazz: [LineOfBusiness].self) { (source: AnyObject) -> [LineOfBusiness] in
                return Decoders.decode(clazz: [LineOfBusiness].self, source: source)
            }
			// Decoder for LineOfBusiness
            Decoders.addDecoder(clazz: LineOfBusiness.self) { (source: AnyObject) -> LineOfBusiness in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineOfBusiness()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [Location]
            Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
                return Decoders.decode(clazz: [Location].self, source: source)
            }
			// Decoder for Location
            Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Location()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.buildingId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["buildingId"])
                instance.zoneId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["zoneId"])
                instance.aisleId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["aisleId"])
                instance.billingTypeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["billingTypeId"])
                instance.behaviorType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["behaviorType"])
                instance.footprintId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["footprintId"])
                instance.addressSchemeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["addressSchemeId"])
                instance.origin = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["origin"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.level = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["level"])
                instance.bay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["bay"])
                instance.number = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number"])
                instance.online = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["online"])
                instance.priorityCode = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["priorityCode"])
                instance.allowItemMixing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowItemMixing"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [LocationAddressScheme]
            Decoders.addDecoder(clazz: [LocationAddressScheme].self) { (source: AnyObject) -> [LocationAddressScheme] in
                return Decoders.decode(clazz: [LocationAddressScheme].self, source: source)
            }
			// Decoder for LocationAddressScheme
            Decoders.addDecoder(clazz: LocationAddressScheme.self) { (source: AnyObject) -> LocationAddressScheme in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LocationAddressScheme()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.formatString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formatString"])
                instance.locationNamingScheme = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationNamingScheme"])
                instance.locationNumberZeroPadded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["locationNumberZeroPadded"])
                instance.locationNumberMinimumNumberOfDigits = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationNumberMinimumNumberOfDigits"])
                instance.levelNamingScheme = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["levelNamingScheme"])
                instance.levelNumberZeroPadded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["levelNumberZeroPadded"])
                instance.levelNumberMinimumNumberOfDigits = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["levelNumberMinimumNumberOfDigits"])
                instance.aisleNamingScheme = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aisleNamingScheme"])
                instance.aisleNumberZeroPadded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["aisleNumberZeroPadded"])
                instance.aisleNumberMinimumNumberOfDigits = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["aisleNumberMinimumNumberOfDigits"])
                instance.bayNamingScheme = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bayNamingScheme"])
                instance.bayNumberZeroPadded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["bayNumberZeroPadded"])
                instance.bayNumberMinimumNumberOfDigits = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["bayNumberMinimumNumberOfDigits"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [LocationBillingType]
            Decoders.addDecoder(clazz: [LocationBillingType].self) { (source: AnyObject) -> [LocationBillingType] in
                return Decoders.decode(clazz: [LocationBillingType].self, source: source)
            }
			// Decoder for LocationBillingType
            Decoders.addDecoder(clazz: LocationBillingType.self) { (source: AnyObject) -> LocationBillingType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LocationBillingType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [LocationFootprint]
            Decoders.addDecoder(clazz: [LocationFootprint].self) { (source: AnyObject) -> [LocationFootprint] in
                return Decoders.decode(clazz: [LocationFootprint].self, source: source)
            }
			// Decoder for LocationFootprint
            Decoders.addDecoder(clazz: LocationFootprint.self) { (source: AnyObject) -> LocationFootprint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LocationFootprint()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.width = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["width"])
                instance.depth = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["depth"])
                instance.height = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["height"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [LoggedTime]
            Decoders.addDecoder(clazz: [LoggedTime].self) { (source: AnyObject) -> [LoggedTime] in
                return Decoders.decode(clazz: [LoggedTime].self, source: source)
            }
			// Decoder for LoggedTime
            Decoders.addDecoder(clazz: LoggedTime.self) { (source: AnyObject) -> LoggedTime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LoggedTime()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.start = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["end"])
                instance.duration = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.client = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["client"])
                instance.userId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["userId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.loggedTimeTypeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["loggedTimeTypeId"])
                instance.appId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["appId"])
                return instance
            }
			

			// Decoder for [LoggedTimeType]
            Decoders.addDecoder(clazz: [LoggedTimeType].self) { (source: AnyObject) -> [LoggedTimeType] in
                return Decoders.decode(clazz: [LoggedTimeType].self, source: source)
            }
			// Decoder for LoggedTimeType
            Decoders.addDecoder(clazz: LoggedTimeType.self) { (source: AnyObject) -> LoggedTimeType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LoggedTimeType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [LowStock]
            Decoders.addDecoder(clazz: [LowStock].self) { (source: AnyObject) -> [LowStock] in
                return Decoders.decode(clazz: [LowStock].self, source: source)
            }
			// Decoder for LowStock
            Decoders.addDecoder(clazz: LowStock.self) { (source: AnyObject) -> LowStock in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LowStock()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.lowLevelDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lowLevelDate"])
                instance.lowStockMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lowStockMessage"])
                instance.printFlag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["printFlag"])
                instance.isDelayed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDelayed"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [Order]
            Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject) -> [Order] in
                return Decoders.decode(clazz: [Order].self, source: source)
            }
			// Decoder for Order
            Decoders.addDecoder(clazz: Order.self) { (source: AnyObject) -> Order in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Order()
                instance.orderNo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderNo"])
                instance.customerOrderNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerOrderNo"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.orderDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["orderDate"])
                instance.customerNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerNo"])
                instance.firstShipDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["firstShipDate"])
                instance.lastShipDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastShipDate"])
                instance.deliverOnDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["deliverOnDate"])
                instance.needByDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["needByDate"])
                instance.carrierId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["carrierId"])
                instance.serviceTypeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serviceTypeId"])
                instance.shipVia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipVia"])
                instance.mediaCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaCode"])
                instance.legacyRestrictionType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legacyRestrictionType"])
                instance.alcoholOrderType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alcoholOrderType"])
                instance.alternateUsage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alternateUsage"])
                instance.authorizationAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["authorizationAmount"])
                instance.authorizedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizedBy"])
                instance.balanceDue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balanceDue"])
                instance.batchNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["batchNo"])
                instance.billToAttention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToAttention"])
                instance.billToCompany = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToCompany"])
                instance.billToStreet = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToStreet"])
                instance.billToStreet2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToStreet2"])
                instance.billToStreet3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToStreet3"])
                instance.billToCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToCity"])
                instance.billToState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToState"])
                instance.billToZip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToZip"])
                instance.billToCountry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToCountry"])
                instance.billToPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToPhone"])
                instance.billToEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billToEmail"])
                instance.numberOfCartons = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfCartons"])
                instance.numberOfPallets = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfPallets"])
                instance.completionStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["completionStatus"])
                instance.parcelAccountId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["parcelAccountId"])
                instance.costCenter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["costCenter"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.customerPONo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerPONo"])
                instance.distributionChannel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["distributionChannel"])
                instance.distributionCharges = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["distributionCharges"])
                instance.division = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["division"])
                instance.enteredBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enteredBy"])
                instance.estimatedWeightLbs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["estimatedWeightLbs"])
                instance.freight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freight"])
                instance.giftMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["giftMessage"])
                instance.groupOrderId = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["groupOrderId"])
                instance.holdCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["holdCode"])
                instance.integrationPartnerId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["integrationPartnerId"])
                instance.numberOfLineItems = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfLineItems"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.omsOrderId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["omsOrderId"])
                instance.omsOrderNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["omsOrderNo"])
                instance.orderLoadProgramId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderLoadProgramId"])
                instance.orderMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderMessage"])
                instance.orderReason = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderReason"])
                instance.orderSourceId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderSourceId"])
                instance.packingSlipTemplateId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["packingSlipTemplateId"])
                instance.orderConfirmationEmailTemplateId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderConfirmationEmailTemplateId"])
                instance.shipmentConfirmationEmailTemplateId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shipmentConfirmationEmailTemplateId"])
                instance.priceLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["priceLevel"])
                instance.priorityCode = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["priorityCode"])
                instance.fulfillmentProcessId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["fulfillmentProcessId"])
                instance.shipBy = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["shipBy"])
                instance.shipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipCode"])
                instance.shipDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["shipDate"])
                instance.shipToAttention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToAttention"])
                instance.shipToCompany = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToCompany"])
                instance.shipToStreet = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToStreet"])
                instance.shipToStreet2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToStreet2"])
                instance.shipToStreet3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToStreet3"])
                instance.shipToCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToCity"])
                instance.shipToState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToState"])
                instance.shipToZip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToZip"])
                instance.shipToCountry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToCountry"])
                instance.shipToPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToPhone"])
                instance.shipToEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shipToEmail"])
                instance.shippingCharge = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shippingCharge"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.stopBackOrders = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopBackOrders"])
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.total = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total"])
                instance.totalPaid = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalPaid"])
                instance.totalQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalQty"])
                instance.weightLbs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightLbs"])
                instance.lineItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lineItems"])
                return instance
            }
			

			// Decoder for [OrderLine]
            Decoders.addDecoder(clazz: [OrderLine].self) { (source: AnyObject) -> [OrderLine] in
                return Decoders.decode(clazz: [OrderLine].self, source: source)
            }
			// Decoder for OrderLine
            Decoders.addDecoder(clazz: OrderLine.self) { (source: AnyObject) -> OrderLine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderLine()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.orderNo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderNo"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.poNoId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["poNoId"])
                instance.orderedQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderedQty"])
                instance.allowedQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["allowedQty"])
                instance.shippedQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shippedQty"])
                instance.backorderQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["backorderQty"])
                instance.revDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["revDate"])
                instance.chargeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chargeCode"])
                instance.distributionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["distributionCode"])
                instance.upc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upc"])
                instance.vendorSKU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorSKU"])
                instance.orderSourceSKU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderSourceSKU"])
                instance.unitCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unitCost"])
                instance.unitSell = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unitSell"])
                instance.extendedCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["extendedCost"])
                instance.extendedSell = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["extendedSell"])
                instance.ncExtendedSell = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["ncExtendedSell"])
                instance.itemWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["itemWeight"])
                instance.weightPerWrap = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightPerWrap"])
                instance.sector = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sector"])
                instance.itemAccountCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemAccountCodeId"])
                instance.itemLegacyLowStockContactId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemLegacyLowStockContactId"])
                instance.itemMajorGroupId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemMajorGroupId"])
                instance.itemSubGroupId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemSubGroupId"])
                instance.itemProductCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemProductCodeId"])
                instance.itemSummaryCodeId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemSummaryCodeId"])
                return instance
            }
			

			// Decoder for [OrderLoadProgram]
            Decoders.addDecoder(clazz: [OrderLoadProgram].self) { (source: AnyObject) -> [OrderLoadProgram] in
                return Decoders.decode(clazz: [OrderLoadProgram].self, source: source)
            }
			// Decoder for OrderLoadProgram
            Decoders.addDecoder(clazz: OrderLoadProgram.self) { (source: AnyObject) -> OrderLoadProgram in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderLoadProgram()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [OrderSource]
            Decoders.addDecoder(clazz: [OrderSource].self) { (source: AnyObject) -> [OrderSource] in
                return Decoders.decode(clazz: [OrderSource].self, source: source)
            }
			// Decoder for OrderSource
            Decoders.addDecoder(clazz: OrderSource.self) { (source: AnyObject) -> OrderSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderSource()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.packingNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["packingNotes"])
                instance.requireCartonizedASN = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["requireCartonizedASN"])
                instance.requireGS1128Label = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["requireGS1128Label"])
                instance.shippingNotes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingNotes"])
                instance.packingSlipId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["packingSlipId"])
                instance.orderConfirmationEmailId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderConfirmationEmailId"])
                instance.shipmentConfirmationEmailId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shipmentConfirmationEmailId"])
                return instance
            }
			

			// Decoder for [OrderSourceReservation]
            Decoders.addDecoder(clazz: [OrderSourceReservation].self) { (source: AnyObject) -> [OrderSourceReservation] in
                return Decoders.decode(clazz: [OrderSourceReservation].self, source: source)
            }
			// Decoder for OrderSourceReservation
            Decoders.addDecoder(clazz: OrderSourceReservation.self) { (source: AnyObject) -> OrderSourceReservation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderSourceReservation()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.orderSourceId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderSourceId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.reservedQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["reservedQuantity"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [OverrideReturnAddress]
            Decoders.addDecoder(clazz: [OverrideReturnAddress].self) { (source: AnyObject) -> [OverrideReturnAddress] in
                return Decoders.decode(clazz: [OverrideReturnAddress].self, source: source)
            }
			// Decoder for OverrideReturnAddress
            Decoders.addDecoder(clazz: OverrideReturnAddress.self) { (source: AnyObject) -> OverrideReturnAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OverrideReturnAddress()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.orderSourceId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderSourceId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.attention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attention"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                return instance
            }
			

			// Decoder for [ParcelAccount]
            Decoders.addDecoder(clazz: [ParcelAccount].self) { (source: AnyObject) -> [ParcelAccount] in
                return Decoders.decode(clazz: [ParcelAccount].self, source: source)
            }
			// Decoder for ParcelAccount
            Decoders.addDecoder(clazz: ParcelAccount.self) { (source: AnyObject) -> ParcelAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ParcelAccount()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.carrier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrier"])
                instance.accountNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountNo"])
                instance.client = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["client"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.manifestPartnerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manifestPartnerId"])
                return instance
            }
			

			// Decoder for [ParcelShipment]
            Decoders.addDecoder(clazz: [ParcelShipment].self) { (source: AnyObject) -> [ParcelShipment] in
                return Decoders.decode(clazz: [ParcelShipment].self, source: source)
            }
			// Decoder for ParcelShipment
            Decoders.addDecoder(clazz: ParcelShipment.self) { (source: AnyObject) -> ParcelShipment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ParcelShipment()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.shipDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["shipDate"])
                instance.deliveredDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["deliveredDate"])
                instance.trackingNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingNo"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.orderNo = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["orderNo"])
                instance.cartonNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cartonNo"])
                instance.numberOfCartons = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfCartons"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.shipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shipped"])
                instance.carrierServiceId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["carrierServiceId"])
                instance.dim1In = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dim1In"])
                instance.dim2In = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dim2In"])
                instance.dim3In = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dim3In"])
                instance.estimatedZone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estimatedZone"])
                instance.parcelAccountNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parcelAccountNo"])
                instance.thirdPartyParcelAccountNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartyParcelAccountNo"])
                instance.manifestId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["manifestId"])
                instance.residential = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["residential"])
                instance.billingOption = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingOption"])
                instance.weightLbs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightLbs"])
                instance.dimWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dimWeight"])
                instance.licensePlateNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licensePlateNumber"])
                instance.chargedFreightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["chargedFreightAmount"])
                instance.publishedFreightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["publishedFreightAmount"])
                instance.retailFreightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["retailFreightAmount"])
                return instance
            }
			

			// Decoder for [PickFaceAssignment]
            Decoders.addDecoder(clazz: [PickFaceAssignment].self) { (source: AnyObject) -> [PickFaceAssignment] in
                return Decoders.decode(clazz: [PickFaceAssignment].self, source: source)
            }
			// Decoder for PickFaceAssignment
            Decoders.addDecoder(clazz: PickFaceAssignment.self) { (source: AnyObject) -> PickFaceAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PickFaceAssignment()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.locationId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationId"])
                instance.replenishmentPoint = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["replenishmentPoint"])
                instance.maxQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxQuantity"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [ProductType]
            Decoders.addDecoder(clazz: [ProductType].self) { (source: AnyObject) -> [ProductType] in
                return Decoders.decode(clazz: [ProductType].self, source: source)
            }
			// Decoder for ProductType
            Decoders.addDecoder(clazz: ProductType.self) { (source: AnyObject) -> ProductType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ProductionLot]
            Decoders.addDecoder(clazz: [ProductionLot].self) { (source: AnyObject) -> [ProductionLot] in
                return Decoders.decode(clazz: [ProductionLot].self, source: source)
            }
			// Decoder for ProductionLot
            Decoders.addDecoder(clazz: ProductionLot.self) { (source: AnyObject) -> ProductionLot in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductionLot()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.productionLot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productionLot"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [QuickAdjustment]
            Decoders.addDecoder(clazz: [QuickAdjustment].self) { (source: AnyObject) -> [QuickAdjustment] in
                return Decoders.decode(clazz: [QuickAdjustment].self, source: source)
            }
			// Decoder for QuickAdjustment
            Decoders.addDecoder(clazz: QuickAdjustment.self) { (source: AnyObject) -> QuickAdjustment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QuickAdjustment()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.locationId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationId"])
                instance.adjustmentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adjustmentCode"])
                instance.totalQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["totalQuantity"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [QuickReceipt]
            Decoders.addDecoder(clazz: [QuickReceipt].self) { (source: AnyObject) -> [QuickReceipt] in
                return Decoders.decode(clazz: [QuickReceipt].self, source: source)
            }
			// Decoder for QuickReceipt
            Decoders.addDecoder(clazz: QuickReceipt.self) { (source: AnyObject) -> QuickReceipt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QuickReceipt()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createdBy = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createdBy"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.locationId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationId"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["vendorId"])
                instance.carrier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrier"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.unitCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCode"])
                instance.wrapCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapCode"])
                instance.weightPerWrap = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightPerWrap"])
                instance.unitsPerWrap = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerWrap"])
                instance.unitsPerCase = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerCase"])
                instance.casesPerPallet = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["casesPerPallet"])
                instance.caseWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["caseWeight"])
                instance.productionLot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productionLot"])
                instance.revisionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["revisionDate"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.cartonLength = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cartonLength"])
                instance.cartonWidth = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cartonWidth"])
                instance.cartonHeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cartonHeight"])
                instance.cost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cost"])
                instance.sell = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sell"])
                instance.pricingPer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pricingPer"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [ReceivingProcess]
            Decoders.addDecoder(clazz: [ReceivingProcess].self) { (source: AnyObject) -> [ReceivingProcess] in
                return Decoders.decode(clazz: [ReceivingProcess].self, source: source)
            }
			// Decoder for ReceivingProcess
            Decoders.addDecoder(clazz: ReceivingProcess.self) { (source: AnyObject) -> ReceivingProcess in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReceivingProcess()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.workBatchId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["workBatchId"])
                instance.receivingWorksheetId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["receivingWorksheetId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [ReceivingWorksheet]
            Decoders.addDecoder(clazz: [ReceivingWorksheet].self) { (source: AnyObject) -> [ReceivingWorksheet] in
                return Decoders.decode(clazz: [ReceivingWorksheet].self, source: source)
            }
			// Decoder for ReceivingWorksheet
            Decoders.addDecoder(clazz: ReceivingWorksheet.self) { (source: AnyObject) -> ReceivingWorksheet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReceivingWorksheet()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.poNoId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["poNoId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.vendorId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["vendorId"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.serviceLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serviceLevel"])
                instance.createdBy = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createdBy"])
                instance.worksheetName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["worksheetName"])
                instance.carrier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrier"])
                instance.onTheDock = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["onTheDock"])
                instance.autoCommit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["autoCommit"])
                instance.lineItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lineItems"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.workBatchId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["workBatchId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [ReceivingWorksheetLineItem]
            Decoders.addDecoder(clazz: [ReceivingWorksheetLineItem].self) { (source: AnyObject) -> [ReceivingWorksheetLineItem] in
                return Decoders.decode(clazz: [ReceivingWorksheetLineItem].self, source: source)
            }
			// Decoder for ReceivingWorksheetLineItem
            Decoders.addDecoder(clazz: ReceivingWorksheetLineItem.self) { (source: AnyObject) -> ReceivingWorksheetLineItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReceivingWorksheetLineItem()
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.fullDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDescription"])
                instance.orderedQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderedQty"])
                instance.prevReceivedQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["prevReceivedQty"])
                instance.unreceivedQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unreceivedQty"])
                instance.receivingQty = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["receivingQty"])
                instance.unitCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCode"])
                instance.wrapCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapCode"])
                instance.unitsPerWrap = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerWrap"])
                instance.unitsPerCase = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unitsPerCase"])
                instance.casesPerPallet = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["casesPerPallet"])
                instance.weightPerWrap = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightPerWrap"])
                instance.weightPerCase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weightPerCase"])
                instance.productionLot = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productionLot"])
                instance.revisionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["revisionDate"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.cartonLength = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cartonLength"])
                instance.cartonWidth = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cartonWidth"])
                instance.cartonHeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cartonHeight"])
                instance.putAwayPlans = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["putAwayPlans"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                return instance
            }
			

			// Decoder for [ReceivingWorksheetPutAwayPlan]
            Decoders.addDecoder(clazz: [ReceivingWorksheetPutAwayPlan].self) { (source: AnyObject) -> [ReceivingWorksheetPutAwayPlan] in
                return Decoders.decode(clazz: [ReceivingWorksheetPutAwayPlan].self, source: source)
            }
			// Decoder for ReceivingWorksheetPutAwayPlan
            Decoders.addDecoder(clazz: ReceivingWorksheetPutAwayPlan.self) { (source: AnyObject) -> ReceivingWorksheetPutAwayPlan in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReceivingWorksheetPutAwayPlan()
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                return instance
            }
			

			// Decoder for [Replenishment]
            Decoders.addDecoder(clazz: [Replenishment].self) { (source: AnyObject) -> [Replenishment] in
                return Decoders.decode(clazz: [Replenishment].self, source: source)
            }
			// Decoder for Replenishment
            Decoders.addDecoder(clazz: Replenishment.self) { (source: AnyObject) -> Replenishment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Replenishment()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.replenishmentProcess = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["replenishmentProcess"])
                instance.pickFaceAssignment = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["pickFaceAssignment"])
                instance.locationId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["locationId"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                return instance
            }
			

			// Decoder for [ReplenishmentPlan]
            Decoders.addDecoder(clazz: [ReplenishmentPlan].self) { (source: AnyObject) -> [ReplenishmentPlan] in
                return Decoders.decode(clazz: [ReplenishmentPlan].self, source: source)
            }
			// Decoder for ReplenishmentPlan
            Decoders.addDecoder(clazz: ReplenishmentPlan.self) { (source: AnyObject) -> ReplenishmentPlan in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReplenishmentPlan()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.pickFaceAssignmentSmartFilterId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["pickFaceAssignmentSmartFilterId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for [ReplenishmentProcess]
            Decoders.addDecoder(clazz: [ReplenishmentProcess].self) { (source: AnyObject) -> [ReplenishmentProcess] in
                return Decoders.decode(clazz: [ReplenishmentProcess].self, source: source)
            }
			// Decoder for ReplenishmentProcess
            Decoders.addDecoder(clazz: ReplenishmentProcess.self) { (source: AnyObject) -> ReplenishmentProcess in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReplenishmentProcess()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.replenishmentPlanId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["replenishmentPlanId"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.estimatedWork = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["estimatedWork"])
                return instance
            }
			

			// Decoder for [ServiceType]
            Decoders.addDecoder(clazz: [ServiceType].self) { (source: AnyObject) -> [ServiceType] in
                return Decoders.decode(clazz: [ServiceType].self, source: source)
            }
			// Decoder for ServiceType
            Decoders.addDecoder(clazz: ServiceType.self) { (source: AnyObject) -> ServiceType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceType()
                instance.serviceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serviceType"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [ShoppingCartConnection]
            Decoders.addDecoder(clazz: [ShoppingCartConnection].self) { (source: AnyObject) -> [ShoppingCartConnection] in
                return Decoders.decode(clazz: [ShoppingCartConnection].self, source: source)
            }
			// Decoder for ShoppingCartConnection
            Decoders.addDecoder(clazz: ShoppingCartConnection.self) { (source: AnyObject) -> ShoppingCartConnection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShoppingCartConnection()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.nonce = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nonce"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.orderSourceId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["orderSourceId"])
                instance.integrationPartnerId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["integrationPartnerId"])
                instance.connectionType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectionType"])
                instance.itemFilterId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["itemFilterId"])
                instance.infoplusSKUFieldToMap = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["infoplusSKUFieldToMap"])
                instance.shoppingCartSKUFieldToMap = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shoppingCartSKUFieldToMap"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shoppingCartStoreURL = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shoppingCartStoreURL"])
                instance.accessCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessCode"])
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.syncOrders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["syncOrders"])
                instance.syncInventory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["syncInventory"])
                instance.syncTrackingData = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["syncTrackingData"])
                instance.syncInventoryLevelsLastRunTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["syncInventoryLevelsLastRunTime"])
                return instance
            }
			

			// Decoder for [ThirdPartyParcelAccount]
            Decoders.addDecoder(clazz: [ThirdPartyParcelAccount].self) { (source: AnyObject) -> [ThirdPartyParcelAccount] in
                return Decoders.decode(clazz: [ThirdPartyParcelAccount].self, source: source)
            }
			// Decoder for ThirdPartyParcelAccount
            Decoders.addDecoder(clazz: ThirdPartyParcelAccount.self) { (source: AnyObject) -> ThirdPartyParcelAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ThirdPartyParcelAccount()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.carrier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrier"])
                instance.accountNo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountNo"])
                instance.accountName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountName"])
                instance.billingCompany = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingCompany"])
                instance.attention = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attention"])
                instance.street1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street1"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street2"])
                instance.street3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street3"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipCode"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.active = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["active"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
			// Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.userId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["userId"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }
			

			// Decoder for [Vendor]
            Decoders.addDecoder(clazz: [Vendor].self) { (source: AnyObject) -> [Vendor] in
                return Decoders.decode(clazz: [Vendor].self, source: source)
            }
			// Decoder for Vendor
            Decoders.addDecoder(clazz: Vendor.self) { (source: AnyObject) -> Vendor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Vendor()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.vendorNo = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["vendorNo"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipCode"])
                instance.contact = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contact"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.fax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fax"])
                instance.externalId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["externalId"])
                instance.terms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["terms"])
                instance.fob = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fob"])
                instance.shipVia = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["shipVia"])
                instance.requestDays = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["requestDays"])
                instance.actualDays = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["actualDays"])
                instance.salesTaxCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["salesTaxCode"])
                instance.product1 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product1"])
                instance.product2 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product2"])
                instance.product3 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product3"])
                instance.product4 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product4"])
                instance.product5 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product5"])
                instance.product6 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product6"])
                instance.product7 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product7"])
                instance.product8 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product8"])
                instance.product9 = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["product9"])
                instance.podDays = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["podDays"])
                instance.chargeOut = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chargeOut"])
                instance.arEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arEmail"])
                instance.orderEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderEmail"])
                instance.orderAttach = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderAttach"])
                instance.sendQuantityType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sendQuantityType"])
                instance.minority = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["minority"])
                instance.sendOutside = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sendOutside"])
                instance.podOrderSuffix = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["podOrderSuffix"])
                instance.podEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["podEmail"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.inactive = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inactive"])
                return instance
            }
			

			// Decoder for [VendorComplianceSurvey]
            Decoders.addDecoder(clazz: [VendorComplianceSurvey].self) { (source: AnyObject) -> [VendorComplianceSurvey] in
                return Decoders.decode(clazz: [VendorComplianceSurvey].self, source: source)
            }
			// Decoder for VendorComplianceSurvey
            Decoders.addDecoder(clazz: VendorComplianceSurvey.self) { (source: AnyObject) -> VendorComplianceSurvey in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VendorComplianceSurvey()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.worksheetId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["worksheetId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.surveyQuestions = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["surveyQuestions"])
                return instance
            }
			

			// Decoder for [Warehouse]
            Decoders.addDecoder(clazz: [Warehouse].self) { (source: AnyObject) -> [Warehouse] in
                return Decoders.decode(clazz: [Warehouse].self, source: source)
            }
			// Decoder for Warehouse
            Decoders.addDecoder(clazz: Warehouse.self) { (source: AnyObject) -> Warehouse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Warehouse()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.client = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["client"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.street1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street1"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street2"])
                instance.street3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street3"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.locationBarcodePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationBarcodePrefix"])
                instance.lpnPrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lpnPrefix"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [WarehouseDocument]
            Decoders.addDecoder(clazz: [WarehouseDocument].self) { (source: AnyObject) -> [WarehouseDocument] in
                return Decoders.decode(clazz: [WarehouseDocument].self, source: source)
            }
			// Decoder for WarehouseDocument
            Decoders.addDecoder(clazz: WarehouseDocument.self) { (source: AnyObject) -> WarehouseDocument in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WarehouseDocument()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.documentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentType"])
                instance.clientId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["clientId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [WarehouseDocumentType]
            Decoders.addDecoder(clazz: [WarehouseDocumentType].self) { (source: AnyObject) -> [WarehouseDocumentType] in
                return Decoders.decode(clazz: [WarehouseDocumentType].self, source: source)
            }
			// Decoder for WarehouseDocumentType
            Decoders.addDecoder(clazz: WarehouseDocumentType.self) { (source: AnyObject) -> WarehouseDocumentType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WarehouseDocumentType()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [Work]
            Decoders.addDecoder(clazz: [Work].self) { (source: AnyObject) -> [Work] in
                return Decoders.decode(clazz: [Work].self, source: source)
            }
			// Decoder for Work
            Decoders.addDecoder(clazz: Work.self) { (source: AnyObject) -> Work in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Work()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.sourceWarehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sourceWarehouseId"])
                instance.sourceBuildingId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["sourceBuildingId"])
                instance.sourceLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceLocation"])
                instance.destinationWarehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["destinationWarehouseId"])
                instance.destinationBuildingId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["destinationBuildingId"])
                instance.destinationLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationLocation"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.priorityCode = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["priorityCode"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.userId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["userId"])
                instance.lobId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lobId"])
                instance.workBatchId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["workBatchId"])
                return instance
            }
			

			// Decoder for [WorkBatch]
            Decoders.addDecoder(clazz: [WorkBatch].self) { (source: AnyObject) -> [WorkBatch] in
                return Decoders.decode(clazz: [WorkBatch].self, source: source)
            }
			// Decoder for WorkBatch
            Decoders.addDecoder(clazz: WorkBatch.self) { (source: AnyObject) -> WorkBatch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WorkBatch()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			

			// Decoder for [Zone]
            Decoders.addDecoder(clazz: [Zone].self) { (source: AnyObject) -> [Zone] in
                return Decoders.decode(clazz: [Zone].self, source: source)
            }
			// Decoder for Zone
            Decoders.addDecoder(clazz: Zone.self) { (source: AnyObject) -> Zone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Zone()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.warehouseId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["warehouseId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.isClimateControlled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isClimateControlled"])
                instance.isFoodGrade = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isFoodGrade"])
                instance.isSecure = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isSecure"])
                instance.isFrozen = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isFrozen"])
                instance.isRefrigerated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isRefrigerated"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                return instance
            }
			
        }
    }
}
