//
// AsnAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AsnAPI: APIBase {
    /**
     
     Create an asn
     
     - parameter body: (body) Asn to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAsn(body body: Asn, completion: ((data: Asn?, error: ErrorType?) -> Void)) {
        addAsnWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an asn
     
     - POST /v1.0/asn
     - Inserts a new asn using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "confTo" : "aeiou",
  "shipToAddress" : "aeiou",
  "vendorId" : 123,
  "corporateCity" : "aeiou",
  "type" : "aeiou",
  "corporateName" : "aeiou",
  "corporateStreet2" : "aeiou",
  "lineItems" : [ {
    "sampleTo" : "aeiou",
    "budgetCode" : "aeiou",
    "interimFact" : 1.3579000000000001069366817318950779736042022705078125,
    "legacyPoNo" : "aeiou",
    "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
    "vendorId" : 123,
    "oddQuantity" : 123,
    "orderQuantity" : 123,
    "voidDate" : "2000-01-23T04:56:07.000+0000",
    "revDate" : "aeiou",
    "unitsPerCase" : 123,
    "lineNo" : 123,
    "poNo" : "aeiou",
    "unitCode" : "aeiou",
    "id" : 123,
    "sku" : "aeiou",
    "pricingPer" : "aeiou",
    "receivedDate" : "2000-01-23T04:56:07.000+0000",
    "mlCost" : 1.3579000000000001069366817318950779736042022705078125,
    "lobId" : 123,
    "height" : 1.3579000000000001069366817318950779736042022705078125,
    "chargeFreight" : "aeiou",
    "accountingCode" : "aeiou",
    "taxExempt" : "aeiou",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "artBack" : "aeiou",
    "lastAct" : "2000-01-23T04:56:07.000+0000",
    "capitalize" : "aeiou",
    "warehouseId" : 123,
    "maxUnders" : 123,
    "interimQuantity" : 123,
    "receivedQuantity" : 123,
    "receiptNo" : 123,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+0000",
    "asnLine" : 123,
    "orderDate" : "2000-01-23T04:56:07.000+0000",
    "factCost" : 1.3579000000000001069366817318950779736042022705078125,
    "endQuantity" : 123,
    "maxFreight" : 1.3579000000000001069366817318950779736042022705078125,
    "norcs" : "aeiou",
    "mlVendor" : 123,
    "origin" : "aeiou",
    "endFact" : 1.3579000000000001069366817318950779736042022705078125,
    "enteredBy" : "aeiou",
    "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
    "distDate" : "2000-01-23T04:56:07.000+0000",
    "endVal" : 1.3579000000000001069366817318950779736042022705078125,
    "wrapCode" : "aeiou",
    "sfpComplete" : "aeiou",
    "bsVendor" : 123,
    "receivedBy" : "aeiou",
    "unitsPerWrap" : 123,
    "cost" : 1.3579000000000001069366817318950779736042022705078125,
    "dockTime" : "2000-01-23T04:56:07.000+0000",
    "interimVal" : 1.3579000000000001069366817318950779736042022705078125,
    "sell" : 1.3579000000000001069366817318950779736042022705078125,
    "length" : 1.3579000000000001069366817318950779736042022705078125,
    "maxOvers" : 123,
    "impressions" : 123,
    "sample" : 123,
    "fromProd" : 123,
    "paidFull" : "aeiou",
    "prodLot" : "aeiou",
    "width" : 1.3579000000000001069366817318950779736042022705078125,
    "receivedSfp" : 123,
    "accrual" : "aeiou",
    "freightCost" : 1.3579000000000001069366817318950779736042022705078125,
    "maxOther" : 1.3579000000000001069366817318950779736042022705078125,
    "freezeAction" : "aeiou"
  } ],
  "shipToCity" : "aeiou",
  "corporateStreet1" : "aeiou",
  "projectNo" : 123,
  "poNo" : "aeiou",
  "terms" : "aeiou",
  "billingAttention" : "aeiou",
  "requestBy" : "aeiou",
  "id" : 123,
  "billingName" : "aeiou",
  "corporateZipCode" : "aeiou",
  "shipToState" : "aeiou",
  "usedBy" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123,
  "shipToStreet2" : "aeiou",
  "shipToPhone" : "aeiou",
  "accountCode" : "aeiou",
  "shipToZipCode" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "billingZipCode" : "aeiou",
  "billingStreet2" : "aeiou",
  "billingState" : "aeiou",
  "billingStreet1" : "aeiou",
  "shipToStreet1" : "aeiou",
  "buyer" : 123,
  "printed" : "aeiou",
  "corporateAttention" : "aeiou",
  "carrier" : 123,
  "warehouseId" : 123,
  "fob" : "aeiou",
  "shipToName" : "aeiou",
  "corporateState" : "aeiou",
  "orderDate" : "2000-01-23T04:56:07.000+0000",
  "billingCity" : "aeiou",
  "billingPhone" : "aeiou",
  "remarks" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) Asn to be inserted. 

     - returns: RequestBuilder<Asn> 
     */
    public class func addAsnWithRequestBuilder(body body: Asn) -> RequestBuilder<Asn> {
        let path = "/v1.0/asn"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Asn>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an asn
     
     - parameter asnId: (path) Id of the asn to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAsn(asnId asnId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteAsnWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an asn
     
     - DELETE /v1.0/asn/{asnId}
     - Deletes the asn identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAsnWithRequestBuilder(asnId asnId: Int) -> RequestBuilder<Void> {
        var path = "/v1.0/asn/{asnId}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search asns by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAsnByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Asn]?, error: ErrorType?) -> Void)) {
        getAsnByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search asns by filter
     
     - GET /v1.0/asn/search
     - Returns the list of asns that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "confTo" : "aeiou",
  "shipToAddress" : "aeiou",
  "vendorId" : 123,
  "corporateCity" : "aeiou",
  "type" : "aeiou",
  "corporateName" : "aeiou",
  "corporateStreet2" : "aeiou",
  "lineItems" : [ {
    "sampleTo" : "aeiou",
    "budgetCode" : "aeiou",
    "interimFact" : 1.3579000000000001069366817318950779736042022705078125,
    "legacyPoNo" : "aeiou",
    "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
    "vendorId" : 123,
    "oddQuantity" : 123,
    "orderQuantity" : 123,
    "voidDate" : "2000-01-23T04:56:07.000+0000",
    "revDate" : "aeiou",
    "unitsPerCase" : 123,
    "lineNo" : 123,
    "poNo" : "aeiou",
    "unitCode" : "aeiou",
    "id" : 123,
    "sku" : "aeiou",
    "pricingPer" : "aeiou",
    "receivedDate" : "2000-01-23T04:56:07.000+0000",
    "mlCost" : 1.3579000000000001069366817318950779736042022705078125,
    "lobId" : 123,
    "height" : 1.3579000000000001069366817318950779736042022705078125,
    "chargeFreight" : "aeiou",
    "accountingCode" : "aeiou",
    "taxExempt" : "aeiou",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "artBack" : "aeiou",
    "lastAct" : "2000-01-23T04:56:07.000+0000",
    "capitalize" : "aeiou",
    "warehouseId" : 123,
    "maxUnders" : 123,
    "interimQuantity" : 123,
    "receivedQuantity" : 123,
    "receiptNo" : 123,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+0000",
    "asnLine" : 123,
    "orderDate" : "2000-01-23T04:56:07.000+0000",
    "factCost" : 1.3579000000000001069366817318950779736042022705078125,
    "endQuantity" : 123,
    "maxFreight" : 1.3579000000000001069366817318950779736042022705078125,
    "norcs" : "aeiou",
    "mlVendor" : 123,
    "origin" : "aeiou",
    "endFact" : 1.3579000000000001069366817318950779736042022705078125,
    "enteredBy" : "aeiou",
    "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
    "distDate" : "2000-01-23T04:56:07.000+0000",
    "endVal" : 1.3579000000000001069366817318950779736042022705078125,
    "wrapCode" : "aeiou",
    "sfpComplete" : "aeiou",
    "bsVendor" : 123,
    "receivedBy" : "aeiou",
    "unitsPerWrap" : 123,
    "cost" : 1.3579000000000001069366817318950779736042022705078125,
    "dockTime" : "2000-01-23T04:56:07.000+0000",
    "interimVal" : 1.3579000000000001069366817318950779736042022705078125,
    "sell" : 1.3579000000000001069366817318950779736042022705078125,
    "length" : 1.3579000000000001069366817318950779736042022705078125,
    "maxOvers" : 123,
    "impressions" : 123,
    "sample" : 123,
    "fromProd" : 123,
    "paidFull" : "aeiou",
    "prodLot" : "aeiou",
    "width" : 1.3579000000000001069366817318950779736042022705078125,
    "receivedSfp" : 123,
    "accrual" : "aeiou",
    "freightCost" : 1.3579000000000001069366817318950779736042022705078125,
    "maxOther" : 1.3579000000000001069366817318950779736042022705078125,
    "freezeAction" : "aeiou"
  } ],
  "shipToCity" : "aeiou",
  "corporateStreet1" : "aeiou",
  "projectNo" : 123,
  "poNo" : "aeiou",
  "terms" : "aeiou",
  "billingAttention" : "aeiou",
  "requestBy" : "aeiou",
  "id" : 123,
  "billingName" : "aeiou",
  "corporateZipCode" : "aeiou",
  "shipToState" : "aeiou",
  "usedBy" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123,
  "shipToStreet2" : "aeiou",
  "shipToPhone" : "aeiou",
  "accountCode" : "aeiou",
  "shipToZipCode" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "billingZipCode" : "aeiou",
  "billingStreet2" : "aeiou",
  "billingState" : "aeiou",
  "billingStreet1" : "aeiou",
  "shipToStreet1" : "aeiou",
  "buyer" : 123,
  "printed" : "aeiou",
  "corporateAttention" : "aeiou",
  "carrier" : 123,
  "warehouseId" : 123,
  "fob" : "aeiou",
  "shipToName" : "aeiou",
  "corporateState" : "aeiou",
  "orderDate" : "2000-01-23T04:56:07.000+0000",
  "billingCity" : "aeiou",
  "billingPhone" : "aeiou",
  "remarks" : "aeiou",
  "status" : "aeiou"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Asn]> 
     */
    public class func getAsnByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Asn]> {
        let path = "/v1.0/asn/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Asn]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an asn by id
     
     - parameter asnId: (path) Id of the asn to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAsnById(asnId asnId: Int, completion: ((data: Asn?, error: ErrorType?) -> Void)) {
        getAsnByIdWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an asn by id
     
     - GET /v1.0/asn/{asnId}
     - Returns the asn identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "confTo" : "aeiou",
  "shipToAddress" : "aeiou",
  "vendorId" : 123,
  "corporateCity" : "aeiou",
  "type" : "aeiou",
  "corporateName" : "aeiou",
  "corporateStreet2" : "aeiou",
  "lineItems" : [ {
    "sampleTo" : "aeiou",
    "budgetCode" : "aeiou",
    "interimFact" : 1.3579000000000001069366817318950779736042022705078125,
    "legacyPoNo" : "aeiou",
    "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
    "vendorId" : 123,
    "oddQuantity" : 123,
    "orderQuantity" : 123,
    "voidDate" : "2000-01-23T04:56:07.000+0000",
    "revDate" : "aeiou",
    "unitsPerCase" : 123,
    "lineNo" : 123,
    "poNo" : "aeiou",
    "unitCode" : "aeiou",
    "id" : 123,
    "sku" : "aeiou",
    "pricingPer" : "aeiou",
    "receivedDate" : "2000-01-23T04:56:07.000+0000",
    "mlCost" : 1.3579000000000001069366817318950779736042022705078125,
    "lobId" : 123,
    "height" : 1.3579000000000001069366817318950779736042022705078125,
    "chargeFreight" : "aeiou",
    "accountingCode" : "aeiou",
    "taxExempt" : "aeiou",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "artBack" : "aeiou",
    "lastAct" : "2000-01-23T04:56:07.000+0000",
    "capitalize" : "aeiou",
    "warehouseId" : 123,
    "maxUnders" : 123,
    "interimQuantity" : 123,
    "receivedQuantity" : 123,
    "receiptNo" : 123,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+0000",
    "asnLine" : 123,
    "orderDate" : "2000-01-23T04:56:07.000+0000",
    "factCost" : 1.3579000000000001069366817318950779736042022705078125,
    "endQuantity" : 123,
    "maxFreight" : 1.3579000000000001069366817318950779736042022705078125,
    "norcs" : "aeiou",
    "mlVendor" : 123,
    "origin" : "aeiou",
    "endFact" : 1.3579000000000001069366817318950779736042022705078125,
    "enteredBy" : "aeiou",
    "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
    "distDate" : "2000-01-23T04:56:07.000+0000",
    "endVal" : 1.3579000000000001069366817318950779736042022705078125,
    "wrapCode" : "aeiou",
    "sfpComplete" : "aeiou",
    "bsVendor" : 123,
    "receivedBy" : "aeiou",
    "unitsPerWrap" : 123,
    "cost" : 1.3579000000000001069366817318950779736042022705078125,
    "dockTime" : "2000-01-23T04:56:07.000+0000",
    "interimVal" : 1.3579000000000001069366817318950779736042022705078125,
    "sell" : 1.3579000000000001069366817318950779736042022705078125,
    "length" : 1.3579000000000001069366817318950779736042022705078125,
    "maxOvers" : 123,
    "impressions" : 123,
    "sample" : 123,
    "fromProd" : 123,
    "paidFull" : "aeiou",
    "prodLot" : "aeiou",
    "width" : 1.3579000000000001069366817318950779736042022705078125,
    "receivedSfp" : 123,
    "accrual" : "aeiou",
    "freightCost" : 1.3579000000000001069366817318950779736042022705078125,
    "maxOther" : 1.3579000000000001069366817318950779736042022705078125,
    "freezeAction" : "aeiou"
  } ],
  "shipToCity" : "aeiou",
  "corporateStreet1" : "aeiou",
  "projectNo" : 123,
  "poNo" : "aeiou",
  "terms" : "aeiou",
  "billingAttention" : "aeiou",
  "requestBy" : "aeiou",
  "id" : 123,
  "billingName" : "aeiou",
  "corporateZipCode" : "aeiou",
  "shipToState" : "aeiou",
  "usedBy" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123,
  "shipToStreet2" : "aeiou",
  "shipToPhone" : "aeiou",
  "accountCode" : "aeiou",
  "shipToZipCode" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "billingZipCode" : "aeiou",
  "billingStreet2" : "aeiou",
  "billingState" : "aeiou",
  "billingStreet1" : "aeiou",
  "shipToStreet1" : "aeiou",
  "buyer" : 123,
  "printed" : "aeiou",
  "corporateAttention" : "aeiou",
  "carrier" : 123,
  "warehouseId" : 123,
  "fob" : "aeiou",
  "shipToName" : "aeiou",
  "corporateState" : "aeiou",
  "orderDate" : "2000-01-23T04:56:07.000+0000",
  "billingCity" : "aeiou",
  "billingPhone" : "aeiou",
  "remarks" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter asnId: (path) Id of the asn to be returned. 

     - returns: RequestBuilder<Asn> 
     */
    public class func getAsnByIdWithRequestBuilder(asnId asnId: Int) -> RequestBuilder<Asn> {
        var path = "/v1.0/asn/{asnId}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Asn>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an asn
     
     - parameter body: (body) Asn to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateAsn(body body: Asn, completion: ((error: ErrorType?) -> Void)) {
        updateAsnWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an asn
     
     - PUT /v1.0/asn
     - Updates an existing asn using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Asn to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateAsnWithRequestBuilder(body body: Asn) -> RequestBuilder<Void> {
        let path = "/v1.0/asn"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
