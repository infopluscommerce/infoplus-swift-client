//
// AsnAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AsnAPI: APIBase {
    /**
     Create an asn
     
     - parameter body: (body) Asn to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAsn(body body: Asn, completion: ((data: Asn?, error: ErrorType?) -> Void)) {
        addAsnWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an asn
     - POST /v3.0/asn
     - Inserts a new asn using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "confTo" : "confTo",
  "shipToAddress" : "shipToAddress",
  "customFields" : {
    "key" : "{}"
  },
  "vendorId" : 1,
  "corporateCity" : "corporateCity",
  "type" : "type",
  "corporateName" : "corporateName",
  "corporateStreet2" : "corporateStreet2",
  "lineItems" : [ {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  }, {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  } ],
  "shipToCity" : "shipToCity",
  "corporateStreet1" : "corporateStreet1",
  "projectNo" : 7,
  "poNo" : "poNo",
  "terms" : "terms",
  "billingAttention" : "billingAttention",
  "requestBy" : "requestBy",
  "id" : 0,
  "billingName" : "billingName",
  "corporateZipCode" : "corporateZipCode",
  "shipToState" : "shipToState",
  "usedBy" : "usedBy",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6,
  "shipToStreet2" : "shipToStreet2",
  "shipToPhone" : "shipToPhone",
  "accountCode" : "accountCode",
  "shipToZipCode" : "shipToZipCode",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billingZipCode" : "billingZipCode",
  "billingStreet2" : "billingStreet2",
  "billingState" : "billingState",
  "transferOrderId" : 3.258856561904760695824734284542500972747802734375,
  "billingStreet1" : "billingStreet1",
  "shipToStreet1" : "shipToStreet1",
  "buyer" : 5,
  "printed" : "printed",
  "corporateAttention" : "corporateAttention",
  "carrier" : 2,
  "warehouseId" : 5,
  "fob" : "fob",
  "shipToName" : "shipToName",
  "corporateState" : "corporateState",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "billingCity" : "billingCity",
  "billingPhone" : "billingPhone",
  "remarks" : "remarks",
  "status" : "status"
}}]
     
     - parameter body: (body) Asn to be inserted. 

     - returns: RequestBuilder<Asn> 
     */
    public class func addAsnWithRequestBuilder(body body: Asn) -> RequestBuilder<Asn> {
        let path = "/v3.0/asn"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Asn>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an asn
     
     - parameter asnId: (path) Id of the asn to add an audit to 
     - parameter asnAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAsnAudit(asnId asnId: Int32, asnAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addAsnAuditWithRequestBuilder(asnId: asnId, asnAudit: asnAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an asn
     - PUT /v3.0/asn/{asnId}/audit/{asnAudit}
     - Adds an audit to an existing asn.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to add an audit to 
     - parameter asnAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addAsnAuditWithRequestBuilder(asnId asnId: Int32, asnAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/audit/{asnAudit}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{asnAudit}", withString: "\(asnAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an asn
     
     - parameter asnId: (path) Id of the asn to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAsnFile(asnId asnId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addAsnFileWithRequestBuilder(asnId: asnId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an asn
     - POST /v3.0/asn/{asnId}/file/{fileName}
     - Adds a file to an existing asn.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addAsnFileWithRequestBuilder(asnId asnId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an asn by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter asnId: (path) Id of the asn to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAsnFileByURL(body body: RecordFile, asnId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addAsnFileByURLWithRequestBuilder(body: body, asnId: asnId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an asn by URL.
     - POST /v3.0/asn/{asnId}/file
     - Adds a file to an existing asn by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter asnId: (path) Id of the asn to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addAsnFileByURLWithRequestBuilder(body body: RecordFile, asnId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/file"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an asn.
     
     - parameter asnId: (path) Id of the asn to add a tag to 
     - parameter asnTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAsnTag(asnId asnId: Int32, asnTag: String, completion: ((error: ErrorType?) -> Void)) {
        addAsnTagWithRequestBuilder(asnId: asnId, asnTag: asnTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an asn.
     - PUT /v3.0/asn/{asnId}/tag/{asnTag}
     - Adds a tag to an existing asn.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to add a tag to 
     - parameter asnTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addAsnTagWithRequestBuilder(asnId asnId: Int32, asnTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/tag/{asnTag}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{asnTag}", withString: "\(asnTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an asn
     
     - parameter asnId: (path) Id of the asn to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAsn(asnId asnId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteAsnWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an asn
     - DELETE /v3.0/asn/{asnId}
     - Deletes the asn identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAsnWithRequestBuilder(asnId asnId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an asn.
     
     - parameter asnId: (path) Id of the asn to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAsnFile(asnId asnId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteAsnFileWithRequestBuilder(asnId: asnId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an asn.
     - DELETE /v3.0/asn/{asnId}/file/{fileId}
     - Deletes an existing asn file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAsnFileWithRequestBuilder(asnId asnId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an asn.
     
     - parameter asnId: (path) Id of the asn to remove tag from 
     - parameter asnTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAsnTag(asnId asnId: Int32, asnTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteAsnTagWithRequestBuilder(asnId: asnId, asnTag: asnTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an asn.
     - DELETE /v3.0/asn/{asnId}/tag/{asnTag}
     - Deletes an existing asn tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to remove tag from 
     - parameter asnTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAsnTagWithRequestBuilder(asnId asnId: Int32, asnTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/tag/{asnTag}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{asnTag}", withString: "\(asnTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search asns by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAsnByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Asn]?, error: ErrorType?) -> Void)) {
        getAsnByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search asns by filter
     - GET /v3.0/asn/search
     - Returns the list of asns that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "confTo" : "confTo",
  "shipToAddress" : "shipToAddress",
  "customFields" : {
    "key" : "{}"
  },
  "vendorId" : 1,
  "corporateCity" : "corporateCity",
  "type" : "type",
  "corporateName" : "corporateName",
  "corporateStreet2" : "corporateStreet2",
  "lineItems" : [ {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  }, {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  } ],
  "shipToCity" : "shipToCity",
  "corporateStreet1" : "corporateStreet1",
  "projectNo" : 7,
  "poNo" : "poNo",
  "terms" : "terms",
  "billingAttention" : "billingAttention",
  "requestBy" : "requestBy",
  "id" : 0,
  "billingName" : "billingName",
  "corporateZipCode" : "corporateZipCode",
  "shipToState" : "shipToState",
  "usedBy" : "usedBy",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6,
  "shipToStreet2" : "shipToStreet2",
  "shipToPhone" : "shipToPhone",
  "accountCode" : "accountCode",
  "shipToZipCode" : "shipToZipCode",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billingZipCode" : "billingZipCode",
  "billingStreet2" : "billingStreet2",
  "billingState" : "billingState",
  "transferOrderId" : 3.258856561904760695824734284542500972747802734375,
  "billingStreet1" : "billingStreet1",
  "shipToStreet1" : "shipToStreet1",
  "buyer" : 5,
  "printed" : "printed",
  "corporateAttention" : "corporateAttention",
  "carrier" : 2,
  "warehouseId" : 5,
  "fob" : "fob",
  "shipToName" : "shipToName",
  "corporateState" : "corporateState",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "billingCity" : "billingCity",
  "billingPhone" : "billingPhone",
  "remarks" : "remarks",
  "status" : "status"
}, {
  "confTo" : "confTo",
  "shipToAddress" : "shipToAddress",
  "customFields" : {
    "key" : "{}"
  },
  "vendorId" : 1,
  "corporateCity" : "corporateCity",
  "type" : "type",
  "corporateName" : "corporateName",
  "corporateStreet2" : "corporateStreet2",
  "lineItems" : [ {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  }, {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  } ],
  "shipToCity" : "shipToCity",
  "corporateStreet1" : "corporateStreet1",
  "projectNo" : 7,
  "poNo" : "poNo",
  "terms" : "terms",
  "billingAttention" : "billingAttention",
  "requestBy" : "requestBy",
  "id" : 0,
  "billingName" : "billingName",
  "corporateZipCode" : "corporateZipCode",
  "shipToState" : "shipToState",
  "usedBy" : "usedBy",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6,
  "shipToStreet2" : "shipToStreet2",
  "shipToPhone" : "shipToPhone",
  "accountCode" : "accountCode",
  "shipToZipCode" : "shipToZipCode",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billingZipCode" : "billingZipCode",
  "billingStreet2" : "billingStreet2",
  "billingState" : "billingState",
  "transferOrderId" : 3.258856561904760695824734284542500972747802734375,
  "billingStreet1" : "billingStreet1",
  "shipToStreet1" : "shipToStreet1",
  "buyer" : 5,
  "printed" : "printed",
  "corporateAttention" : "corporateAttention",
  "carrier" : 2,
  "warehouseId" : 5,
  "fob" : "fob",
  "shipToName" : "shipToName",
  "corporateState" : "corporateState",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "billingCity" : "billingCity",
  "billingPhone" : "billingPhone",
  "remarks" : "remarks",
  "status" : "status"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Asn]> 
     */
    public class func getAsnByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Asn]> {
        let path = "/v3.0/asn/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Asn]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an asn by id
     
     - parameter asnId: (path) Id of the asn to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAsnById(asnId asnId: Int32, completion: ((data: Asn?, error: ErrorType?) -> Void)) {
        getAsnByIdWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an asn by id
     - GET /v3.0/asn/{asnId}
     - Returns the asn identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "confTo" : "confTo",
  "shipToAddress" : "shipToAddress",
  "customFields" : {
    "key" : "{}"
  },
  "vendorId" : 1,
  "corporateCity" : "corporateCity",
  "type" : "type",
  "corporateName" : "corporateName",
  "corporateStreet2" : "corporateStreet2",
  "lineItems" : [ {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  }, {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  } ],
  "shipToCity" : "shipToCity",
  "corporateStreet1" : "corporateStreet1",
  "projectNo" : 7,
  "poNo" : "poNo",
  "terms" : "terms",
  "billingAttention" : "billingAttention",
  "requestBy" : "requestBy",
  "id" : 0,
  "billingName" : "billingName",
  "corporateZipCode" : "corporateZipCode",
  "shipToState" : "shipToState",
  "usedBy" : "usedBy",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6,
  "shipToStreet2" : "shipToStreet2",
  "shipToPhone" : "shipToPhone",
  "accountCode" : "accountCode",
  "shipToZipCode" : "shipToZipCode",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billingZipCode" : "billingZipCode",
  "billingStreet2" : "billingStreet2",
  "billingState" : "billingState",
  "transferOrderId" : 3.258856561904760695824734284542500972747802734375,
  "billingStreet1" : "billingStreet1",
  "shipToStreet1" : "shipToStreet1",
  "buyer" : 5,
  "printed" : "printed",
  "corporateAttention" : "corporateAttention",
  "carrier" : 2,
  "warehouseId" : 5,
  "fob" : "fob",
  "shipToName" : "shipToName",
  "corporateState" : "corporateState",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "billingCity" : "billingCity",
  "billingPhone" : "billingPhone",
  "remarks" : "remarks",
  "status" : "status"
}}]
     
     - parameter asnId: (path) Id of the asn to be returned. 

     - returns: RequestBuilder<Asn> 
     */
    public class func getAsnByIdWithRequestBuilder(asnId asnId: Int32) -> RequestBuilder<Asn> {
        var path = "/v3.0/asn/{asnId}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Asn>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an asn.
     
     - parameter asnId: (path) Id of the asn to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAsnFiles(asnId asnId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getAsnFilesWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an asn.
     - GET /v3.0/asn/{asnId}/file
     - Get all existing asn files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getAsnFilesWithRequestBuilder(asnId asnId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/file"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an asn.
     
     - parameter asnId: (path) Id of the asn to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAsnTags(asnId asnId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getAsnTagsWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an asn.
     - GET /v3.0/asn/{asnId}/tag
     - Get all existing asn tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter asnId: (path) Id of the asn to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getAsnTagsWithRequestBuilder(asnId asnId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/asn/{asnId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an asn by id
     
     - parameter asnId: (path) Id of the asn to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateAsnById(asnId asnId: Int32, completion: ((data: Asn?, error: ErrorType?) -> Void)) {
        getDuplicateAsnByIdWithRequestBuilder(asnId: asnId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an asn by id
     - GET /v3.0/asn/duplicate/{asnId}
     - Returns a duplicated asn identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "confTo" : "confTo",
  "shipToAddress" : "shipToAddress",
  "customFields" : {
    "key" : "{}"
  },
  "vendorId" : 1,
  "corporateCity" : "corporateCity",
  "type" : "type",
  "corporateName" : "corporateName",
  "corporateStreet2" : "corporateStreet2",
  "lineItems" : [ {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  }, {
    "sampleTo" : "sampleTo",
    "budgetCode" : "budgetCode",
    "interimFact" : 5.94489560761401580890606055618263781070709228515625,
    "legacyPoNo" : "legacyPoNo",
    "weightPerWrap" : 6.70401929795003592715829654480330646038055419921875,
    "vendorId" : 3,
    "sellPrice" : 7.4577447736837658709418974467553198337554931640625,
    "oddQuantity" : 8,
    "orderQuantity" : 1,
    "voidDate" : "2000-01-23T04:56:07.000+00:00",
    "revDate" : "revDate",
    "unitsPerCase" : 0,
    "lineNo" : 7,
    "unitsPerInnerPack" : 6,
    "unitCode" : "unitCode",
    "id" : 9,
    "sku" : "sku",
    "unitsPerPallet" : 4,
    "pricingPer" : "pricingPer",
    "receivedDate" : "2000-01-23T04:56:07.000+00:00",
    "mlCost" : 1.231513536777255612975068288506008684635162353515625,
    "lobId" : 2,
    "height" : 7.7403518187411730622216055053286254405975341796875,
    "chargeFreight" : "chargeFreight",
    "accountingCode" : "accountingCode",
    "taxExempt" : "taxExempt",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "upc" : "upc",
    "artBack" : "artBack",
    "lastAct" : "2000-01-23T04:56:07.000+00:00",
    "capitalize" : "capitalize",
    "warehouseId" : 4,
    "maxUnders" : 9,
    "interimQuantity" : 6,
    "receivedQuantity" : 6,
    "receiptNo" : 0,
    "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
    "poNoId" : 3,
    "dockDate" : "2000-01-23T04:56:07.000+00:00",
    "asnLine" : 5,
    "orderDate" : "2000-01-23T04:56:07.000+00:00",
    "factCost" : 7.3862819483858839220147274318151175975799560546875,
    "endQuantity" : 6,
    "maxFreight" : 1.173074250955943309548956676735542714595794677734375,
    "norcs" : "norcs",
    "mlVendor" : 7,
    "customFields" : {
      "key" : "{}"
    },
    "origin" : "origin",
    "endFact" : 2.884162126668780246063761296682059764862060546875,
    "fullDescription" : "fullDescription",
    "enteredBy" : "enteredBy",
    "caseWeight" : 8.9695787981969115065794539987109601497650146484375,
    "distDate" : "2000-01-23T04:56:07.000+00:00",
    "endVal" : 1.2846590061165319429647979632136411964893341064453125,
    "wrapCode" : "wrapCode",
    "sfpComplete" : "sfpComplete",
    "bsVendor" : 3,
    "expirationDate" : "2000-01-23T04:56:07.000+00:00",
    "receivedBy" : "receivedBy",
    "unitsPerWrap" : 1,
    "cost" : 6.8468526983526398765889098285697400569915771484375,
    "interimVal" : 6.87805222012787620400331434211693704128265380859375,
    "length" : 3.05761002410493443193217899533919990062713623046875,
    "maxOvers" : 9,
    "productIdTag" : "productIdTag",
    "impressions" : 7,
    "sample" : 5,
    "fromProd" : 3,
    "vendorSKU" : "vendorSKU",
    "paidFull" : "paidFull",
    "prodLot" : "prodLot",
    "width" : 3.02057969929162428712743349024094641208648681640625,
    "receivedSfp" : 6,
    "accrual" : "accrual",
    "freightCost" : 9.0183481860707832566959041287191212177276611328125,
    "maxOther" : 4.9652184929849543237878606305457651615142822265625,
    "freezeAction" : "freezeAction"
  } ],
  "shipToCity" : "shipToCity",
  "corporateStreet1" : "corporateStreet1",
  "projectNo" : 7,
  "poNo" : "poNo",
  "terms" : "terms",
  "billingAttention" : "billingAttention",
  "requestBy" : "requestBy",
  "id" : 0,
  "billingName" : "billingName",
  "corporateZipCode" : "corporateZipCode",
  "shipToState" : "shipToState",
  "usedBy" : "usedBy",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6,
  "shipToStreet2" : "shipToStreet2",
  "shipToPhone" : "shipToPhone",
  "accountCode" : "accountCode",
  "shipToZipCode" : "shipToZipCode",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billingZipCode" : "billingZipCode",
  "billingStreet2" : "billingStreet2",
  "billingState" : "billingState",
  "transferOrderId" : 3.258856561904760695824734284542500972747802734375,
  "billingStreet1" : "billingStreet1",
  "shipToStreet1" : "shipToStreet1",
  "buyer" : 5,
  "printed" : "printed",
  "corporateAttention" : "corporateAttention",
  "carrier" : 2,
  "warehouseId" : 5,
  "fob" : "fob",
  "shipToName" : "shipToName",
  "corporateState" : "corporateState",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "billingCity" : "billingCity",
  "billingPhone" : "billingPhone",
  "remarks" : "remarks",
  "status" : "status"
}}]
     
     - parameter asnId: (path) Id of the asn to be duplicated. 

     - returns: RequestBuilder<Asn> 
     */
    public class func getDuplicateAsnByIdWithRequestBuilder(asnId asnId: Int32) -> RequestBuilder<Asn> {
        var path = "/v3.0/asn/duplicate/{asnId}"
        path = path.stringByReplacingOccurrencesOfString("{asnId}", withString: "\(asnId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Asn>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an asn
     
     - parameter body: (body) Asn to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateAsn(body body: Asn, completion: ((error: ErrorType?) -> Void)) {
        updateAsnWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an asn
     - PUT /v3.0/asn
     - Updates an existing asn using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Asn to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateAsnWithRequestBuilder(body body: Asn) -> RequestBuilder<Void> {
        let path = "/v3.0/asn"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an asn custom fields
     
     - parameter body: (body) Asn to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateAsnCustomFields(body body: Asn, completion: ((error: ErrorType?) -> Void)) {
        updateAsnCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an asn custom fields
     - PUT /v3.0/asn/customFields
     - Updates an existing asn custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Asn to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateAsnCustomFieldsWithRequestBuilder(body body: Asn) -> RequestBuilder<Void> {
        let path = "/v3.0/asn/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
