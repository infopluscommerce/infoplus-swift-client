//
// FulfillmentPlanAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class FulfillmentPlanAPI: APIBase {
    /**
     Create a fulfillmentPlan
     
     - parameter body: (body) FulfillmentPlan to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentPlan(body body: FulfillmentPlan, completion: ((data: FulfillmentPlan?, error: ErrorType?) -> Void)) {
        addFulfillmentPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a fulfillmentPlan
     - POST /beta/fulfillmentPlan
     - Inserts a new fulfillmentPlan using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "pickListLayout" : "pickListLayout",
  "createPickWork" : false,
  "pickingRule" : "pickingRule",
  "createOrderInvoice" : "createOrderInvoice",
  "pickSummaryLayout" : "pickSummaryLayout",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "pickListSort",
  "description" : "description",
  "createPickSummary" : false,
  "pickListLocationSort" : "pickListLocationSort",
  "sendToExternalShippingSystem" : false,
  "maxOrders" : 2,
  "batchSizeMax" : 7,
  "locationSmartFilterId" : 5,
  "maxSKUsPerBatch" : 2,
  "pickSummaryFormat" : "pickSummaryFormat",
  "cartonizationScriptId" : 7,
  "maxCartons" : 3,
  "cartonizeOrders" : false,
  "pickSortRule" : "pickSortRule",
  "isMassDistribution" : false,
  "pickBatchGroupId" : "pickBatchGroupId",
  "layoutRule" : "layoutRule",
  "autoShipOrders" : false,
  "id" : 0,
  "pickListFormat" : "pickListFormat",
  "pickListGroup" : "pickListGroup",
  "pickScanSchemeId" : 4,
  "externalShippingSystemId" : 1,
  "createPickList" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "createOrderAssemblyGuide" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createPackingSlip" : "createPackingSlip",
  "version" : "version",
  "batchSizeMin" : 9,
  "overrideOrderInvoiceTemplateId" : 1,
  "pickSummarySort" : "pickSummarySort",
  "lastRunTime" : "2000-01-23T04:56:07.000+00:00",
  "preGenerateParcelLabels" : false,
  "labelSort" : "labelSort",
  "warehouseId" : 6,
  "locationSort" : "locationSort",
  "name" : "name",
  "overridePackingSlipTemplateId" : 1,
  "priorityCode" : 1,
  "autoShipCasebreakCartons" : false,
  "orderSmartFilterId" : 5
}}]
     
     - parameter body: (body) FulfillmentPlan to be inserted. 

     - returns: RequestBuilder<FulfillmentPlan> 
     */
    public class func addFulfillmentPlanWithRequestBuilder(body body: FulfillmentPlan) -> RequestBuilder<FulfillmentPlan> {
        let path = "/beta/fulfillmentPlan"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a fulfillmentPlan
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add an audit to 
     - parameter fulfillmentPlanAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentPlanAudit(fulfillmentPlanId fulfillmentPlanId: Int32, fulfillmentPlanAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentPlanAuditWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId, fulfillmentPlanAudit: fulfillmentPlanAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a fulfillmentPlan
     - PUT /beta/fulfillmentPlan/{fulfillmentPlanId}/audit/{fulfillmentPlanAudit}
     - Adds an audit to an existing fulfillmentPlan.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add an audit to 
     - parameter fulfillmentPlanAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentPlanAuditWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32, fulfillmentPlanAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/audit/{fulfillmentPlanAudit}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanAudit}", withString: "\(fulfillmentPlanAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a fulfillmentPlan
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentPlanFile(fulfillmentPlanId fulfillmentPlanId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentPlanFileWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a fulfillmentPlan
     - POST /beta/fulfillmentPlan/{fulfillmentPlanId}/file/{fileName}
     - Adds a file to an existing fulfillmentPlan.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentPlanFileWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a fulfillmentPlan by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentPlanFileByURL(body body: RecordFile, fulfillmentPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentPlanFileByURLWithRequestBuilder(body: body, fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a fulfillmentPlan by URL.
     - POST /beta/fulfillmentPlan/{fulfillmentPlanId}/file
     - Adds a file to an existing fulfillmentPlan by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentPlanFileByURLWithRequestBuilder(body body: RecordFile, fulfillmentPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a fulfillmentPlan.
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add a tag to 
     - parameter fulfillmentPlanTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentPlanTag(fulfillmentPlanId fulfillmentPlanId: Int32, fulfillmentPlanTag: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentPlanTagWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId, fulfillmentPlanTag: fulfillmentPlanTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a fulfillmentPlan.
     - PUT /beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}
     - Adds a tag to an existing fulfillmentPlan.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to add a tag to 
     - parameter fulfillmentPlanTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentPlanTagWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32, fulfillmentPlanTag: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanTag}", withString: "\(fulfillmentPlanTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a fulfillmentPlan
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFulfillmentPlan(fulfillmentPlanId fulfillmentPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteFulfillmentPlanWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a fulfillmentPlan
     - DELETE /beta/fulfillmentPlan/{fulfillmentPlanId}
     - Deletes the fulfillmentPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFulfillmentPlanWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a fulfillmentPlan.
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFulfillmentPlanFile(fulfillmentPlanId fulfillmentPlanId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteFulfillmentPlanFileWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a fulfillmentPlan.
     - DELETE /beta/fulfillmentPlan/{fulfillmentPlanId}/file/{fileId}
     - Deletes an existing fulfillmentPlan file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFulfillmentPlanFileWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a fulfillmentPlan.
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to remove tag from 
     - parameter fulfillmentPlanTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFulfillmentPlanTag(fulfillmentPlanId fulfillmentPlanId: Int32, fulfillmentPlanTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteFulfillmentPlanTagWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId, fulfillmentPlanTag: fulfillmentPlanTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a fulfillmentPlan.
     - DELETE /beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}
     - Deletes an existing fulfillmentPlan tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to remove tag from 
     - parameter fulfillmentPlanTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFulfillmentPlanTagWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32, fulfillmentPlanTag: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/tag/{fulfillmentPlanTag}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanTag}", withString: "\(fulfillmentPlanTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a fulfillmentPlan by id
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateFulfillmentPlanById(fulfillmentPlanId fulfillmentPlanId: Int32, completion: ((data: FulfillmentPlan?, error: ErrorType?) -> Void)) {
        getDuplicateFulfillmentPlanByIdWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a fulfillmentPlan by id
     - GET /beta/fulfillmentPlan/duplicate/{fulfillmentPlanId}
     - Returns a duplicated fulfillmentPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "pickListLayout" : "pickListLayout",
  "createPickWork" : false,
  "pickingRule" : "pickingRule",
  "createOrderInvoice" : "createOrderInvoice",
  "pickSummaryLayout" : "pickSummaryLayout",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "pickListSort",
  "description" : "description",
  "createPickSummary" : false,
  "pickListLocationSort" : "pickListLocationSort",
  "sendToExternalShippingSystem" : false,
  "maxOrders" : 2,
  "batchSizeMax" : 7,
  "locationSmartFilterId" : 5,
  "maxSKUsPerBatch" : 2,
  "pickSummaryFormat" : "pickSummaryFormat",
  "cartonizationScriptId" : 7,
  "maxCartons" : 3,
  "cartonizeOrders" : false,
  "pickSortRule" : "pickSortRule",
  "isMassDistribution" : false,
  "pickBatchGroupId" : "pickBatchGroupId",
  "layoutRule" : "layoutRule",
  "autoShipOrders" : false,
  "id" : 0,
  "pickListFormat" : "pickListFormat",
  "pickListGroup" : "pickListGroup",
  "pickScanSchemeId" : 4,
  "externalShippingSystemId" : 1,
  "createPickList" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "createOrderAssemblyGuide" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createPackingSlip" : "createPackingSlip",
  "version" : "version",
  "batchSizeMin" : 9,
  "overrideOrderInvoiceTemplateId" : 1,
  "pickSummarySort" : "pickSummarySort",
  "lastRunTime" : "2000-01-23T04:56:07.000+00:00",
  "preGenerateParcelLabels" : false,
  "labelSort" : "labelSort",
  "warehouseId" : 6,
  "locationSort" : "locationSort",
  "name" : "name",
  "overridePackingSlipTemplateId" : 1,
  "priorityCode" : 1,
  "autoShipCasebreakCartons" : false,
  "orderSmartFilterId" : 5
}}]
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be duplicated. 

     - returns: RequestBuilder<FulfillmentPlan> 
     */
    public class func getDuplicateFulfillmentPlanByIdWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32) -> RequestBuilder<FulfillmentPlan> {
        var path = "/beta/fulfillmentPlan/duplicate/{fulfillmentPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search fulfillmentPlans by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentPlanByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [FulfillmentPlan]?, error: ErrorType?) -> Void)) {
        getFulfillmentPlanByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search fulfillmentPlans by filter
     - GET /beta/fulfillmentPlan/search
     - Returns the list of fulfillmentPlans that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "pickListLayout" : "pickListLayout",
  "createPickWork" : false,
  "pickingRule" : "pickingRule",
  "createOrderInvoice" : "createOrderInvoice",
  "pickSummaryLayout" : "pickSummaryLayout",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "pickListSort",
  "description" : "description",
  "createPickSummary" : false,
  "pickListLocationSort" : "pickListLocationSort",
  "sendToExternalShippingSystem" : false,
  "maxOrders" : 2,
  "batchSizeMax" : 7,
  "locationSmartFilterId" : 5,
  "maxSKUsPerBatch" : 2,
  "pickSummaryFormat" : "pickSummaryFormat",
  "cartonizationScriptId" : 7,
  "maxCartons" : 3,
  "cartonizeOrders" : false,
  "pickSortRule" : "pickSortRule",
  "isMassDistribution" : false,
  "pickBatchGroupId" : "pickBatchGroupId",
  "layoutRule" : "layoutRule",
  "autoShipOrders" : false,
  "id" : 0,
  "pickListFormat" : "pickListFormat",
  "pickListGroup" : "pickListGroup",
  "pickScanSchemeId" : 4,
  "externalShippingSystemId" : 1,
  "createPickList" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "createOrderAssemblyGuide" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createPackingSlip" : "createPackingSlip",
  "version" : "version",
  "batchSizeMin" : 9,
  "overrideOrderInvoiceTemplateId" : 1,
  "pickSummarySort" : "pickSummarySort",
  "lastRunTime" : "2000-01-23T04:56:07.000+00:00",
  "preGenerateParcelLabels" : false,
  "labelSort" : "labelSort",
  "warehouseId" : 6,
  "locationSort" : "locationSort",
  "name" : "name",
  "overridePackingSlipTemplateId" : 1,
  "priorityCode" : 1,
  "autoShipCasebreakCartons" : false,
  "orderSmartFilterId" : 5
}, {
  "pickListLayout" : "pickListLayout",
  "createPickWork" : false,
  "pickingRule" : "pickingRule",
  "createOrderInvoice" : "createOrderInvoice",
  "pickSummaryLayout" : "pickSummaryLayout",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "pickListSort",
  "description" : "description",
  "createPickSummary" : false,
  "pickListLocationSort" : "pickListLocationSort",
  "sendToExternalShippingSystem" : false,
  "maxOrders" : 2,
  "batchSizeMax" : 7,
  "locationSmartFilterId" : 5,
  "maxSKUsPerBatch" : 2,
  "pickSummaryFormat" : "pickSummaryFormat",
  "cartonizationScriptId" : 7,
  "maxCartons" : 3,
  "cartonizeOrders" : false,
  "pickSortRule" : "pickSortRule",
  "isMassDistribution" : false,
  "pickBatchGroupId" : "pickBatchGroupId",
  "layoutRule" : "layoutRule",
  "autoShipOrders" : false,
  "id" : 0,
  "pickListFormat" : "pickListFormat",
  "pickListGroup" : "pickListGroup",
  "pickScanSchemeId" : 4,
  "externalShippingSystemId" : 1,
  "createPickList" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "createOrderAssemblyGuide" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createPackingSlip" : "createPackingSlip",
  "version" : "version",
  "batchSizeMin" : 9,
  "overrideOrderInvoiceTemplateId" : 1,
  "pickSummarySort" : "pickSummarySort",
  "lastRunTime" : "2000-01-23T04:56:07.000+00:00",
  "preGenerateParcelLabels" : false,
  "labelSort" : "labelSort",
  "warehouseId" : 6,
  "locationSort" : "locationSort",
  "name" : "name",
  "overridePackingSlipTemplateId" : 1,
  "priorityCode" : 1,
  "autoShipCasebreakCartons" : false,
  "orderSmartFilterId" : 5
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[FulfillmentPlan]> 
     */
    public class func getFulfillmentPlanByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[FulfillmentPlan]> {
        let path = "/beta/fulfillmentPlan/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[FulfillmentPlan]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a fulfillmentPlan by id
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentPlanById(fulfillmentPlanId fulfillmentPlanId: Int32, completion: ((data: FulfillmentPlan?, error: ErrorType?) -> Void)) {
        getFulfillmentPlanByIdWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a fulfillmentPlan by id
     - GET /beta/fulfillmentPlan/{fulfillmentPlanId}
     - Returns the fulfillmentPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "pickListLayout" : "pickListLayout",
  "createPickWork" : false,
  "pickingRule" : "pickingRule",
  "createOrderInvoice" : "createOrderInvoice",
  "pickSummaryLayout" : "pickSummaryLayout",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "pickListSort",
  "description" : "description",
  "createPickSummary" : false,
  "pickListLocationSort" : "pickListLocationSort",
  "sendToExternalShippingSystem" : false,
  "maxOrders" : 2,
  "batchSizeMax" : 7,
  "locationSmartFilterId" : 5,
  "maxSKUsPerBatch" : 2,
  "pickSummaryFormat" : "pickSummaryFormat",
  "cartonizationScriptId" : 7,
  "maxCartons" : 3,
  "cartonizeOrders" : false,
  "pickSortRule" : "pickSortRule",
  "isMassDistribution" : false,
  "pickBatchGroupId" : "pickBatchGroupId",
  "layoutRule" : "layoutRule",
  "autoShipOrders" : false,
  "id" : 0,
  "pickListFormat" : "pickListFormat",
  "pickListGroup" : "pickListGroup",
  "pickScanSchemeId" : 4,
  "externalShippingSystemId" : 1,
  "createPickList" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "createOrderAssemblyGuide" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createPackingSlip" : "createPackingSlip",
  "version" : "version",
  "batchSizeMin" : 9,
  "overrideOrderInvoiceTemplateId" : 1,
  "pickSummarySort" : "pickSummarySort",
  "lastRunTime" : "2000-01-23T04:56:07.000+00:00",
  "preGenerateParcelLabels" : false,
  "labelSort" : "labelSort",
  "warehouseId" : 6,
  "locationSort" : "locationSort",
  "name" : "name",
  "overridePackingSlipTemplateId" : 1,
  "priorityCode" : 1,
  "autoShipCasebreakCartons" : false,
  "orderSmartFilterId" : 5
}}]
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be returned. 

     - returns: RequestBuilder<FulfillmentPlan> 
     */
    public class func getFulfillmentPlanByIdWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32) -> RequestBuilder<FulfillmentPlan> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a fulfillmentPlan.
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentPlanFiles(fulfillmentPlanId fulfillmentPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getFulfillmentPlanFilesWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a fulfillmentPlan.
     - GET /beta/fulfillmentPlan/{fulfillmentPlanId}/file
     - Get all existing fulfillmentPlan files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getFulfillmentPlanFilesWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/file"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a fulfillmentPlan.
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentPlanTags(fulfillmentPlanId fulfillmentPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getFulfillmentPlanTagsWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a fulfillmentPlan.
     - GET /beta/fulfillmentPlan/{fulfillmentPlanId}/tag
     - Get all existing fulfillmentPlan tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getFulfillmentPlanTagsWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a fulfillmentPlan
     
     - parameter body: (body) FulfillmentPlan to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateFulfillmentPlan(body body: FulfillmentPlan, completion: ((error: ErrorType?) -> Void)) {
        updateFulfillmentPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a fulfillmentPlan
     - PUT /beta/fulfillmentPlan
     - Updates an existing fulfillmentPlan using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) FulfillmentPlan to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateFulfillmentPlanWithRequestBuilder(body body: FulfillmentPlan) -> RequestBuilder<Void> {
        let path = "/beta/fulfillmentPlan"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a fulfillmentPlan custom fields
     
     - parameter body: (body) FulfillmentPlan to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateFulfillmentPlanCustomFields(body body: FulfillmentPlan, completion: ((error: ErrorType?) -> Void)) {
        updateFulfillmentPlanCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a fulfillmentPlan custom fields
     - PUT /beta/fulfillmentPlan/customFields
     - Updates an existing fulfillmentPlan custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) FulfillmentPlan to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateFulfillmentPlanCustomFieldsWithRequestBuilder(body body: FulfillmentPlan) -> RequestBuilder<Void> {
        let path = "/beta/fulfillmentPlan/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
