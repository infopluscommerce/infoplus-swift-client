//
// FulfillmentPlanAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class FulfillmentPlanAPI: APIBase {
    /**
     
     Create a fulfillmentPlan
     
     - parameter body: (body) FulfillmentPlan to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentPlan(body body: FulfillmentPlan, completion: ((data: FulfillmentPlan?, error: ErrorType?) -> Void)) {
        addFulfillmentPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a fulfillmentPlan
     
     - POST /beta/fulfillmentPlan
     - Inserts a new fulfillmentPlan using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "pickListLayout" : "aeiou",
  "createPickWork" : true,
  "pickingRule" : "aeiou",
  "pickSummaryLayout" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "aeiou",
  "description" : "aeiou",
  "createPickSummary" : true,
  "locationSmartFilterId" : 123,
  "pickSummaryFormat" : "aeiou",
  "cartonizeOrders" : true,
  "pickSortRule" : "aeiou",
  "layoutRule" : "aeiou",
  "id" : 123,
  "pickListFormat" : "aeiou",
  "pickListGroup" : "aeiou",
  "pickScanSchemeId" : 123,
  "createPickList" : true,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "maximumNumberOfOrders" : 123,
  "createOrderAssemblyGuide" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createPackingSlip" : true,
  "pickSummarySort" : "aeiou",
  "preGenerateParcelLabels" : true,
  "warehouseId" : 123,
  "name" : "aeiou",
  "overridePackingSlipTemplateId" : 123,
  "autoShipCasebreakCartons" : true,
  "orderSmartFilterId" : 123
}}]
     
     - parameter body: (body) FulfillmentPlan to be inserted. 

     - returns: RequestBuilder<FulfillmentPlan> 
     */
    public class func addFulfillmentPlanWithRequestBuilder(body body: FulfillmentPlan) -> RequestBuilder<FulfillmentPlan> {
        let path = "/beta/fulfillmentPlan"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<FulfillmentPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a fulfillmentPlan
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFulfillmentPlan(fulfillmentPlanId fulfillmentPlanId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteFulfillmentPlanWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a fulfillmentPlan
     
     - DELETE /beta/fulfillmentPlan/{fulfillmentPlanId}
     - Deletes the fulfillmentPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFulfillmentPlanWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search fulfillmentPlans by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentPlanByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [FulfillmentPlan]?, error: ErrorType?) -> Void)) {
        getFulfillmentPlanByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search fulfillmentPlans by filter
     
     - GET /beta/fulfillmentPlan/search
     - Returns the list of fulfillmentPlans that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "pickListLayout" : "aeiou",
  "createPickWork" : true,
  "pickingRule" : "aeiou",
  "pickSummaryLayout" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "aeiou",
  "description" : "aeiou",
  "createPickSummary" : true,
  "locationSmartFilterId" : 123,
  "pickSummaryFormat" : "aeiou",
  "cartonizeOrders" : true,
  "pickSortRule" : "aeiou",
  "layoutRule" : "aeiou",
  "id" : 123,
  "pickListFormat" : "aeiou",
  "pickListGroup" : "aeiou",
  "pickScanSchemeId" : 123,
  "createPickList" : true,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "maximumNumberOfOrders" : 123,
  "createOrderAssemblyGuide" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createPackingSlip" : true,
  "pickSummarySort" : "aeiou",
  "preGenerateParcelLabels" : true,
  "warehouseId" : 123,
  "name" : "aeiou",
  "overridePackingSlipTemplateId" : 123,
  "autoShipCasebreakCartons" : true,
  "orderSmartFilterId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[FulfillmentPlan]> 
     */
    public class func getFulfillmentPlanByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[FulfillmentPlan]> {
        let path = "/beta/fulfillmentPlan/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[FulfillmentPlan]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a fulfillmentPlan by id
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentPlanById(fulfillmentPlanId fulfillmentPlanId: Int, completion: ((data: FulfillmentPlan?, error: ErrorType?) -> Void)) {
        getFulfillmentPlanByIdWithRequestBuilder(fulfillmentPlanId: fulfillmentPlanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a fulfillmentPlan by id
     
     - GET /beta/fulfillmentPlan/{fulfillmentPlanId}
     - Returns the fulfillmentPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "pickListLayout" : "aeiou",
  "createPickWork" : true,
  "pickingRule" : "aeiou",
  "pickSummaryLayout" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "pickListSort" : "aeiou",
  "description" : "aeiou",
  "createPickSummary" : true,
  "locationSmartFilterId" : 123,
  "pickSummaryFormat" : "aeiou",
  "cartonizeOrders" : true,
  "pickSortRule" : "aeiou",
  "layoutRule" : "aeiou",
  "id" : 123,
  "pickListFormat" : "aeiou",
  "pickListGroup" : "aeiou",
  "pickScanSchemeId" : 123,
  "createPickList" : true,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "maximumNumberOfOrders" : 123,
  "createOrderAssemblyGuide" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createPackingSlip" : true,
  "pickSummarySort" : "aeiou",
  "preGenerateParcelLabels" : true,
  "warehouseId" : 123,
  "name" : "aeiou",
  "overridePackingSlipTemplateId" : 123,
  "autoShipCasebreakCartons" : true,
  "orderSmartFilterId" : 123
}}]
     
     - parameter fulfillmentPlanId: (path) Id of the fulfillmentPlan to be returned. 

     - returns: RequestBuilder<FulfillmentPlan> 
     */
    public class func getFulfillmentPlanByIdWithRequestBuilder(fulfillmentPlanId fulfillmentPlanId: Int) -> RequestBuilder<FulfillmentPlan> {
        var path = "/beta/fulfillmentPlan/{fulfillmentPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentPlanId}", withString: "\(fulfillmentPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<FulfillmentPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a fulfillmentPlan
     
     - parameter body: (body) FulfillmentPlan to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateFulfillmentPlan(body body: FulfillmentPlan, completion: ((error: ErrorType?) -> Void)) {
        updateFulfillmentPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a fulfillmentPlan
     
     - PUT /beta/fulfillmentPlan
     - Updates an existing fulfillmentPlan using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) FulfillmentPlan to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateFulfillmentPlanWithRequestBuilder(body body: FulfillmentPlan) -> RequestBuilder<Void> {
        let path = "/beta/fulfillmentPlan"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a fulfillmentPlan custom fields
     
     - parameter body: (body) FulfillmentPlan to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateFulfillmentPlanCustomFields(body body: FulfillmentPlan, completion: ((error: ErrorType?) -> Void)) {
        updateFulfillmentPlanCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a fulfillmentPlan custom fields
     
     - PUT /beta/fulfillmentPlan/customFields
     - Updates an existing fulfillmentPlan custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) FulfillmentPlan to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateFulfillmentPlanCustomFieldsWithRequestBuilder(body body: FulfillmentPlan) -> RequestBuilder<Void> {
        let path = "/beta/fulfillmentPlan/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
