//
// CustomerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CustomerAPI: APIBase {
    /**
     Create a customer
     
     - parameter body: (body) Customer to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCustomer(body body: Customer, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        addCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a customer
     - POST /beta/customer
     - Inserts a new customer using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "zipCode" : "zipCode",
  "country" : "country",
  "packageCarrierId" : 1,
  "county" : "county",
  "priceLevel" : "priceLevel",
  "omsCustomerId" : 1,
  "massLevel" : "massLevel",
  "division" : 2,
  "customerType" : "customerType",
  "alternateInventory" : 3,
  "pin" : "pin",
  "id" : 0,
  "state" : "state",
  "fax" : "fax",
  "sector" : "sector",
  "bossBranch" : "bossBranch",
  "lobId" : 6,
  "area" : "area",
  "faxGone" : "faxGone",
  "weightBreak" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "costCenter" : "costCenter",
  "extrinsicNumber2" : 4,
  "extrinsicNumber1" : 2,
  "extrinsicText1" : "extrinsicText1",
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "phone" : "phone",
  "name" : "name",
  "street3Province" : "street3Province",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "restrictionPercent" : 9,
  "extrinsicDecimal2" : 1.231513536777255612975068288506008684635162353515625,
  "street" : "street",
  "street2" : "street2",
  "massFactor" : 7.061401241503109105224211816675961017608642578125,
  "cycleDate" : "2000-01-23T04:56:07.000+00:00",
  "email" : "email",
  "extrinsicDecimal1" : 7.3862819483858839220147274318151175975799560546875,
  "manager" : "manager",
  "externalId" : "externalId",
  "closeDate" : "2000-01-23T04:56:07.000+00:00",
  "residential" : "residential",
  "attention" : "attention",
  "truckCarrierId" : 5,
  "openDate" : "2000-01-23T04:56:07.000+00:00",
  "csrBranch" : "csrBranch",
  "customerNo" : "customerNo"
}}]
     
     - parameter body: (body) Customer to be inserted. 

     - returns: RequestBuilder<Customer> 
     */
    public class func addCustomerWithRequestBuilder(body body: Customer) -> RequestBuilder<Customer> {
        let path = "/beta/customer"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a customer
     
     - parameter customerId: (path) Id of the customer to add an audit to 
     - parameter customerAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCustomerAudit(customerId customerId: Int32, customerAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addCustomerAuditWithRequestBuilder(customerId: customerId, customerAudit: customerAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a customer
     - PUT /beta/customer/{customerId}/audit/{customerAudit}
     - Adds an audit to an existing customer.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to add an audit to 
     - parameter customerAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCustomerAuditWithRequestBuilder(customerId customerId: Int32, customerAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/audit/{customerAudit}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{customerAudit}", withString: "\(customerAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a customer
     
     - parameter customerId: (path) Id of the customer to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCustomerFile(customerId customerId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addCustomerFileWithRequestBuilder(customerId: customerId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a customer
     - POST /beta/customer/{customerId}/file/{fileName}
     - Adds a file to an existing customer.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addCustomerFileWithRequestBuilder(customerId customerId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a customer by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter customerId: (path) Id of the customer to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCustomerFileByURL(body body: RecordFile, customerId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addCustomerFileByURLWithRequestBuilder(body: body, customerId: customerId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a customer by URL.
     - POST /beta/customer/{customerId}/file
     - Adds a file to an existing customer by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter customerId: (path) Id of the customer to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addCustomerFileByURLWithRequestBuilder(body body: RecordFile, customerId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/file"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a customer.
     
     - parameter customerId: (path) Id of the customer to add a tag to 
     - parameter customerTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCustomerTag(customerId customerId: Int32, customerTag: String, completion: ((error: ErrorType?) -> Void)) {
        addCustomerTagWithRequestBuilder(customerId: customerId, customerTag: customerTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a customer.
     - PUT /beta/customer/{customerId}/tag/{customerTag}
     - Adds a tag to an existing customer.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to add a tag to 
     - parameter customerTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCustomerTagWithRequestBuilder(customerId customerId: Int32, customerTag: String) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/tag/{customerTag}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{customerTag}", withString: "\(customerTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a customer
     
     - parameter customerId: (path) Id of the customer to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCustomer(customerId customerId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteCustomerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a customer
     - DELETE /beta/customer/{customerId}
     - Deletes the customer identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCustomerWithRequestBuilder(customerId customerId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a customer.
     
     - parameter customerId: (path) Id of the customer to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCustomerFile(customerId customerId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteCustomerFileWithRequestBuilder(customerId: customerId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a customer.
     - DELETE /beta/customer/{customerId}/file/{fileId}
     - Deletes an existing customer file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCustomerFileWithRequestBuilder(customerId customerId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a customer.
     
     - parameter customerId: (path) Id of the customer to remove tag from 
     - parameter customerTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCustomerTag(customerId customerId: Int32, customerTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteCustomerTagWithRequestBuilder(customerId: customerId, customerTag: customerTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a customer.
     - DELETE /beta/customer/{customerId}/tag/{customerTag}
     - Deletes an existing customer tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to remove tag from 
     - parameter customerTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCustomerTagWithRequestBuilder(customerId customerId: Int32, customerTag: String) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/tag/{customerTag}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{customerTag}", withString: "\(customerTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a customer by Customer No
     
     - parameter lobId: (query) lobId of the customer to be returned. 
     - parameter customerNo: (query) customerNo of the customer to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getByCustomerNo(lobId lobId: Int32, customerNo: String, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        getByCustomerNoWithRequestBuilder(lobId: lobId, customerNo: customerNo).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a customer by Customer No
     - GET /beta/customer/getByCustomerNo
     - Returns the customer identified by the specified parameters.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "zipCode" : "zipCode",
  "country" : "country",
  "packageCarrierId" : 1,
  "county" : "county",
  "priceLevel" : "priceLevel",
  "omsCustomerId" : 1,
  "massLevel" : "massLevel",
  "division" : 2,
  "customerType" : "customerType",
  "alternateInventory" : 3,
  "pin" : "pin",
  "id" : 0,
  "state" : "state",
  "fax" : "fax",
  "sector" : "sector",
  "bossBranch" : "bossBranch",
  "lobId" : 6,
  "area" : "area",
  "faxGone" : "faxGone",
  "weightBreak" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "costCenter" : "costCenter",
  "extrinsicNumber2" : 4,
  "extrinsicNumber1" : 2,
  "extrinsicText1" : "extrinsicText1",
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "phone" : "phone",
  "name" : "name",
  "street3Province" : "street3Province",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "restrictionPercent" : 9,
  "extrinsicDecimal2" : 1.231513536777255612975068288506008684635162353515625,
  "street" : "street",
  "street2" : "street2",
  "massFactor" : 7.061401241503109105224211816675961017608642578125,
  "cycleDate" : "2000-01-23T04:56:07.000+00:00",
  "email" : "email",
  "extrinsicDecimal1" : 7.3862819483858839220147274318151175975799560546875,
  "manager" : "manager",
  "externalId" : "externalId",
  "closeDate" : "2000-01-23T04:56:07.000+00:00",
  "residential" : "residential",
  "attention" : "attention",
  "truckCarrierId" : 5,
  "openDate" : "2000-01-23T04:56:07.000+00:00",
  "csrBranch" : "csrBranch",
  "customerNo" : "customerNo"
}}]
     
     - parameter lobId: (query) lobId of the customer to be returned. 
     - parameter customerNo: (query) customerNo of the customer to be returned. 

     - returns: RequestBuilder<Customer> 
     */
    public class func getByCustomerNoWithRequestBuilder(lobId lobId: Int32, customerNo: String) -> RequestBuilder<Customer> {
        let path = "/beta/customer/getByCustomerNo"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "lobId": lobId.encodeToJSON(),
            "customerNo": customerNo
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search customers by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCustomerByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Customer]?, error: ErrorType?) -> Void)) {
        getCustomerByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search customers by filter
     - GET /beta/customer/search
     - Returns the list of customers that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "zipCode" : "zipCode",
  "country" : "country",
  "packageCarrierId" : 1,
  "county" : "county",
  "priceLevel" : "priceLevel",
  "omsCustomerId" : 1,
  "massLevel" : "massLevel",
  "division" : 2,
  "customerType" : "customerType",
  "alternateInventory" : 3,
  "pin" : "pin",
  "id" : 0,
  "state" : "state",
  "fax" : "fax",
  "sector" : "sector",
  "bossBranch" : "bossBranch",
  "lobId" : 6,
  "area" : "area",
  "faxGone" : "faxGone",
  "weightBreak" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "costCenter" : "costCenter",
  "extrinsicNumber2" : 4,
  "extrinsicNumber1" : 2,
  "extrinsicText1" : "extrinsicText1",
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "phone" : "phone",
  "name" : "name",
  "street3Province" : "street3Province",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "restrictionPercent" : 9,
  "extrinsicDecimal2" : 1.231513536777255612975068288506008684635162353515625,
  "street" : "street",
  "street2" : "street2",
  "massFactor" : 7.061401241503109105224211816675961017608642578125,
  "cycleDate" : "2000-01-23T04:56:07.000+00:00",
  "email" : "email",
  "extrinsicDecimal1" : 7.3862819483858839220147274318151175975799560546875,
  "manager" : "manager",
  "externalId" : "externalId",
  "closeDate" : "2000-01-23T04:56:07.000+00:00",
  "residential" : "residential",
  "attention" : "attention",
  "truckCarrierId" : 5,
  "openDate" : "2000-01-23T04:56:07.000+00:00",
  "csrBranch" : "csrBranch",
  "customerNo" : "customerNo"
}, {
  "zipCode" : "zipCode",
  "country" : "country",
  "packageCarrierId" : 1,
  "county" : "county",
  "priceLevel" : "priceLevel",
  "omsCustomerId" : 1,
  "massLevel" : "massLevel",
  "division" : 2,
  "customerType" : "customerType",
  "alternateInventory" : 3,
  "pin" : "pin",
  "id" : 0,
  "state" : "state",
  "fax" : "fax",
  "sector" : "sector",
  "bossBranch" : "bossBranch",
  "lobId" : 6,
  "area" : "area",
  "faxGone" : "faxGone",
  "weightBreak" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "costCenter" : "costCenter",
  "extrinsicNumber2" : 4,
  "extrinsicNumber1" : 2,
  "extrinsicText1" : "extrinsicText1",
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "phone" : "phone",
  "name" : "name",
  "street3Province" : "street3Province",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "restrictionPercent" : 9,
  "extrinsicDecimal2" : 1.231513536777255612975068288506008684635162353515625,
  "street" : "street",
  "street2" : "street2",
  "massFactor" : 7.061401241503109105224211816675961017608642578125,
  "cycleDate" : "2000-01-23T04:56:07.000+00:00",
  "email" : "email",
  "extrinsicDecimal1" : 7.3862819483858839220147274318151175975799560546875,
  "manager" : "manager",
  "externalId" : "externalId",
  "closeDate" : "2000-01-23T04:56:07.000+00:00",
  "residential" : "residential",
  "attention" : "attention",
  "truckCarrierId" : 5,
  "openDate" : "2000-01-23T04:56:07.000+00:00",
  "csrBranch" : "csrBranch",
  "customerNo" : "customerNo"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Customer]> 
     */
    public class func getCustomerByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Customer]> {
        let path = "/beta/customer/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Customer]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a customer by id
     
     - parameter customerId: (path) Id of the customer to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCustomerById(customerId customerId: Int32, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        getCustomerByIdWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a customer by id
     - GET /beta/customer/{customerId}
     - Returns the customer identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "zipCode" : "zipCode",
  "country" : "country",
  "packageCarrierId" : 1,
  "county" : "county",
  "priceLevel" : "priceLevel",
  "omsCustomerId" : 1,
  "massLevel" : "massLevel",
  "division" : 2,
  "customerType" : "customerType",
  "alternateInventory" : 3,
  "pin" : "pin",
  "id" : 0,
  "state" : "state",
  "fax" : "fax",
  "sector" : "sector",
  "bossBranch" : "bossBranch",
  "lobId" : 6,
  "area" : "area",
  "faxGone" : "faxGone",
  "weightBreak" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "costCenter" : "costCenter",
  "extrinsicNumber2" : 4,
  "extrinsicNumber1" : 2,
  "extrinsicText1" : "extrinsicText1",
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "phone" : "phone",
  "name" : "name",
  "street3Province" : "street3Province",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "restrictionPercent" : 9,
  "extrinsicDecimal2" : 1.231513536777255612975068288506008684635162353515625,
  "street" : "street",
  "street2" : "street2",
  "massFactor" : 7.061401241503109105224211816675961017608642578125,
  "cycleDate" : "2000-01-23T04:56:07.000+00:00",
  "email" : "email",
  "extrinsicDecimal1" : 7.3862819483858839220147274318151175975799560546875,
  "manager" : "manager",
  "externalId" : "externalId",
  "closeDate" : "2000-01-23T04:56:07.000+00:00",
  "residential" : "residential",
  "attention" : "attention",
  "truckCarrierId" : 5,
  "openDate" : "2000-01-23T04:56:07.000+00:00",
  "csrBranch" : "csrBranch",
  "customerNo" : "customerNo"
}}]
     
     - parameter customerId: (path) Id of the customer to be returned. 

     - returns: RequestBuilder<Customer> 
     */
    public class func getCustomerByIdWithRequestBuilder(customerId customerId: Int32) -> RequestBuilder<Customer> {
        var path = "/beta/customer/{customerId}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a customer.
     
     - parameter customerId: (path) Id of the customer to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCustomerFiles(customerId customerId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCustomerFilesWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a customer.
     - GET /beta/customer/{customerId}/file
     - Get all existing customer files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCustomerFilesWithRequestBuilder(customerId customerId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/file"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a customer.
     
     - parameter customerId: (path) Id of the customer to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCustomerTags(customerId customerId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCustomerTagsWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a customer.
     - GET /beta/customer/{customerId}/tag
     - Get all existing customer tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCustomerTagsWithRequestBuilder(customerId customerId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/customer/{customerId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a customer by id
     
     - parameter customerId: (path) Id of the customer to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateCustomerById(customerId customerId: Int32, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        getDuplicateCustomerByIdWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a customer by id
     - GET /beta/customer/duplicate/{customerId}
     - Returns a duplicated customer identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "zipCode" : "zipCode",
  "country" : "country",
  "packageCarrierId" : 1,
  "county" : "county",
  "priceLevel" : "priceLevel",
  "omsCustomerId" : 1,
  "massLevel" : "massLevel",
  "division" : 2,
  "customerType" : "customerType",
  "alternateInventory" : 3,
  "pin" : "pin",
  "id" : 0,
  "state" : "state",
  "fax" : "fax",
  "sector" : "sector",
  "bossBranch" : "bossBranch",
  "lobId" : 6,
  "area" : "area",
  "faxGone" : "faxGone",
  "weightBreak" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "costCenter" : "costCenter",
  "extrinsicNumber2" : 4,
  "extrinsicNumber1" : 2,
  "extrinsicText1" : "extrinsicText1",
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "phone" : "phone",
  "name" : "name",
  "street3Province" : "street3Province",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "restrictionPercent" : 9,
  "extrinsicDecimal2" : 1.231513536777255612975068288506008684635162353515625,
  "street" : "street",
  "street2" : "street2",
  "massFactor" : 7.061401241503109105224211816675961017608642578125,
  "cycleDate" : "2000-01-23T04:56:07.000+00:00",
  "email" : "email",
  "extrinsicDecimal1" : 7.3862819483858839220147274318151175975799560546875,
  "manager" : "manager",
  "externalId" : "externalId",
  "closeDate" : "2000-01-23T04:56:07.000+00:00",
  "residential" : "residential",
  "attention" : "attention",
  "truckCarrierId" : 5,
  "openDate" : "2000-01-23T04:56:07.000+00:00",
  "csrBranch" : "csrBranch",
  "customerNo" : "customerNo"
}}]
     
     - parameter customerId: (path) Id of the customer to be duplicated. 

     - returns: RequestBuilder<Customer> 
     */
    public class func getDuplicateCustomerByIdWithRequestBuilder(customerId customerId: Int32) -> RequestBuilder<Customer> {
        var path = "/beta/customer/duplicate/{customerId}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a customer
     
     - parameter body: (body) Customer to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCustomer(body body: Customer, completion: ((error: ErrorType?) -> Void)) {
        updateCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a customer
     - PUT /beta/customer
     - Updates an existing customer using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Customer to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCustomerWithRequestBuilder(body body: Customer) -> RequestBuilder<Void> {
        let path = "/beta/customer"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a customer custom fields
     
     - parameter body: (body) Customer to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCustomerCustomFields(body body: Customer, completion: ((error: ErrorType?) -> Void)) {
        updateCustomerCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a customer custom fields
     - PUT /beta/customer/customFields
     - Updates an existing customer custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Customer to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCustomerCustomFieldsWithRequestBuilder(body body: Customer) -> RequestBuilder<Void> {
        let path = "/beta/customer/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
