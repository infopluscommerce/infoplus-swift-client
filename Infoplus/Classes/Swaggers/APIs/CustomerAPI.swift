//
// CustomerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CustomerAPI: APIBase {
    /**
     
     Create a customer
     
     - parameter body: (body) Customer to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCustomer(body body: Customer, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        addCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a customer
     
     - POST /v1.0/customer
     - Inserts a new customer using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "omsCustomerId" : 123,
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "sector" : "aeiou",
  "weightBreak" : 123,
  "phone" : "aeiou",
  "manager" : "aeiou",
  "priceLevel" : "aeiou",
  "residential" : "aeiou",
  "street" : "aeiou",
  "state" : "aeiou",
  "customerNo" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "externalId" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "city" : "aeiou",
  "id" : 123,
  "division" : 123,
  "area" : "aeiou",
  "extrinsicNumber2" : 123,
  "street3Province" : "aeiou",
  "massLevel" : "aeiou",
  "extrinsicNumber1" : 123,
  "zipCode" : "aeiou",
  "name" : "aeiou",
  "lobId" : 123,
  "openDate" : "2000-01-23T04:56:07.000+0000",
  "attention" : "aeiou",
  "street2" : "aeiou",
  "cycleDate" : "2000-01-23T04:56:07.000+0000",
  "customerType" : "aeiou",
  "fax" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "closeDate" : "2000-01-23T04:56:07.000+0000",
  "packageCarrierId" : 123,
  "extrinsicText1" : "aeiou",
  "csrBranch" : "aeiou",
  "faxGone" : "aeiou",
  "truckCarrierId" : 123,
  "massFactor" : 1.3579000000000001069366817318950779736042022705078125,
  "costCenter" : "aeiou",
  "country" : "aeiou",
  "pin" : "aeiou",
  "alternateInventory" : 123,
  "email" : "aeiou",
  "county" : "aeiou",
  "restrictionPercent" : 123,
  "bossBranch" : "aeiou"
}, contentType=application/json}]
     
     - parameter body: (body) Customer to be inserted. 

     - returns: RequestBuilder<Customer> 
     */
    public class func addCustomerWithRequestBuilder(body body: Customer) -> RequestBuilder<Customer> {
        let path = "/v1.0/customer"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a customer
     
     - parameter customerId: (path) Id of the customer to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCustomer(customerId customerId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteCustomerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a customer
     
     - DELETE /v1.0/customer/{customerId}
     - Deletes the customer identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter customerId: (path) Id of the customer to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCustomerWithRequestBuilder(customerId customerId: Int) -> RequestBuilder<Void> {
        var path = "/v1.0/customer/{customerId}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a customer by Customer No
     
     - parameter lobId: (query) lobId of the customer to be returned. 
     - parameter customerNo: (query) customerNo of the customer to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getByCustomerNo(lobId lobId: Int, customerNo: String, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        getByCustomerNoWithRequestBuilder(lobId: lobId, customerNo: customerNo).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a customer by Customer No
     
     - GET /v1.0/customer/getByCustomerNo
     - Returns the customer identified by the specified parameters.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "omsCustomerId" : 123,
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "sector" : "aeiou",
  "weightBreak" : 123,
  "phone" : "aeiou",
  "manager" : "aeiou",
  "priceLevel" : "aeiou",
  "residential" : "aeiou",
  "street" : "aeiou",
  "state" : "aeiou",
  "customerNo" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "externalId" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "city" : "aeiou",
  "id" : 123,
  "division" : 123,
  "area" : "aeiou",
  "extrinsicNumber2" : 123,
  "street3Province" : "aeiou",
  "massLevel" : "aeiou",
  "extrinsicNumber1" : 123,
  "zipCode" : "aeiou",
  "name" : "aeiou",
  "lobId" : 123,
  "openDate" : "2000-01-23T04:56:07.000+0000",
  "attention" : "aeiou",
  "street2" : "aeiou",
  "cycleDate" : "2000-01-23T04:56:07.000+0000",
  "customerType" : "aeiou",
  "fax" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "closeDate" : "2000-01-23T04:56:07.000+0000",
  "packageCarrierId" : 123,
  "extrinsicText1" : "aeiou",
  "csrBranch" : "aeiou",
  "faxGone" : "aeiou",
  "truckCarrierId" : 123,
  "massFactor" : 1.3579000000000001069366817318950779736042022705078125,
  "costCenter" : "aeiou",
  "country" : "aeiou",
  "pin" : "aeiou",
  "alternateInventory" : 123,
  "email" : "aeiou",
  "county" : "aeiou",
  "restrictionPercent" : 123,
  "bossBranch" : "aeiou"
}, contentType=application/json}]
     
     - parameter lobId: (query) lobId of the customer to be returned. 
     - parameter customerNo: (query) customerNo of the customer to be returned. 

     - returns: RequestBuilder<Customer> 
     */
    public class func getByCustomerNoWithRequestBuilder(lobId lobId: Int, customerNo: String) -> RequestBuilder<Customer> {
        let path = "/v1.0/customer/getByCustomerNo"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "lobId": lobId,
            "customerNo": customerNo
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Search customers by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCustomerByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Customer]?, error: ErrorType?) -> Void)) {
        getCustomerByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search customers by filter
     
     - GET /v1.0/customer/search
     - Returns the list of customers that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example=[ {
  "omsCustomerId" : 123,
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "sector" : "aeiou",
  "weightBreak" : 123,
  "phone" : "aeiou",
  "manager" : "aeiou",
  "priceLevel" : "aeiou",
  "residential" : "aeiou",
  "street" : "aeiou",
  "state" : "aeiou",
  "customerNo" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "externalId" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "city" : "aeiou",
  "id" : 123,
  "division" : 123,
  "area" : "aeiou",
  "extrinsicNumber2" : 123,
  "street3Province" : "aeiou",
  "massLevel" : "aeiou",
  "extrinsicNumber1" : 123,
  "zipCode" : "aeiou",
  "name" : "aeiou",
  "lobId" : 123,
  "openDate" : "2000-01-23T04:56:07.000+0000",
  "attention" : "aeiou",
  "street2" : "aeiou",
  "cycleDate" : "2000-01-23T04:56:07.000+0000",
  "customerType" : "aeiou",
  "fax" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "closeDate" : "2000-01-23T04:56:07.000+0000",
  "packageCarrierId" : 123,
  "extrinsicText1" : "aeiou",
  "csrBranch" : "aeiou",
  "faxGone" : "aeiou",
  "truckCarrierId" : 123,
  "massFactor" : 1.3579000000000001069366817318950779736042022705078125,
  "costCenter" : "aeiou",
  "country" : "aeiou",
  "pin" : "aeiou",
  "alternateInventory" : 123,
  "email" : "aeiou",
  "county" : "aeiou",
  "restrictionPercent" : 123,
  "bossBranch" : "aeiou"
} ], contentType=application/json}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Customer]> 
     */
    public class func getCustomerByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Customer]> {
        let path = "/v1.0/customer/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Customer]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a customer by id
     
     - parameter customerId: (path) Id of the customer to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCustomerById(customerId customerId: Int, completion: ((data: Customer?, error: ErrorType?) -> Void)) {
        getCustomerByIdWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a customer by id
     
     - GET /v1.0/customer/{customerId}
     - Returns the customer identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "omsCustomerId" : 123,
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "sector" : "aeiou",
  "weightBreak" : 123,
  "phone" : "aeiou",
  "manager" : "aeiou",
  "priceLevel" : "aeiou",
  "residential" : "aeiou",
  "street" : "aeiou",
  "state" : "aeiou",
  "customerNo" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "externalId" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "city" : "aeiou",
  "id" : 123,
  "division" : 123,
  "area" : "aeiou",
  "extrinsicNumber2" : 123,
  "street3Province" : "aeiou",
  "massLevel" : "aeiou",
  "extrinsicNumber1" : 123,
  "zipCode" : "aeiou",
  "name" : "aeiou",
  "lobId" : 123,
  "openDate" : "2000-01-23T04:56:07.000+0000",
  "attention" : "aeiou",
  "street2" : "aeiou",
  "cycleDate" : "2000-01-23T04:56:07.000+0000",
  "customerType" : "aeiou",
  "fax" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "closeDate" : "2000-01-23T04:56:07.000+0000",
  "packageCarrierId" : 123,
  "extrinsicText1" : "aeiou",
  "csrBranch" : "aeiou",
  "faxGone" : "aeiou",
  "truckCarrierId" : 123,
  "massFactor" : 1.3579000000000001069366817318950779736042022705078125,
  "costCenter" : "aeiou",
  "country" : "aeiou",
  "pin" : "aeiou",
  "alternateInventory" : 123,
  "email" : "aeiou",
  "county" : "aeiou",
  "restrictionPercent" : 123,
  "bossBranch" : "aeiou"
}, contentType=application/json}]
     
     - parameter customerId: (path) Id of the customer to be returned. 

     - returns: RequestBuilder<Customer> 
     */
    public class func getCustomerByIdWithRequestBuilder(customerId customerId: Int) -> RequestBuilder<Customer> {
        var path = "/v1.0/customer/{customerId}"
        path = path.stringByReplacingOccurrencesOfString("{customerId}", withString: "\(customerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Customer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a customer
     
     - parameter body: (body) Customer to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCustomer(body body: Customer, completion: ((error: ErrorType?) -> Void)) {
        updateCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a customer
     
     - PUT /v1.0/customer
     - Updates an existing customer using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Customer to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCustomerWithRequestBuilder(body body: Customer) -> RequestBuilder<Void> {
        let path = "/v1.0/customer"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
