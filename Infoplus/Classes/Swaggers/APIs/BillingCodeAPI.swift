//
// BillingCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BillingCodeAPI: APIBase {
    /**
     
     Create a billingCode
     
     - parameter body: (body) BillingCode to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCode(body body: BillingCode, completion: ((data: BillingCode?, error: ErrorType?) -> Void)) {
        addBillingCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a billingCode
     
     - POST /v1.0/billingCode
     - Inserts a new billingCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "quantity" : 123,
  "billingCodeType" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter body: (body) BillingCode to be inserted. 

     - returns: RequestBuilder<BillingCode> 
     */
    public class func addBillingCodeWithRequestBuilder(body body: BillingCode) -> RequestBuilder<BillingCode> {
        let path = "/v1.0/billingCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<BillingCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a billingCode
     
     - parameter billingCodeId: (path) Id of the billingCode to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBillingCode(billingCodeId billingCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteBillingCodeWithRequestBuilder(billingCodeId: billingCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a billingCode
     
     - DELETE /v1.0/billingCode/{billingCodeId}
     - Deletes the billingCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeId: (path) Id of the billingCode to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBillingCodeWithRequestBuilder(billingCodeId billingCodeId: Int) -> RequestBuilder<Void> {
        var path = "/v1.0/billingCode/{billingCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search billingCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [BillingCode]?, error: ErrorType?) -> Void)) {
        getBillingCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search billingCodes by filter
     
     - GET /v1.0/billingCode/search
     - Returns the list of billingCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "quantity" : 123,
  "billingCodeType" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[BillingCode]> 
     */
    public class func getBillingCodeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[BillingCode]> {
        let path = "/v1.0/billingCode/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[BillingCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a billingCode by id
     
     - parameter billingCodeId: (path) Id of the billingCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeById(billingCodeId billingCodeId: Int, completion: ((data: BillingCode?, error: ErrorType?) -> Void)) {
        getBillingCodeByIdWithRequestBuilder(billingCodeId: billingCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a billingCode by id
     
     - GET /v1.0/billingCode/{billingCodeId}
     - Returns the billingCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "quantity" : 123,
  "billingCodeType" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter billingCodeId: (path) Id of the billingCode to be returned. 

     - returns: RequestBuilder<BillingCode> 
     */
    public class func getBillingCodeByIdWithRequestBuilder(billingCodeId billingCodeId: Int) -> RequestBuilder<BillingCode> {
        var path = "/v1.0/billingCode/{billingCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BillingCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a billingCode
     
     - parameter body: (body) BillingCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBillingCode(body body: BillingCode, completion: ((error: ErrorType?) -> Void)) {
        updateBillingCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a billingCode
     
     - PUT /v1.0/billingCode
     - Updates an existing billingCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) BillingCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBillingCodeWithRequestBuilder(body body: BillingCode) -> RequestBuilder<Void> {
        let path = "/v1.0/billingCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
