//
// BillingCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BillingCodeAPI: APIBase {
    /**
     
     Create a billingCode
     
     - parameter body: (body) BillingCode to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCode(body body: BillingCode, completion: ((data: BillingCode?, error: ErrorType?) -> Void)) {
        addBillingCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a billingCode
     
     - POST /beta/billingCode
     - Inserts a new billingCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+0000",
  "recordId" : "aeiou",
  "note" : "aeiou",
  "quantity" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "recordType" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "billingCodeTypeId" : 123,
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter body: (body) BillingCode to be inserted. 

     - returns: RequestBuilder<BillingCode> 
     */
    public class func addBillingCodeWithRequestBuilder(body body: BillingCode) -> RequestBuilder<BillingCode> {
        let path = "/beta/billingCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<BillingCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new audit for a billingCode
     
     - parameter billingCodeId: (path) Id of the billingCode to add an audit to 
     - parameter billingCodeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCodeAudit(billingCodeId billingCodeId: Int, billingCodeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addBillingCodeAuditWithRequestBuilder(billingCodeId: billingCodeId, billingCodeAudit: billingCodeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new audit for a billingCode
     
     - PUT /beta/billingCode/{billingCodeId}/audit/{billingCodeAudit}
     - Adds an audit to an existing billingCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeId: (path) Id of the billingCode to add an audit to 
     - parameter billingCodeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addBillingCodeAuditWithRequestBuilder(billingCodeId billingCodeId: Int, billingCodeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/billingCode/{billingCodeId}/audit/{billingCodeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{billingCodeAudit}", withString: "\(billingCodeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new tags for a billingCode.
     
     - parameter billingCodeId: (path) Id of the billingCode to add a tag to 
     - parameter billingCodeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCodeTag(billingCodeId billingCodeId: Int, billingCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addBillingCodeTagWithRequestBuilder(billingCodeId: billingCodeId, billingCodeTag: billingCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new tags for a billingCode.
     
     - PUT /beta/billingCode/{billingCodeId}/tag/{billingCodeTag}
     - Adds a tag to an existing billingCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeId: (path) Id of the billingCode to add a tag to 
     - parameter billingCodeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addBillingCodeTagWithRequestBuilder(billingCodeId billingCodeId: Int, billingCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/billingCode/{billingCodeId}/tag/{billingCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTag}", withString: "\(billingCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a billingCode
     
     - parameter billingCodeId: (path) Id of the billingCode to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBillingCode(billingCodeId billingCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteBillingCodeWithRequestBuilder(billingCodeId: billingCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a billingCode
     
     - DELETE /beta/billingCode/{billingCodeId}
     - Deletes the billingCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeId: (path) Id of the billingCode to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBillingCodeWithRequestBuilder(billingCodeId billingCodeId: Int) -> RequestBuilder<Void> {
        var path = "/beta/billingCode/{billingCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a tag for a billingCode.
     
     - parameter billingCodeId: (path) Id of the billingCode to remove tag from 
     - parameter billingCodeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBillingCodeTag(billingCodeId billingCodeId: Int, billingCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteBillingCodeTagWithRequestBuilder(billingCodeId: billingCodeId, billingCodeTag: billingCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a tag for a billingCode.
     
     - DELETE /beta/billingCode/{billingCodeId}/tag/{billingCodeTag}
     - Deletes an existing billingCode tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeId: (path) Id of the billingCode to remove tag from 
     - parameter billingCodeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBillingCodeTagWithRequestBuilder(billingCodeId billingCodeId: Int, billingCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/billingCode/{billingCodeId}/tag/{billingCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTag}", withString: "\(billingCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search billingCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [BillingCode]?, error: ErrorType?) -> Void)) {
        getBillingCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search billingCodes by filter
     
     - GET /beta/billingCode/search
     - Returns the list of billingCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+0000",
  "recordId" : "aeiou",
  "note" : "aeiou",
  "quantity" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "recordType" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "billingCodeTypeId" : 123,
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[BillingCode]> 
     */
    public class func getBillingCodeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[BillingCode]> {
        let path = "/beta/billingCode/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[BillingCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a billingCode by id
     
     - parameter billingCodeId: (path) Id of the billingCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeById(billingCodeId billingCodeId: Int, completion: ((data: BillingCode?, error: ErrorType?) -> Void)) {
        getBillingCodeByIdWithRequestBuilder(billingCodeId: billingCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a billingCode by id
     
     - GET /beta/billingCode/{billingCodeId}
     - Returns the billingCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+0000",
  "recordId" : "aeiou",
  "note" : "aeiou",
  "quantity" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "recordType" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "billingCodeTypeId" : 123,
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter billingCodeId: (path) Id of the billingCode to be returned. 

     - returns: RequestBuilder<BillingCode> 
     */
    public class func getBillingCodeByIdWithRequestBuilder(billingCodeId billingCodeId: Int) -> RequestBuilder<BillingCode> {
        var path = "/beta/billingCode/{billingCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BillingCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get the tags for a billingCode.
     
     - parameter billingCodeId: (path) Id of the billingCode to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeTags(billingCodeId billingCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        getBillingCodeTagsWithRequestBuilder(billingCodeId: billingCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Get the tags for a billingCode.
     
     - GET /beta/billingCode/{billingCodeId}/tag
     - Get all existing billingCode tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeId: (path) Id of the billingCode to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getBillingCodeTagsWithRequestBuilder(billingCodeId billingCodeId: Int) -> RequestBuilder<Void> {
        var path = "/beta/billingCode/{billingCodeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a billingCode by id
     
     - parameter billingCodeId: (path) Id of the billingCode to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateBillingCodeById(billingCodeId billingCodeId: Int, completion: ((data: BillingCode?, error: ErrorType?) -> Void)) {
        getDuplicateBillingCodeByIdWithRequestBuilder(billingCodeId: billingCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a billingCode by id
     
     - GET /beta/billingCode/duplicate/{billingCodeId}
     - Returns a duplicated billingCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+0000",
  "recordId" : "aeiou",
  "note" : "aeiou",
  "quantity" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "recordType" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "billingCodeTypeId" : 123,
  "id" : 123,
  "userId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter billingCodeId: (path) Id of the billingCode to be duplicated. 

     - returns: RequestBuilder<BillingCode> 
     */
    public class func getDuplicateBillingCodeByIdWithRequestBuilder(billingCodeId billingCodeId: Int) -> RequestBuilder<BillingCode> {
        var path = "/beta/billingCode/duplicate/{billingCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeId}", withString: "\(billingCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<BillingCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a billingCode
     
     - parameter body: (body) BillingCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBillingCode(body body: BillingCode, completion: ((error: ErrorType?) -> Void)) {
        updateBillingCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a billingCode
     
     - PUT /beta/billingCode
     - Updates an existing billingCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) BillingCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBillingCodeWithRequestBuilder(body body: BillingCode) -> RequestBuilder<Void> {
        let path = "/beta/billingCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a billingCode custom fields
     
     - parameter body: (body) BillingCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBillingCodeCustomFields(body body: BillingCode, completion: ((error: ErrorType?) -> Void)) {
        updateBillingCodeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a billingCode custom fields
     
     - PUT /beta/billingCode/customFields
     - Updates an existing billingCode custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) BillingCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBillingCodeCustomFieldsWithRequestBuilder(body body: BillingCode) -> RequestBuilder<Void> {
        let path = "/beta/billingCode/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
