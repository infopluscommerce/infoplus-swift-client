//
// ItemSubCategoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemSubCategoryAPI: APIBase {
    /**
     
     Create an itemSubCategory
     
     - parameter body: (body) ItemSubCategory to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSubCategory(body body: ItemSubCategory, completion: ((data: ItemSubCategory?, error: ErrorType?) -> Void)) {
        addItemSubCategoryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an itemSubCategory
     
     - POST /beta/itemSubCategory
     - Inserts a new itemSubCategory using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter body: (body) ItemSubCategory to be inserted. 

     - returns: RequestBuilder<ItemSubCategory> 
     */
    public class func addItemSubCategoryWithRequestBuilder(body body: ItemSubCategory) -> RequestBuilder<ItemSubCategory> {
        let path = "/beta/itemSubCategory"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ItemSubCategory>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new audit for an itemSubCategory
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to add an audit to 
     - parameter itemSubCategoryAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSubCategoryAudit(itemSubCategoryId itemSubCategoryId: Int, itemSubCategoryAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSubCategoryAuditWithRequestBuilder(itemSubCategoryId: itemSubCategoryId, itemSubCategoryAudit: itemSubCategoryAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new audit for an itemSubCategory
     
     - PUT /beta/itemSubCategory/{itemSubCategoryId}/audit/{itemSubCategoryAudit}
     - Adds an audit to an existing itemSubCategory.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to add an audit to 
     - parameter itemSubCategoryAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSubCategoryAuditWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int, itemSubCategoryAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSubCategory/{itemSubCategoryId}/audit/{itemSubCategoryAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryAudit}", withString: "\(itemSubCategoryAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new tags for an itemSubCategory.
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to add a tag to 
     - parameter itemSubCategoryTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSubCategoryTag(itemSubCategoryId itemSubCategoryId: Int, itemSubCategoryTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSubCategoryTagWithRequestBuilder(itemSubCategoryId: itemSubCategoryId, itemSubCategoryTag: itemSubCategoryTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new tags for an itemSubCategory.
     
     - PUT /beta/itemSubCategory/{itemSubCategoryId}/tag/{itemSubCategoryTag}
     - Adds a tag to an existing itemSubCategory.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to add a tag to 
     - parameter itemSubCategoryTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSubCategoryTagWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int, itemSubCategoryTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSubCategory/{itemSubCategoryId}/tag/{itemSubCategoryTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryTag}", withString: "\(itemSubCategoryTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an itemSubCategory
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSubCategory(itemSubCategoryId itemSubCategoryId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSubCategoryWithRequestBuilder(itemSubCategoryId: itemSubCategoryId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an itemSubCategory
     
     - DELETE /beta/itemSubCategory/{itemSubCategoryId}
     - Deletes the itemSubCategory identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSubCategoryWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int) -> RequestBuilder<Void> {
        var path = "/beta/itemSubCategory/{itemSubCategoryId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a tag for an itemSubCategory.
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to remove tag from 
     - parameter itemSubCategoryTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSubCategoryTag(itemSubCategoryId itemSubCategoryId: Int, itemSubCategoryTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSubCategoryTagWithRequestBuilder(itemSubCategoryId: itemSubCategoryId, itemSubCategoryTag: itemSubCategoryTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a tag for an itemSubCategory.
     
     - DELETE /beta/itemSubCategory/{itemSubCategoryId}/tag/{itemSubCategoryTag}
     - Deletes an existing itemSubCategory tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to remove tag from 
     - parameter itemSubCategoryTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSubCategoryTagWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int, itemSubCategoryTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSubCategory/{itemSubCategoryId}/tag/{itemSubCategoryTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryTag}", withString: "\(itemSubCategoryTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated an itemSubCategory by id
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemSubCategoryById(itemSubCategoryId itemSubCategoryId: Int, completion: ((data: ItemSubCategory?, error: ErrorType?) -> Void)) {
        getDuplicateItemSubCategoryByIdWithRequestBuilder(itemSubCategoryId: itemSubCategoryId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an itemSubCategory by id
     
     - GET /beta/itemSubCategory/duplicate/{itemSubCategoryId}
     - Returns a duplicated itemSubCategory identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to be duplicated. 

     - returns: RequestBuilder<ItemSubCategory> 
     */
    public class func getDuplicateItemSubCategoryByIdWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int) -> RequestBuilder<ItemSubCategory> {
        var path = "/beta/itemSubCategory/duplicate/{itemSubCategoryId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemSubCategory>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search itemSubCategorys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSubCategoryByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ItemSubCategory]?, error: ErrorType?) -> Void)) {
        getItemSubCategoryByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search itemSubCategorys by filter
     
     - GET /beta/itemSubCategory/search
     - Returns the list of itemSubCategorys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemSubCategory]> 
     */
    public class func getItemSubCategoryByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ItemSubCategory]> {
        let path = "/beta/itemSubCategory/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ItemSubCategory]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an itemSubCategory by id
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSubCategoryById(itemSubCategoryId itemSubCategoryId: Int, completion: ((data: ItemSubCategory?, error: ErrorType?) -> Void)) {
        getItemSubCategoryByIdWithRequestBuilder(itemSubCategoryId: itemSubCategoryId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an itemSubCategory by id
     
     - GET /beta/itemSubCategory/{itemSubCategoryId}
     - Returns the itemSubCategory identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to be returned. 

     - returns: RequestBuilder<ItemSubCategory> 
     */
    public class func getItemSubCategoryByIdWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int) -> RequestBuilder<ItemSubCategory> {
        var path = "/beta/itemSubCategory/{itemSubCategoryId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemSubCategory>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get the tags for an itemSubCategory.
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSubCategoryTags(itemSubCategoryId itemSubCategoryId: Int, completion: ((error: ErrorType?) -> Void)) {
        getItemSubCategoryTagsWithRequestBuilder(itemSubCategoryId: itemSubCategoryId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Get the tags for an itemSubCategory.
     
     - GET /beta/itemSubCategory/{itemSubCategoryId}/tag
     - Get all existing itemSubCategory tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSubCategoryId: (path) Id of the itemSubCategory to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemSubCategoryTagsWithRequestBuilder(itemSubCategoryId itemSubCategoryId: Int) -> RequestBuilder<Void> {
        var path = "/beta/itemSubCategory/{itemSubCategoryId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemSubCategoryId}", withString: "\(itemSubCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an itemSubCategory
     
     - parameter body: (body) ItemSubCategory to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemSubCategory(body body: ItemSubCategory, completion: ((error: ErrorType?) -> Void)) {
        updateItemSubCategoryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an itemSubCategory
     
     - PUT /beta/itemSubCategory
     - Updates an existing itemSubCategory using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemSubCategory to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemSubCategoryWithRequestBuilder(body body: ItemSubCategory) -> RequestBuilder<Void> {
        let path = "/beta/itemSubCategory"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
