//
// StandardBusinessDaysAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class StandardBusinessDaysAPI: APIBase {
    /**
     Create a standardBusinessDays
     
     - parameter body: (body) StandardBusinessDays to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addStandardBusinessDays(body body: StandardBusinessDays, completion: ((data: StandardBusinessDays?, error: ErrorType?) -> Void)) {
        addStandardBusinessDaysWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a standardBusinessDays
     - POST /v3.0/standardBusinessDays
     - Inserts a new standardBusinessDays using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sunday" : false,
  "saturday" : false,
  "tuesday" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "wednesday" : false,
  "thursday" : false,
  "friday" : false,
  "id" : 0,
  "monday" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) StandardBusinessDays to be inserted. 

     - returns: RequestBuilder<StandardBusinessDays> 
     */
    public class func addStandardBusinessDaysWithRequestBuilder(body body: StandardBusinessDays) -> RequestBuilder<StandardBusinessDays> {
        let path = "/v3.0/standardBusinessDays"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StandardBusinessDays>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a standardBusinessDays
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add an audit to 
     - parameter standardBusinessDaysAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addStandardBusinessDaysAudit(standardBusinessDaysId standardBusinessDaysId: Int32, standardBusinessDaysAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addStandardBusinessDaysAuditWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId, standardBusinessDaysAudit: standardBusinessDaysAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a standardBusinessDays
     - PUT /v3.0/standardBusinessDays/{standardBusinessDaysId}/audit/{standardBusinessDaysAudit}
     - Adds an audit to an existing standardBusinessDays.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add an audit to 
     - parameter standardBusinessDaysAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addStandardBusinessDaysAuditWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32, standardBusinessDaysAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/audit/{standardBusinessDaysAudit}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysAudit}", withString: "\(standardBusinessDaysAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a standardBusinessDays
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addStandardBusinessDaysFile(standardBusinessDaysId standardBusinessDaysId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addStandardBusinessDaysFileWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a standardBusinessDays
     - POST /v3.0/standardBusinessDays/{standardBusinessDaysId}/file/{fileName}
     - Adds a file to an existing standardBusinessDays.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addStandardBusinessDaysFileWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a standardBusinessDays by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addStandardBusinessDaysFileByURL(body body: RecordFile, standardBusinessDaysId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addStandardBusinessDaysFileByURLWithRequestBuilder(body: body, standardBusinessDaysId: standardBusinessDaysId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a standardBusinessDays by URL.
     - POST /v3.0/standardBusinessDays/{standardBusinessDaysId}/file
     - Adds a file to an existing standardBusinessDays by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addStandardBusinessDaysFileByURLWithRequestBuilder(body body: RecordFile, standardBusinessDaysId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/file"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a standardBusinessDays.
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add a tag to 
     - parameter standardBusinessDaysTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addStandardBusinessDaysTag(standardBusinessDaysId standardBusinessDaysId: Int32, standardBusinessDaysTag: String, completion: ((error: ErrorType?) -> Void)) {
        addStandardBusinessDaysTagWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId, standardBusinessDaysTag: standardBusinessDaysTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a standardBusinessDays.
     - PUT /v3.0/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}
     - Adds a tag to an existing standardBusinessDays.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to add a tag to 
     - parameter standardBusinessDaysTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addStandardBusinessDaysTagWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32, standardBusinessDaysTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysTag}", withString: "\(standardBusinessDaysTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a standardBusinessDays
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteStandardBusinessDays(standardBusinessDaysId standardBusinessDaysId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteStandardBusinessDaysWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a standardBusinessDays
     - DELETE /v3.0/standardBusinessDays/{standardBusinessDaysId}
     - Deletes the standardBusinessDays identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteStandardBusinessDaysWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a standardBusinessDays.
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteStandardBusinessDaysFile(standardBusinessDaysId standardBusinessDaysId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteStandardBusinessDaysFileWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a standardBusinessDays.
     - DELETE /v3.0/standardBusinessDays/{standardBusinessDaysId}/file/{fileId}
     - Deletes an existing standardBusinessDays file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteStandardBusinessDaysFileWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a standardBusinessDays.
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to remove tag from 
     - parameter standardBusinessDaysTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteStandardBusinessDaysTag(standardBusinessDaysId standardBusinessDaysId: Int32, standardBusinessDaysTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteStandardBusinessDaysTagWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId, standardBusinessDaysTag: standardBusinessDaysTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a standardBusinessDays.
     - DELETE /v3.0/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}
     - Deletes an existing standardBusinessDays tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to remove tag from 
     - parameter standardBusinessDaysTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteStandardBusinessDaysTagWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32, standardBusinessDaysTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/tag/{standardBusinessDaysTag}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysTag}", withString: "\(standardBusinessDaysTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a standardBusinessDays by id
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateStandardBusinessDaysById(standardBusinessDaysId standardBusinessDaysId: Int32, completion: ((data: StandardBusinessDays?, error: ErrorType?) -> Void)) {
        getDuplicateStandardBusinessDaysByIdWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a standardBusinessDays by id
     - GET /v3.0/standardBusinessDays/duplicate/{standardBusinessDaysId}
     - Returns a duplicated standardBusinessDays identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sunday" : false,
  "saturday" : false,
  "tuesday" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "wednesday" : false,
  "thursday" : false,
  "friday" : false,
  "id" : 0,
  "monday" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to be duplicated. 

     - returns: RequestBuilder<StandardBusinessDays> 
     */
    public class func getDuplicateStandardBusinessDaysByIdWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32) -> RequestBuilder<StandardBusinessDays> {
        var path = "/v3.0/standardBusinessDays/duplicate/{standardBusinessDaysId}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StandardBusinessDays>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search standardBusinessDayses by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStandardBusinessDaysByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [StandardBusinessDays]?, error: ErrorType?) -> Void)) {
        getStandardBusinessDaysByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search standardBusinessDayses by filter
     - GET /v3.0/standardBusinessDays/search
     - Returns the list of standardBusinessDayses that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "sunday" : false,
  "saturday" : false,
  "tuesday" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "wednesday" : false,
  "thursday" : false,
  "friday" : false,
  "id" : 0,
  "monday" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "sunday" : false,
  "saturday" : false,
  "tuesday" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "wednesday" : false,
  "thursday" : false,
  "friday" : false,
  "id" : 0,
  "monday" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[StandardBusinessDays]> 
     */
    public class func getStandardBusinessDaysByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[StandardBusinessDays]> {
        let path = "/v3.0/standardBusinessDays/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[StandardBusinessDays]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a standardBusinessDays by id
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStandardBusinessDaysById(standardBusinessDaysId standardBusinessDaysId: Int32, completion: ((data: StandardBusinessDays?, error: ErrorType?) -> Void)) {
        getStandardBusinessDaysByIdWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a standardBusinessDays by id
     - GET /v3.0/standardBusinessDays/{standardBusinessDaysId}
     - Returns the standardBusinessDays identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sunday" : false,
  "saturday" : false,
  "tuesday" : false,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "wednesday" : false,
  "thursday" : false,
  "friday" : false,
  "id" : 0,
  "monday" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to be returned. 

     - returns: RequestBuilder<StandardBusinessDays> 
     */
    public class func getStandardBusinessDaysByIdWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32) -> RequestBuilder<StandardBusinessDays> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StandardBusinessDays>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a standardBusinessDays.
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStandardBusinessDaysFiles(standardBusinessDaysId standardBusinessDaysId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getStandardBusinessDaysFilesWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a standardBusinessDays.
     - GET /v3.0/standardBusinessDays/{standardBusinessDaysId}/file
     - Get all existing standardBusinessDays files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getStandardBusinessDaysFilesWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/file"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a standardBusinessDays.
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStandardBusinessDaysTags(standardBusinessDaysId standardBusinessDaysId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getStandardBusinessDaysTagsWithRequestBuilder(standardBusinessDaysId: standardBusinessDaysId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a standardBusinessDays.
     - GET /v3.0/standardBusinessDays/{standardBusinessDaysId}/tag
     - Get all existing standardBusinessDays tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter standardBusinessDaysId: (path) Id of the standardBusinessDays to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getStandardBusinessDaysTagsWithRequestBuilder(standardBusinessDaysId standardBusinessDaysId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/standardBusinessDays/{standardBusinessDaysId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{standardBusinessDaysId}", withString: "\(standardBusinessDaysId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a standardBusinessDays
     
     - parameter body: (body) StandardBusinessDays to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateStandardBusinessDays(body body: StandardBusinessDays, completion: ((error: ErrorType?) -> Void)) {
        updateStandardBusinessDaysWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a standardBusinessDays
     - PUT /v3.0/standardBusinessDays
     - Updates an existing standardBusinessDays using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) StandardBusinessDays to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateStandardBusinessDaysWithRequestBuilder(body body: StandardBusinessDays) -> RequestBuilder<Void> {
        let path = "/v3.0/standardBusinessDays"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
