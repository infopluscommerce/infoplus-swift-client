//
// ItemAccountCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemAccountCodeAPI: APIBase {
    /**
     Create an itemAccountCode
     
     - parameter body: (body) ItemAccountCode to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAccountCode(body body: ItemAccountCode, completion: ((data: ItemAccountCode?, error: ErrorType?) -> Void)) {
        addItemAccountCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an itemAccountCode
     - POST /beta/itemAccountCode
     - Inserts a new itemAccountCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter body: (body) ItemAccountCode to be inserted. 

     - returns: RequestBuilder<ItemAccountCode> 
     */
    public class func addItemAccountCodeWithRequestBuilder(body body: ItemAccountCode) -> RequestBuilder<ItemAccountCode> {
        let path = "/beta/itemAccountCode"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemAccountCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an itemAccountCode
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add an audit to 
     - parameter itemAccountCodeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAccountCodeAudit(itemAccountCodeId itemAccountCodeId: Int32, itemAccountCodeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemAccountCodeAuditWithRequestBuilder(itemAccountCodeId: itemAccountCodeId, itemAccountCodeAudit: itemAccountCodeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an itemAccountCode
     - PUT /beta/itemAccountCode/{itemAccountCodeId}/audit/{itemAccountCodeAudit}
     - Adds an audit to an existing itemAccountCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add an audit to 
     - parameter itemAccountCodeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemAccountCodeAuditWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32, itemAccountCodeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/audit/{itemAccountCodeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeAudit}", withString: "\(itemAccountCodeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an itemAccountCode
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAccountCodeFile(itemAccountCodeId itemAccountCodeId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addItemAccountCodeFileWithRequestBuilder(itemAccountCodeId: itemAccountCodeId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an itemAccountCode
     - POST /beta/itemAccountCode/{itemAccountCodeId}/file/{fileName}
     - Adds a file to an existing itemAccountCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemAccountCodeFileWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an itemAccountCode by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAccountCodeFileByURL(body body: RecordFile, itemAccountCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addItemAccountCodeFileByURLWithRequestBuilder(body: body, itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an itemAccountCode by URL.
     - POST /beta/itemAccountCode/{itemAccountCodeId}/file
     - Adds a file to an existing itemAccountCode by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemAccountCodeFileByURLWithRequestBuilder(body body: RecordFile, itemAccountCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an itemAccountCode.
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add a tag to 
     - parameter itemAccountCodeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAccountCodeTag(itemAccountCodeId itemAccountCodeId: Int32, itemAccountCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemAccountCodeTagWithRequestBuilder(itemAccountCodeId: itemAccountCodeId, itemAccountCodeTag: itemAccountCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an itemAccountCode.
     - PUT /beta/itemAccountCode/{itemAccountCodeId}/tag/{itemAccountCodeTag}
     - Adds a tag to an existing itemAccountCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to add a tag to 
     - parameter itemAccountCodeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemAccountCodeTagWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32, itemAccountCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/tag/{itemAccountCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeTag}", withString: "\(itemAccountCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an itemAccountCode
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemAccountCode(itemAccountCodeId itemAccountCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemAccountCodeWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an itemAccountCode
     - DELETE /beta/itemAccountCode/{itemAccountCodeId}
     - Deletes the itemAccountCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemAccountCodeWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an itemAccountCode.
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemAccountCodeFile(itemAccountCodeId itemAccountCodeId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemAccountCodeFileWithRequestBuilder(itemAccountCodeId: itemAccountCodeId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an itemAccountCode.
     - DELETE /beta/itemAccountCode/{itemAccountCodeId}/file/{fileId}
     - Deletes an existing itemAccountCode file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemAccountCodeFileWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an itemAccountCode.
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to remove tag from 
     - parameter itemAccountCodeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemAccountCodeTag(itemAccountCodeId itemAccountCodeId: Int32, itemAccountCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemAccountCodeTagWithRequestBuilder(itemAccountCodeId: itemAccountCodeId, itemAccountCodeTag: itemAccountCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an itemAccountCode.
     - DELETE /beta/itemAccountCode/{itemAccountCodeId}/tag/{itemAccountCodeTag}
     - Deletes an existing itemAccountCode tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to remove tag from 
     - parameter itemAccountCodeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemAccountCodeTagWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32, itemAccountCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/tag/{itemAccountCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeTag}", withString: "\(itemAccountCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an itemAccountCode by id
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemAccountCodeById(itemAccountCodeId itemAccountCodeId: Int32, completion: ((data: ItemAccountCode?, error: ErrorType?) -> Void)) {
        getDuplicateItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an itemAccountCode by id
     - GET /beta/itemAccountCode/duplicate/{itemAccountCodeId}
     - Returns a duplicated itemAccountCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be duplicated. 

     - returns: RequestBuilder<ItemAccountCode> 
     */
    public class func getDuplicateItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32) -> RequestBuilder<ItemAccountCode> {
        var path = "/beta/itemAccountCode/duplicate/{itemAccountCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemAccountCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search itemAccountCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemAccountCodeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ItemAccountCode]?, error: ErrorType?) -> Void)) {
        getItemAccountCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search itemAccountCodes by filter
     - GET /beta/itemAccountCode/search
     - Returns the list of itemAccountCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}, {
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemAccountCode]> 
     */
    public class func getItemAccountCodeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ItemAccountCode]> {
        let path = "/beta/itemAccountCode/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ItemAccountCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an itemAccountCode by id
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemAccountCodeById(itemAccountCodeId itemAccountCodeId: Int32, completion: ((data: ItemAccountCode?, error: ErrorType?) -> Void)) {
        getItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an itemAccountCode by id
     - GET /beta/itemAccountCode/{itemAccountCodeId}
     - Returns the itemAccountCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be returned. 

     - returns: RequestBuilder<ItemAccountCode> 
     */
    public class func getItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32) -> RequestBuilder<ItemAccountCode> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemAccountCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an itemAccountCode.
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemAccountCodeFiles(itemAccountCodeId itemAccountCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemAccountCodeFilesWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an itemAccountCode.
     - GET /beta/itemAccountCode/{itemAccountCodeId}/file
     - Get all existing itemAccountCode files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemAccountCodeFilesWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an itemAccountCode.
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemAccountCodeTags(itemAccountCodeId itemAccountCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemAccountCodeTagsWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an itemAccountCode.
     - GET /beta/itemAccountCode/{itemAccountCodeId}/tag
     - Get all existing itemAccountCode tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemAccountCodeTagsWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemAccountCode/{itemAccountCodeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an itemAccountCode
     
     - parameter body: (body) ItemAccountCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemAccountCode(body body: ItemAccountCode, completion: ((error: ErrorType?) -> Void)) {
        updateItemAccountCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an itemAccountCode
     - PUT /beta/itemAccountCode
     - Updates an existing itemAccountCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemAccountCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemAccountCodeWithRequestBuilder(body body: ItemAccountCode) -> RequestBuilder<Void> {
        let path = "/beta/itemAccountCode"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
