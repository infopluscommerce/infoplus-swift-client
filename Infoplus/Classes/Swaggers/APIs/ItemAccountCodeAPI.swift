//
// ItemAccountCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemAccountCodeAPI: APIBase {
    /**
     
     Create an itemAccountCode
     
     - parameter body: (body) ItemAccountCode to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAccountCode(body body: ItemAccountCode, completion: ((data: ItemAccountCode?, error: ErrorType?) -> Void)) {
        addItemAccountCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an itemAccountCode
     
     - POST /v2.0/itemAccountCode
     - Inserts a new itemAccountCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter body: (body) ItemAccountCode to be inserted. 

     - returns: RequestBuilder<ItemAccountCode> 
     */
    public class func addItemAccountCodeWithRequestBuilder(body body: ItemAccountCode) -> RequestBuilder<ItemAccountCode> {
        let path = "/v2.0/itemAccountCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ItemAccountCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an itemAccountCode
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemAccountCode(itemAccountCodeId itemAccountCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteItemAccountCodeWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an itemAccountCode
     
     - DELETE /v2.0/itemAccountCode/{itemAccountCodeId}
     - Deletes the itemAccountCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemAccountCodeWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/itemAccountCode/{itemAccountCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated an itemAccountCode by id
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemAccountCodeById(itemAccountCodeId itemAccountCodeId: Int, completion: ((data: ItemAccountCode?, error: ErrorType?) -> Void)) {
        getDuplicateItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an itemAccountCode by id
     
     - GET /v2.0/itemAccountCode/duplicate/{itemAccountCodeId}
     - Returns a duplicated itemAccountCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be duplicated. 

     - returns: RequestBuilder<ItemAccountCode> 
     */
    public class func getDuplicateItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int) -> RequestBuilder<ItemAccountCode> {
        var path = "/v2.0/itemAccountCode/duplicate/{itemAccountCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemAccountCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search itemAccountCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemAccountCodeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ItemAccountCode]?, error: ErrorType?) -> Void)) {
        getItemAccountCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search itemAccountCodes by filter
     
     - GET /v2.0/itemAccountCode/search
     - Returns the list of itemAccountCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemAccountCode]> 
     */
    public class func getItemAccountCodeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ItemAccountCode]> {
        let path = "/v2.0/itemAccountCode/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ItemAccountCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an itemAccountCode by id
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemAccountCodeById(itemAccountCodeId itemAccountCodeId: Int, completion: ((data: ItemAccountCode?, error: ErrorType?) -> Void)) {
        getItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId: itemAccountCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an itemAccountCode by id
     
     - GET /v2.0/itemAccountCode/{itemAccountCodeId}
     - Returns the itemAccountCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemAccountCodeId: (path) Id of the itemAccountCode to be returned. 

     - returns: RequestBuilder<ItemAccountCode> 
     */
    public class func getItemAccountCodeByIdWithRequestBuilder(itemAccountCodeId itemAccountCodeId: Int) -> RequestBuilder<ItemAccountCode> {
        var path = "/v2.0/itemAccountCode/{itemAccountCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemAccountCodeId}", withString: "\(itemAccountCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemAccountCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an itemAccountCode
     
     - parameter body: (body) ItemAccountCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemAccountCode(body body: ItemAccountCode, completion: ((error: ErrorType?) -> Void)) {
        updateItemAccountCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an itemAccountCode
     
     - PUT /v2.0/itemAccountCode
     - Updates an existing itemAccountCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemAccountCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemAccountCodeWithRequestBuilder(body body: ItemAccountCode) -> RequestBuilder<Void> {
        let path = "/v2.0/itemAccountCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
