//
// LoadContentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class LoadContentAPI: APIBase {
    /**
     Add new audit for a loadContent
     
     - parameter loadContentId: (path) Id of the loadContent to add an audit to 
     - parameter loadContentAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadContentAudit(loadContentId loadContentId: Int32, loadContentAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addLoadContentAuditWithRequestBuilder(loadContentId: loadContentId, loadContentAudit: loadContentAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a loadContent
     - PUT /beta/loadContent/{loadContentId}/audit/{loadContentAudit}
     - Adds an audit to an existing loadContent.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to add an audit to 
     - parameter loadContentAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadContentAuditWithRequestBuilder(loadContentId loadContentId: Int32, loadContentAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/audit/{loadContentAudit}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{loadContentAudit}", withString: "\(loadContentAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a loadContent
     
     - parameter loadContentId: (path) Id of the loadContent to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadContentFile(loadContentId loadContentId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addLoadContentFileWithRequestBuilder(loadContentId: loadContentId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a loadContent
     - POST /beta/loadContent/{loadContentId}/file/{fileName}
     - Adds a file to an existing loadContent.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadContentFileWithRequestBuilder(loadContentId loadContentId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a loadContent by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter loadContentId: (path) Id of the loadContent to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadContentFileByURL(body body: RecordFile, loadContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addLoadContentFileByURLWithRequestBuilder(body: body, loadContentId: loadContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a loadContent by URL.
     - POST /beta/loadContent/{loadContentId}/file
     - Adds a file to an existing loadContent by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter loadContentId: (path) Id of the loadContent to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadContentFileByURLWithRequestBuilder(body body: RecordFile, loadContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a loadContent.
     
     - parameter loadContentId: (path) Id of the loadContent to add a tag to 
     - parameter loadContentTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadContentTag(loadContentId loadContentId: Int32, loadContentTag: String, completion: ((error: ErrorType?) -> Void)) {
        addLoadContentTagWithRequestBuilder(loadContentId: loadContentId, loadContentTag: loadContentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a loadContent.
     - PUT /beta/loadContent/{loadContentId}/tag/{loadContentTag}
     - Adds a tag to an existing loadContent.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to add a tag to 
     - parameter loadContentTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadContentTagWithRequestBuilder(loadContentId loadContentId: Int32, loadContentTag: String) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/tag/{loadContentTag}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{loadContentTag}", withString: "\(loadContentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a loadContent.
     
     - parameter loadContentId: (path) Id of the loadContent to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteLoadContentFile(loadContentId loadContentId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteLoadContentFileWithRequestBuilder(loadContentId: loadContentId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a loadContent.
     - DELETE /beta/loadContent/{loadContentId}/file/{fileId}
     - Deletes an existing loadContent file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteLoadContentFileWithRequestBuilder(loadContentId loadContentId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a loadContent.
     
     - parameter loadContentId: (path) Id of the loadContent to remove tag from 
     - parameter loadContentTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteLoadContentTag(loadContentId loadContentId: Int32, loadContentTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteLoadContentTagWithRequestBuilder(loadContentId: loadContentId, loadContentTag: loadContentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a loadContent.
     - DELETE /beta/loadContent/{loadContentId}/tag/{loadContentTag}
     - Deletes an existing loadContent tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to remove tag from 
     - parameter loadContentTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteLoadContentTagWithRequestBuilder(loadContentId loadContentId: Int32, loadContentTag: String) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/tag/{loadContentTag}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{loadContentTag}", withString: "\(loadContentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a loadContent by id
     
     - parameter loadContentId: (path) Id of the loadContent to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateLoadContentById(loadContentId loadContentId: Int32, completion: ((data: LoadContent?, error: ErrorType?) -> Void)) {
        getDuplicateLoadContentByIdWithRequestBuilder(loadContentId: loadContentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a loadContent by id
     - GET /beta/loadContent/duplicate/{loadContentId}
     - Returns a duplicated loadContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "itemId" : 2,
  "quantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "loadId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 5,
  "id" : 0,
  "masterCartonId" : 1,
  "itemReceiptId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
}}]
     
     - parameter loadContentId: (path) Id of the loadContent to be duplicated. 

     - returns: RequestBuilder<LoadContent> 
     */
    public class func getDuplicateLoadContentByIdWithRequestBuilder(loadContentId loadContentId: Int32) -> RequestBuilder<LoadContent> {
        var path = "/beta/loadContent/duplicate/{loadContentId}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LoadContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search loadContents by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadContentByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [LoadContent]?, error: ErrorType?) -> Void)) {
        getLoadContentByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search loadContents by filter
     - GET /beta/loadContent/search
     - Returns the list of loadContents that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "itemId" : 2,
  "quantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "loadId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 5,
  "id" : 0,
  "masterCartonId" : 1,
  "itemReceiptId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
}, {
  "itemId" : 2,
  "quantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "loadId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 5,
  "id" : 0,
  "masterCartonId" : 1,
  "itemReceiptId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[LoadContent]> 
     */
    public class func getLoadContentByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[LoadContent]> {
        let path = "/beta/loadContent/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[LoadContent]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a loadContent by id
     
     - parameter loadContentId: (path) Id of the loadContent to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadContentById(loadContentId loadContentId: Int32, completion: ((data: LoadContent?, error: ErrorType?) -> Void)) {
        getLoadContentByIdWithRequestBuilder(loadContentId: loadContentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a loadContent by id
     - GET /beta/loadContent/{loadContentId}
     - Returns the loadContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "itemId" : 2,
  "quantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "loadId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 5,
  "id" : 0,
  "masterCartonId" : 1,
  "itemReceiptId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
}}]
     
     - parameter loadContentId: (path) Id of the loadContent to be returned. 

     - returns: RequestBuilder<LoadContent> 
     */
    public class func getLoadContentByIdWithRequestBuilder(loadContentId loadContentId: Int32) -> RequestBuilder<LoadContent> {
        var path = "/beta/loadContent/{loadContentId}"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LoadContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a loadContent.
     
     - parameter loadContentId: (path) Id of the loadContent to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadContentFiles(loadContentId loadContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getLoadContentFilesWithRequestBuilder(loadContentId: loadContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a loadContent.
     - GET /beta/loadContent/{loadContentId}/file
     - Get all existing loadContent files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getLoadContentFilesWithRequestBuilder(loadContentId loadContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a loadContent.
     
     - parameter loadContentId: (path) Id of the loadContent to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadContentTags(loadContentId loadContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getLoadContentTagsWithRequestBuilder(loadContentId: loadContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a loadContent.
     - GET /beta/loadContent/{loadContentId}/tag
     - Get all existing loadContent tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadContentId: (path) Id of the loadContent to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getLoadContentTagsWithRequestBuilder(loadContentId loadContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/loadContent/{loadContentId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{loadContentId}", withString: "\(loadContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a loadContent custom fields
     
     - parameter body: (body) LoadContent to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateLoadContentCustomFields(body body: LoadContent, completion: ((error: ErrorType?) -> Void)) {
        updateLoadContentCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a loadContent custom fields
     - PUT /beta/loadContent/customFields
     - Updates an existing loadContent custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) LoadContent to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateLoadContentCustomFieldsWithRequestBuilder(body body: LoadContent) -> RequestBuilder<Void> {
        let path = "/beta/loadContent/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
