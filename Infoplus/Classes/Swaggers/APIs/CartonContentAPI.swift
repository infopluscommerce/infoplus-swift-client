//
// CartonContentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartonContentAPI: APIBase {
    /**
     Create a cartonContent
     
     - parameter body: (body) CartonContent to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonContent(body body: CartonContent, completion: ((data: CartonContent?, error: ErrorType?) -> Void)) {
        addCartonContentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a cartonContent
     - POST /beta/cartonContent
     - Inserts a new cartonContent using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "quantity" : 7,
  "toteId" : "toteId",
  "lineItemId" : 2,
  "customFields" : {
    "key" : "{}"
  },
  "quantityScanned" : 9,
  "cartonId" : 5,
  "completed" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 5,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "location" : "location",
  "id" : 0,
  "sku" : "sku",
  "pickerId" : "pickerId",
  "status" : "status",
  "lobId" : 3
}}]
     
     - parameter body: (body) CartonContent to be inserted. 

     - returns: RequestBuilder<CartonContent> 
     */
    public class func addCartonContentWithRequestBuilder(body body: CartonContent) -> RequestBuilder<CartonContent> {
        let path = "/beta/cartonContent"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CartonContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a cartonContent
     
     - parameter cartonContentId: (path) Id of the cartonContent to add an audit to 
     - parameter cartonContentAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonContentAudit(cartonContentId cartonContentId: Int32, cartonContentAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addCartonContentAuditWithRequestBuilder(cartonContentId: cartonContentId, cartonContentAudit: cartonContentAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a cartonContent
     - PUT /beta/cartonContent/{cartonContentId}/audit/{cartonContentAudit}
     - Adds an audit to an existing cartonContent.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to add an audit to 
     - parameter cartonContentAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonContentAuditWithRequestBuilder(cartonContentId cartonContentId: Int32, cartonContentAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/audit/{cartonContentAudit}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cartonContentAudit}", withString: "\(cartonContentAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a cartonContent
     
     - parameter cartonContentId: (path) Id of the cartonContent to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonContentFile(cartonContentId cartonContentId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addCartonContentFileWithRequestBuilder(cartonContentId: cartonContentId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a cartonContent
     - POST /beta/cartonContent/{cartonContentId}/file/{fileName}
     - Adds a file to an existing cartonContent.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonContentFileWithRequestBuilder(cartonContentId cartonContentId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a cartonContent by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter cartonContentId: (path) Id of the cartonContent to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonContentFileByURL(body body: RecordFile, cartonContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addCartonContentFileByURLWithRequestBuilder(body: body, cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a cartonContent by URL.
     - POST /beta/cartonContent/{cartonContentId}/file
     - Adds a file to an existing cartonContent by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter cartonContentId: (path) Id of the cartonContent to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonContentFileByURLWithRequestBuilder(body body: RecordFile, cartonContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a cartonContent.
     
     - parameter cartonContentId: (path) Id of the cartonContent to add a tag to 
     - parameter cartonContentTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonContentTag(cartonContentId cartonContentId: Int32, cartonContentTag: String, completion: ((error: ErrorType?) -> Void)) {
        addCartonContentTagWithRequestBuilder(cartonContentId: cartonContentId, cartonContentTag: cartonContentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a cartonContent.
     - PUT /beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}
     - Adds a tag to an existing cartonContent.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to add a tag to 
     - parameter cartonContentTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonContentTagWithRequestBuilder(cartonContentId cartonContentId: Int32, cartonContentTag: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cartonContentTag}", withString: "\(cartonContentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a cartonContent
     
     - parameter cartonContentId: (path) Id of the cartonContent to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCartonContent(cartonContentId cartonContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonContentWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a cartonContent
     - DELETE /beta/cartonContent/{cartonContentId}
     - Deletes the cartonContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonContentWithRequestBuilder(cartonContentId cartonContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a cartonContent.
     
     - parameter cartonContentId: (path) Id of the cartonContent to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCartonContentFile(cartonContentId cartonContentId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonContentFileWithRequestBuilder(cartonContentId: cartonContentId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a cartonContent.
     - DELETE /beta/cartonContent/{cartonContentId}/file/{fileId}
     - Deletes an existing cartonContent file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonContentFileWithRequestBuilder(cartonContentId cartonContentId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a cartonContent.
     
     - parameter cartonContentId: (path) Id of the cartonContent to remove tag from 
     - parameter cartonContentTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCartonContentTag(cartonContentId cartonContentId: Int32, cartonContentTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonContentTagWithRequestBuilder(cartonContentId: cartonContentId, cartonContentTag: cartonContentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a cartonContent.
     - DELETE /beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}
     - Deletes an existing cartonContent tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to remove tag from 
     - parameter cartonContentTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonContentTagWithRequestBuilder(cartonContentId cartonContentId: Int32, cartonContentTag: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/tag/{cartonContentTag}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cartonContentTag}", withString: "\(cartonContentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search cartonContents by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonContentByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [CartonContent]?, error: ErrorType?) -> Void)) {
        getCartonContentByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search cartonContents by filter
     - GET /beta/cartonContent/search
     - Returns the list of cartonContents that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "quantity" : 7,
  "toteId" : "toteId",
  "lineItemId" : 2,
  "customFields" : {
    "key" : "{}"
  },
  "quantityScanned" : 9,
  "cartonId" : 5,
  "completed" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 5,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "location" : "location",
  "id" : 0,
  "sku" : "sku",
  "pickerId" : "pickerId",
  "status" : "status",
  "lobId" : 3
}, {
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "quantity" : 7,
  "toteId" : "toteId",
  "lineItemId" : 2,
  "customFields" : {
    "key" : "{}"
  },
  "quantityScanned" : 9,
  "cartonId" : 5,
  "completed" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 5,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "location" : "location",
  "id" : 0,
  "sku" : "sku",
  "pickerId" : "pickerId",
  "status" : "status",
  "lobId" : 3
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[CartonContent]> 
     */
    public class func getCartonContentByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[CartonContent]> {
        let path = "/beta/cartonContent/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[CartonContent]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a cartonContent by id
     
     - parameter cartonContentId: (path) Id of the cartonContent to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonContentById(cartonContentId cartonContentId: Int32, completion: ((data: CartonContent?, error: ErrorType?) -> Void)) {
        getCartonContentByIdWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a cartonContent by id
     - GET /beta/cartonContent/{cartonContentId}
     - Returns the cartonContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "quantity" : 7,
  "toteId" : "toteId",
  "lineItemId" : 2,
  "customFields" : {
    "key" : "{}"
  },
  "quantityScanned" : 9,
  "cartonId" : 5,
  "completed" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 5,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "location" : "location",
  "id" : 0,
  "sku" : "sku",
  "pickerId" : "pickerId",
  "status" : "status",
  "lobId" : 3
}}]
     
     - parameter cartonContentId: (path) Id of the cartonContent to be returned. 

     - returns: RequestBuilder<CartonContent> 
     */
    public class func getCartonContentByIdWithRequestBuilder(cartonContentId cartonContentId: Int32) -> RequestBuilder<CartonContent> {
        var path = "/beta/cartonContent/{cartonContentId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CartonContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a cartonContent.
     
     - parameter cartonContentId: (path) Id of the cartonContent to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonContentFiles(cartonContentId cartonContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCartonContentFilesWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a cartonContent.
     - GET /beta/cartonContent/{cartonContentId}/file
     - Get all existing cartonContent files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCartonContentFilesWithRequestBuilder(cartonContentId cartonContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a cartonContent.
     
     - parameter cartonContentId: (path) Id of the cartonContent to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonContentTags(cartonContentId cartonContentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCartonContentTagsWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a cartonContent.
     - GET /beta/cartonContent/{cartonContentId}/tag
     - Get all existing cartonContent tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCartonContentTagsWithRequestBuilder(cartonContentId cartonContentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonContent/{cartonContentId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a cartonContent by id
     
     - parameter cartonContentId: (path) Id of the cartonContent to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateCartonContentById(cartonContentId cartonContentId: Int32, completion: ((data: CartonContent?, error: ErrorType?) -> Void)) {
        getDuplicateCartonContentByIdWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a cartonContent by id
     - GET /beta/cartonContent/duplicate/{cartonContentId}
     - Returns a duplicated cartonContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "quantity" : 7,
  "toteId" : "toteId",
  "lineItemId" : 2,
  "customFields" : {
    "key" : "{}"
  },
  "quantityScanned" : 9,
  "cartonId" : 5,
  "completed" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 5,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "location" : "location",
  "id" : 0,
  "sku" : "sku",
  "pickerId" : "pickerId",
  "status" : "status",
  "lobId" : 3
}}]
     
     - parameter cartonContentId: (path) Id of the cartonContent to be duplicated. 

     - returns: RequestBuilder<CartonContent> 
     */
    public class func getDuplicateCartonContentByIdWithRequestBuilder(cartonContentId cartonContentId: Int32) -> RequestBuilder<CartonContent> {
        var path = "/beta/cartonContent/duplicate/{cartonContentId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CartonContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a cartonContent
     
     - parameter body: (body) CartonContent to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCartonContent(body body: CartonContent, completion: ((error: ErrorType?) -> Void)) {
        updateCartonContentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a cartonContent
     - PUT /beta/cartonContent
     - Updates an existing cartonContent using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) CartonContent to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCartonContentWithRequestBuilder(body body: CartonContent) -> RequestBuilder<Void> {
        let path = "/beta/cartonContent"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a cartonContent custom fields
     
     - parameter body: (body) CartonContent to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCartonContentCustomFields(body body: CartonContent, completion: ((error: ErrorType?) -> Void)) {
        updateCartonContentCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a cartonContent custom fields
     - PUT /beta/cartonContent/customFields
     - Updates an existing cartonContent custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) CartonContent to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCartonContentCustomFieldsWithRequestBuilder(body body: CartonContent) -> RequestBuilder<Void> {
        let path = "/beta/cartonContent/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
