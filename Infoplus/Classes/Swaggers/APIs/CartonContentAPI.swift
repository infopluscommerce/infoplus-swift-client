//
// CartonContentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartonContentAPI: APIBase {
    /**
     
     Create a cartonContent
     
     - parameter body: (body) CartonContent to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonContent(body body: CartonContent, completion: ((data: CartonContent?, error: ErrorType?) -> Void)) {
        addCartonContentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a cartonContent
     
     - POST /v1.0/cartonContent
     - Inserts a new cartonContent using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonNoId" : 123,
  "groupOrderId" : 1.3579000000000001069366817318950779736042022705078125,
  "orderNo" : 1.3579000000000001069366817318950779736042022705078125,
  "quantity" : 123,
  "toteId" : "aeiou",
  "lineItemId" : 123,
  "quantityScanned" : 123,
  "location" : "aeiou",
  "id" : 123,
  "completed" : "2000-01-23T04:56:07.000+0000",
  "pickerId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) CartonContent to be inserted. 

     - returns: RequestBuilder<CartonContent> 
     */
    public class func addCartonContentWithRequestBuilder(body body: CartonContent) -> RequestBuilder<CartonContent> {
        let path = "/v1.0/cartonContent"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<CartonContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a cartonContent
     
     - parameter cartonContentId: (path) Id of the cartonContent to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCartonContent(cartonContentId cartonContentId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonContentWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a cartonContent
     
     - DELETE /v1.0/cartonContent/{cartonContentId}
     - Deletes the cartonContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonContentId: (path) Id of the cartonContent to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonContentWithRequestBuilder(cartonContentId cartonContentId: Int) -> RequestBuilder<Void> {
        var path = "/v1.0/cartonContent/{cartonContentId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search cartonContents by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonContentByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [CartonContent]?, error: ErrorType?) -> Void)) {
        getCartonContentByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search cartonContents by filter
     
     - GET /v1.0/cartonContent/search
     - Returns the list of cartonContents that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "cartonNoId" : 123,
  "groupOrderId" : 1.3579000000000001069366817318950779736042022705078125,
  "orderNo" : 1.3579000000000001069366817318950779736042022705078125,
  "quantity" : 123,
  "toteId" : "aeiou",
  "lineItemId" : 123,
  "quantityScanned" : 123,
  "location" : "aeiou",
  "id" : 123,
  "completed" : "2000-01-23T04:56:07.000+0000",
  "pickerId" : "aeiou",
  "status" : "aeiou"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[CartonContent]> 
     */
    public class func getCartonContentByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[CartonContent]> {
        let path = "/v1.0/cartonContent/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[CartonContent]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a cartonContent by id
     
     - parameter cartonContentId: (path) Id of the cartonContent to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonContentById(cartonContentId cartonContentId: Int, completion: ((data: CartonContent?, error: ErrorType?) -> Void)) {
        getCartonContentByIdWithRequestBuilder(cartonContentId: cartonContentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a cartonContent by id
     
     - GET /v1.0/cartonContent/{cartonContentId}
     - Returns the cartonContent identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonNoId" : 123,
  "groupOrderId" : 1.3579000000000001069366817318950779736042022705078125,
  "orderNo" : 1.3579000000000001069366817318950779736042022705078125,
  "quantity" : 123,
  "toteId" : "aeiou",
  "lineItemId" : 123,
  "quantityScanned" : 123,
  "location" : "aeiou",
  "id" : 123,
  "completed" : "2000-01-23T04:56:07.000+0000",
  "pickerId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter cartonContentId: (path) Id of the cartonContent to be returned. 

     - returns: RequestBuilder<CartonContent> 
     */
    public class func getCartonContentByIdWithRequestBuilder(cartonContentId cartonContentId: Int) -> RequestBuilder<CartonContent> {
        var path = "/v1.0/cartonContent/{cartonContentId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonContentId}", withString: "\(cartonContentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<CartonContent>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a cartonContent
     
     - parameter body: (body) CartonContent to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCartonContent(body body: CartonContent, completion: ((error: ErrorType?) -> Void)) {
        updateCartonContentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a cartonContent
     
     - PUT /v1.0/cartonContent
     - Updates an existing cartonContent using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) CartonContent to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCartonContentWithRequestBuilder(body body: CartonContent) -> RequestBuilder<Void> {
        let path = "/v1.0/cartonContent"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
