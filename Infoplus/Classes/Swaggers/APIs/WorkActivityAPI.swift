//
// WorkActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WorkActivityAPI: APIBase {
    /**
     Create a workActivity
     
     - parameter body: (body) WorkActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivity(body body: WorkActivity, completion: ((data: WorkActivity?, error: ErrorType?) -> Void)) {
        addWorkActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a workActivity
     - POST /beta/workActivity
     - Inserts a new workActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "destinationBillingTypeName" : "destinationBillingTypeName",
  "alcoholTypeId" : 4,
  "destinationBuildingId" : 6,
  "type" : "type",
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "sourceOrigin" : 1,
  "lowStockContactId" : 9,
  "alcoholContainerVolume" : 1,
  "destinationCost" : 6,
  "absoluteMax" : "absoluteMax",
  "numberOfWraps" : 3,
  "criticalAmount" : 4,
  "alcoholContent" : 8.863729185622826634016746538691222667694091796875,
  "unitCode" : "unitCode",
  "numberOfCases" : 7,
  "id" : 0,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "productCodeId" : 5,
  "sourceBuildingName" : "sourceBuildingName",
  "sourceFootprintName" : "sourceFootprintName",
  "maxCycle" : 3,
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "sourceZoneId" : 4,
  "extrinsicNumber2" : 1,
  "extrinsicNumber1" : 2,
  "alcoholCountryId" : 3,
  "extrinsicText1" : "extrinsicText1",
  "sourceCost" : 8,
  "chargeRate" : 8.761432466225475224064211943186819553375244140625,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "alcoholUPCCode" : "alcoholUPCCode",
  "destinationOrigin" : 1,
  "sourceAisleId" : 7,
  "sourceBay" : 9,
  "classRestriction" : "classRestriction",
  "overallLeadTime" : 6,
  "status" : "status",
  "sourceFootprintDepth" : 1,
  "legacyLowLevelContactId" : 0,
  "seasonalItem" : "seasonalItem",
  "overallFixedReorderPoint" : 4,
  "destinationBay" : 7,
  "typeName" : "typeName",
  "destinationAllowItemMixing" : false,
  "masterRef" : 0,
  "serialCode" : "serialCode",
  "extrinsicDecimal2" : 6.623518433804886029747649445198476314544677734375,
  "maxInterim" : 4,
  "wrapCode" : "wrapCode",
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 9,
  "alcoholBrand" : "alcoholBrand",
  "statusName" : "statusName",
  "destinationBehaviorType" : "destinationBehaviorType",
  "majorGroupId" : 0,
  "email" : "email",
  "lotControlFlag" : "lotControlFlag",
  "extrinsicDecimal1" : 8.289659398142969592981899040751159191131591796875,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "workParentId" : 2,
  "podOrderSuffix" : 1,
  "destinationAisleAddress" : "destinationAisleAddress",
  "destinationBuildingName" : "destinationBuildingName",
  "destinationAddressSchemeName" : "destinationAddressSchemeName",
  "destinationFootprintName" : "destinationFootprintName",
  "destinationWarehouseName" : "destinationWarehouseName",
  "sourceWarehouseName" : "sourceWarehouseName",
  "userId" : 5,
  "billingQuantity" : 9.1831235947739937586220548837445676326751708984375,
  "sourceBillingTypeId" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "destinationFootprintHeight" : 6,
  "summaryCodeId" : 7,
  "priorityCode" : 7,
  "sourceAisleAddress" : "sourceAisleAddress",
  "listPrice" : 3.901545264248647004734493748401291668415069580078125,
  "sourceOriginName" : "sourceOriginName",
  "sourceBehaviorType" : "sourceBehaviorType",
  "weightPerWrap" : 4.6523964329332461176136348512955009937286376953125,
  "destinationAddressSchemeId" : 3,
  "sourceAllowItemMixing" : false,
  "destinationBillingTypeId" : 2,
  "secure" : "secure",
  "buyerId" : 4,
  "sourceBehaviorTypeName" : "sourceBehaviorTypeName",
  "destinationAisleId" : 6,
  "qualityControlIndicator" : "qualityControlIndicator",
  "workBatchId" : 5,
  "podRevDate" : "podRevDate",
  "sourceFootprintHeight" : 6,
  "pickTouches" : 5,
  "itemDescription" : "itemDescription",
  "sector" : "sector",
  "destinationPriorityCode" : 7,
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "commodityCodeId" : 6,
  "assetCode" : "assetCode",
  "packingSlipDescription" : "packingSlipDescription",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOnline" : false,
  "compCode" : 8,
  "destinationNumber" : 0,
  "alcoholContainerId" : 9,
  "importedRecordId" : 6,
  "foreignId" : 9,
  "backorder" : "backorder",
  "outsideVendor" : 0,
  "sourceOnline" : false,
  "subGroupId" : 7,
  "workCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOriginName" : "destinationOriginName",
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 0.4182561061793121925944660688401199877262115478515625,
  "chargeCode" : "chargeCode",
  "sourceAddressSchemeName" : "sourceAddressSchemeName",
  "destinationWarehouseId" : 9,
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "sourceBillingTypeName",
  "destinationLocation" : "destinationLocation",
  "sourceAddressSchemeId" : 4,
  "sourceLevel" : 5,
  "sourceFootprintWidth" : 7,
  "destinationLevel" : 3,
  "sourceZoneName" : "sourceZoneName",
  "itemStatus" : "itemStatus",
  "pickNo" : "pickNo",
  "destinationFootprintWidth" : 5,
  "productType" : 0,
  "workModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "unitsPerWrap" : 7,
  "destinationZoneName" : "destinationZoneName",
  "quantity" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "accountCodeId" : 4,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "destinationZoneId" : 3,
  "sourceNumber" : 9,
  "destinationFootprintDepth" : 6,
  "sourcePriorityCode" : 6,
  "vendorSKU" : "vendorSKU",
  "sourceFootprintId" : 1,
  "sourceWarehouseId" : 3,
  "sourceBuildingId" : 2,
  "productCodeFlag" : "productCodeFlag",
  "destinationBehaviorTypeName" : "destinationBehaviorTypeName",
  "sourceLocation" : "sourceLocation",
  "destinationFootprintId" : 6,
  "numericSortOrder" : 8
}}]
     
     - parameter body: (body) WorkActivity to be inserted. 

     - returns: RequestBuilder<WorkActivity> 
     */
    public class func addWorkActivityWithRequestBuilder(body body: WorkActivity) -> RequestBuilder<WorkActivity> {
        let path = "/beta/workActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WorkActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a workActivity
     
     - parameter workActivityId: (path) Id of the workActivity to add an audit to 
     - parameter workActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivityAudit(workActivityId workActivityId: Int32, workActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addWorkActivityAuditWithRequestBuilder(workActivityId: workActivityId, workActivityAudit: workActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a workActivity
     - PUT /beta/workActivity/{workActivityId}/audit/{workActivityAudit}
     - Adds an audit to an existing workActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to add an audit to 
     - parameter workActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWorkActivityAuditWithRequestBuilder(workActivityId workActivityId: Int32, workActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/audit/{workActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{workActivityAudit}", withString: "\(workActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a workActivity
     
     - parameter workActivityId: (path) Id of the workActivity to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivityFile(workActivityId workActivityId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addWorkActivityFileWithRequestBuilder(workActivityId: workActivityId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a workActivity
     - POST /beta/workActivity/{workActivityId}/file/{fileName}
     - Adds a file to an existing workActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addWorkActivityFileWithRequestBuilder(workActivityId workActivityId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a workActivity by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter workActivityId: (path) Id of the workActivity to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivityFileByURL(body body: RecordFile, workActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addWorkActivityFileByURLWithRequestBuilder(body: body, workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a workActivity by URL.
     - POST /beta/workActivity/{workActivityId}/file
     - Adds a file to an existing workActivity by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter workActivityId: (path) Id of the workActivity to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addWorkActivityFileByURLWithRequestBuilder(body body: RecordFile, workActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/file"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to add a tag to 
     - parameter workActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivityTag(workActivityId workActivityId: Int32, workActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addWorkActivityTagWithRequestBuilder(workActivityId: workActivityId, workActivityTag: workActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a workActivity.
     - PUT /beta/workActivity/{workActivityId}/tag/{workActivityTag}
     - Adds a tag to an existing workActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to add a tag to 
     - parameter workActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWorkActivityTagWithRequestBuilder(workActivityId workActivityId: Int32, workActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{workActivityTag}", withString: "\(workActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a workActivity
     
     - parameter workActivityId: (path) Id of the workActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWorkActivity(workActivityId workActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteWorkActivityWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a workActivity
     - DELETE /beta/workActivity/{workActivityId}
     - Deletes the workActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWorkActivityWithRequestBuilder(workActivityId workActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWorkActivityFile(workActivityId workActivityId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteWorkActivityFileWithRequestBuilder(workActivityId: workActivityId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a workActivity.
     - DELETE /beta/workActivity/{workActivityId}/file/{fileId}
     - Deletes an existing workActivity file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWorkActivityFileWithRequestBuilder(workActivityId workActivityId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to remove tag from 
     - parameter workActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWorkActivityTag(workActivityId workActivityId: Int32, workActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWorkActivityTagWithRequestBuilder(workActivityId: workActivityId, workActivityTag: workActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a workActivity.
     - DELETE /beta/workActivity/{workActivityId}/tag/{workActivityTag}
     - Deletes an existing workActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to remove tag from 
     - parameter workActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWorkActivityTagWithRequestBuilder(workActivityId workActivityId: Int32, workActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{workActivityTag}", withString: "\(workActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a workActivity by id
     
     - parameter workActivityId: (path) Id of the workActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateWorkActivityById(workActivityId workActivityId: Int32, completion: ((data: WorkActivity?, error: ErrorType?) -> Void)) {
        getDuplicateWorkActivityByIdWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a workActivity by id
     - GET /beta/workActivity/duplicate/{workActivityId}
     - Returns a duplicated workActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "destinationBillingTypeName" : "destinationBillingTypeName",
  "alcoholTypeId" : 4,
  "destinationBuildingId" : 6,
  "type" : "type",
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "sourceOrigin" : 1,
  "lowStockContactId" : 9,
  "alcoholContainerVolume" : 1,
  "destinationCost" : 6,
  "absoluteMax" : "absoluteMax",
  "numberOfWraps" : 3,
  "criticalAmount" : 4,
  "alcoholContent" : 8.863729185622826634016746538691222667694091796875,
  "unitCode" : "unitCode",
  "numberOfCases" : 7,
  "id" : 0,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "productCodeId" : 5,
  "sourceBuildingName" : "sourceBuildingName",
  "sourceFootprintName" : "sourceFootprintName",
  "maxCycle" : 3,
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "sourceZoneId" : 4,
  "extrinsicNumber2" : 1,
  "extrinsicNumber1" : 2,
  "alcoholCountryId" : 3,
  "extrinsicText1" : "extrinsicText1",
  "sourceCost" : 8,
  "chargeRate" : 8.761432466225475224064211943186819553375244140625,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "alcoholUPCCode" : "alcoholUPCCode",
  "destinationOrigin" : 1,
  "sourceAisleId" : 7,
  "sourceBay" : 9,
  "classRestriction" : "classRestriction",
  "overallLeadTime" : 6,
  "status" : "status",
  "sourceFootprintDepth" : 1,
  "legacyLowLevelContactId" : 0,
  "seasonalItem" : "seasonalItem",
  "overallFixedReorderPoint" : 4,
  "destinationBay" : 7,
  "typeName" : "typeName",
  "destinationAllowItemMixing" : false,
  "masterRef" : 0,
  "serialCode" : "serialCode",
  "extrinsicDecimal2" : 6.623518433804886029747649445198476314544677734375,
  "maxInterim" : 4,
  "wrapCode" : "wrapCode",
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 9,
  "alcoholBrand" : "alcoholBrand",
  "statusName" : "statusName",
  "destinationBehaviorType" : "destinationBehaviorType",
  "majorGroupId" : 0,
  "email" : "email",
  "lotControlFlag" : "lotControlFlag",
  "extrinsicDecimal1" : 8.289659398142969592981899040751159191131591796875,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "workParentId" : 2,
  "podOrderSuffix" : 1,
  "destinationAisleAddress" : "destinationAisleAddress",
  "destinationBuildingName" : "destinationBuildingName",
  "destinationAddressSchemeName" : "destinationAddressSchemeName",
  "destinationFootprintName" : "destinationFootprintName",
  "destinationWarehouseName" : "destinationWarehouseName",
  "sourceWarehouseName" : "sourceWarehouseName",
  "userId" : 5,
  "billingQuantity" : 9.1831235947739937586220548837445676326751708984375,
  "sourceBillingTypeId" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "destinationFootprintHeight" : 6,
  "summaryCodeId" : 7,
  "priorityCode" : 7,
  "sourceAisleAddress" : "sourceAisleAddress",
  "listPrice" : 3.901545264248647004734493748401291668415069580078125,
  "sourceOriginName" : "sourceOriginName",
  "sourceBehaviorType" : "sourceBehaviorType",
  "weightPerWrap" : 4.6523964329332461176136348512955009937286376953125,
  "destinationAddressSchemeId" : 3,
  "sourceAllowItemMixing" : false,
  "destinationBillingTypeId" : 2,
  "secure" : "secure",
  "buyerId" : 4,
  "sourceBehaviorTypeName" : "sourceBehaviorTypeName",
  "destinationAisleId" : 6,
  "qualityControlIndicator" : "qualityControlIndicator",
  "workBatchId" : 5,
  "podRevDate" : "podRevDate",
  "sourceFootprintHeight" : 6,
  "pickTouches" : 5,
  "itemDescription" : "itemDescription",
  "sector" : "sector",
  "destinationPriorityCode" : 7,
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "commodityCodeId" : 6,
  "assetCode" : "assetCode",
  "packingSlipDescription" : "packingSlipDescription",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOnline" : false,
  "compCode" : 8,
  "destinationNumber" : 0,
  "alcoholContainerId" : 9,
  "importedRecordId" : 6,
  "foreignId" : 9,
  "backorder" : "backorder",
  "outsideVendor" : 0,
  "sourceOnline" : false,
  "subGroupId" : 7,
  "workCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOriginName" : "destinationOriginName",
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 0.4182561061793121925944660688401199877262115478515625,
  "chargeCode" : "chargeCode",
  "sourceAddressSchemeName" : "sourceAddressSchemeName",
  "destinationWarehouseId" : 9,
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "sourceBillingTypeName",
  "destinationLocation" : "destinationLocation",
  "sourceAddressSchemeId" : 4,
  "sourceLevel" : 5,
  "sourceFootprintWidth" : 7,
  "destinationLevel" : 3,
  "sourceZoneName" : "sourceZoneName",
  "itemStatus" : "itemStatus",
  "pickNo" : "pickNo",
  "destinationFootprintWidth" : 5,
  "productType" : 0,
  "workModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "unitsPerWrap" : 7,
  "destinationZoneName" : "destinationZoneName",
  "quantity" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "accountCodeId" : 4,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "destinationZoneId" : 3,
  "sourceNumber" : 9,
  "destinationFootprintDepth" : 6,
  "sourcePriorityCode" : 6,
  "vendorSKU" : "vendorSKU",
  "sourceFootprintId" : 1,
  "sourceWarehouseId" : 3,
  "sourceBuildingId" : 2,
  "productCodeFlag" : "productCodeFlag",
  "destinationBehaviorTypeName" : "destinationBehaviorTypeName",
  "sourceLocation" : "sourceLocation",
  "destinationFootprintId" : 6,
  "numericSortOrder" : 8
}}]
     
     - parameter workActivityId: (path) Id of the workActivity to be duplicated. 

     - returns: RequestBuilder<WorkActivity> 
     */
    public class func getDuplicateWorkActivityByIdWithRequestBuilder(workActivityId workActivityId: Int32) -> RequestBuilder<WorkActivity> {
        var path = "/beta/workActivity/duplicate/{workActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WorkActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search workActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [WorkActivity]?, error: ErrorType?) -> Void)) {
        getWorkActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search workActivitys by filter
     - GET /beta/workActivity/search
     - Returns the list of workActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "destinationBillingTypeName" : "destinationBillingTypeName",
  "alcoholTypeId" : 4,
  "destinationBuildingId" : 6,
  "type" : "type",
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "sourceOrigin" : 1,
  "lowStockContactId" : 9,
  "alcoholContainerVolume" : 1,
  "destinationCost" : 6,
  "absoluteMax" : "absoluteMax",
  "numberOfWraps" : 3,
  "criticalAmount" : 4,
  "alcoholContent" : 8.863729185622826634016746538691222667694091796875,
  "unitCode" : "unitCode",
  "numberOfCases" : 7,
  "id" : 0,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "productCodeId" : 5,
  "sourceBuildingName" : "sourceBuildingName",
  "sourceFootprintName" : "sourceFootprintName",
  "maxCycle" : 3,
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "sourceZoneId" : 4,
  "extrinsicNumber2" : 1,
  "extrinsicNumber1" : 2,
  "alcoholCountryId" : 3,
  "extrinsicText1" : "extrinsicText1",
  "sourceCost" : 8,
  "chargeRate" : 8.761432466225475224064211943186819553375244140625,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "alcoholUPCCode" : "alcoholUPCCode",
  "destinationOrigin" : 1,
  "sourceAisleId" : 7,
  "sourceBay" : 9,
  "classRestriction" : "classRestriction",
  "overallLeadTime" : 6,
  "status" : "status",
  "sourceFootprintDepth" : 1,
  "legacyLowLevelContactId" : 0,
  "seasonalItem" : "seasonalItem",
  "overallFixedReorderPoint" : 4,
  "destinationBay" : 7,
  "typeName" : "typeName",
  "destinationAllowItemMixing" : false,
  "masterRef" : 0,
  "serialCode" : "serialCode",
  "extrinsicDecimal2" : 6.623518433804886029747649445198476314544677734375,
  "maxInterim" : 4,
  "wrapCode" : "wrapCode",
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 9,
  "alcoholBrand" : "alcoholBrand",
  "statusName" : "statusName",
  "destinationBehaviorType" : "destinationBehaviorType",
  "majorGroupId" : 0,
  "email" : "email",
  "lotControlFlag" : "lotControlFlag",
  "extrinsicDecimal1" : 8.289659398142969592981899040751159191131591796875,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "workParentId" : 2,
  "podOrderSuffix" : 1,
  "destinationAisleAddress" : "destinationAisleAddress",
  "destinationBuildingName" : "destinationBuildingName",
  "destinationAddressSchemeName" : "destinationAddressSchemeName",
  "destinationFootprintName" : "destinationFootprintName",
  "destinationWarehouseName" : "destinationWarehouseName",
  "sourceWarehouseName" : "sourceWarehouseName",
  "userId" : 5,
  "billingQuantity" : 9.1831235947739937586220548837445676326751708984375,
  "sourceBillingTypeId" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "destinationFootprintHeight" : 6,
  "summaryCodeId" : 7,
  "priorityCode" : 7,
  "sourceAisleAddress" : "sourceAisleAddress",
  "listPrice" : 3.901545264248647004734493748401291668415069580078125,
  "sourceOriginName" : "sourceOriginName",
  "sourceBehaviorType" : "sourceBehaviorType",
  "weightPerWrap" : 4.6523964329332461176136348512955009937286376953125,
  "destinationAddressSchemeId" : 3,
  "sourceAllowItemMixing" : false,
  "destinationBillingTypeId" : 2,
  "secure" : "secure",
  "buyerId" : 4,
  "sourceBehaviorTypeName" : "sourceBehaviorTypeName",
  "destinationAisleId" : 6,
  "qualityControlIndicator" : "qualityControlIndicator",
  "workBatchId" : 5,
  "podRevDate" : "podRevDate",
  "sourceFootprintHeight" : 6,
  "pickTouches" : 5,
  "itemDescription" : "itemDescription",
  "sector" : "sector",
  "destinationPriorityCode" : 7,
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "commodityCodeId" : 6,
  "assetCode" : "assetCode",
  "packingSlipDescription" : "packingSlipDescription",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOnline" : false,
  "compCode" : 8,
  "destinationNumber" : 0,
  "alcoholContainerId" : 9,
  "importedRecordId" : 6,
  "foreignId" : 9,
  "backorder" : "backorder",
  "outsideVendor" : 0,
  "sourceOnline" : false,
  "subGroupId" : 7,
  "workCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOriginName" : "destinationOriginName",
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 0.4182561061793121925944660688401199877262115478515625,
  "chargeCode" : "chargeCode",
  "sourceAddressSchemeName" : "sourceAddressSchemeName",
  "destinationWarehouseId" : 9,
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "sourceBillingTypeName",
  "destinationLocation" : "destinationLocation",
  "sourceAddressSchemeId" : 4,
  "sourceLevel" : 5,
  "sourceFootprintWidth" : 7,
  "destinationLevel" : 3,
  "sourceZoneName" : "sourceZoneName",
  "itemStatus" : "itemStatus",
  "pickNo" : "pickNo",
  "destinationFootprintWidth" : 5,
  "productType" : 0,
  "workModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "unitsPerWrap" : 7,
  "destinationZoneName" : "destinationZoneName",
  "quantity" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "accountCodeId" : 4,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "destinationZoneId" : 3,
  "sourceNumber" : 9,
  "destinationFootprintDepth" : 6,
  "sourcePriorityCode" : 6,
  "vendorSKU" : "vendorSKU",
  "sourceFootprintId" : 1,
  "sourceWarehouseId" : 3,
  "sourceBuildingId" : 2,
  "productCodeFlag" : "productCodeFlag",
  "destinationBehaviorTypeName" : "destinationBehaviorTypeName",
  "sourceLocation" : "sourceLocation",
  "destinationFootprintId" : 6,
  "numericSortOrder" : 8
}, {
  "destinationBillingTypeName" : "destinationBillingTypeName",
  "alcoholTypeId" : 4,
  "destinationBuildingId" : 6,
  "type" : "type",
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "sourceOrigin" : 1,
  "lowStockContactId" : 9,
  "alcoholContainerVolume" : 1,
  "destinationCost" : 6,
  "absoluteMax" : "absoluteMax",
  "numberOfWraps" : 3,
  "criticalAmount" : 4,
  "alcoholContent" : 8.863729185622826634016746538691222667694091796875,
  "unitCode" : "unitCode",
  "numberOfCases" : 7,
  "id" : 0,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "productCodeId" : 5,
  "sourceBuildingName" : "sourceBuildingName",
  "sourceFootprintName" : "sourceFootprintName",
  "maxCycle" : 3,
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "sourceZoneId" : 4,
  "extrinsicNumber2" : 1,
  "extrinsicNumber1" : 2,
  "alcoholCountryId" : 3,
  "extrinsicText1" : "extrinsicText1",
  "sourceCost" : 8,
  "chargeRate" : 8.761432466225475224064211943186819553375244140625,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "alcoholUPCCode" : "alcoholUPCCode",
  "destinationOrigin" : 1,
  "sourceAisleId" : 7,
  "sourceBay" : 9,
  "classRestriction" : "classRestriction",
  "overallLeadTime" : 6,
  "status" : "status",
  "sourceFootprintDepth" : 1,
  "legacyLowLevelContactId" : 0,
  "seasonalItem" : "seasonalItem",
  "overallFixedReorderPoint" : 4,
  "destinationBay" : 7,
  "typeName" : "typeName",
  "destinationAllowItemMixing" : false,
  "masterRef" : 0,
  "serialCode" : "serialCode",
  "extrinsicDecimal2" : 6.623518433804886029747649445198476314544677734375,
  "maxInterim" : 4,
  "wrapCode" : "wrapCode",
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 9,
  "alcoholBrand" : "alcoholBrand",
  "statusName" : "statusName",
  "destinationBehaviorType" : "destinationBehaviorType",
  "majorGroupId" : 0,
  "email" : "email",
  "lotControlFlag" : "lotControlFlag",
  "extrinsicDecimal1" : 8.289659398142969592981899040751159191131591796875,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "workParentId" : 2,
  "podOrderSuffix" : 1,
  "destinationAisleAddress" : "destinationAisleAddress",
  "destinationBuildingName" : "destinationBuildingName",
  "destinationAddressSchemeName" : "destinationAddressSchemeName",
  "destinationFootprintName" : "destinationFootprintName",
  "destinationWarehouseName" : "destinationWarehouseName",
  "sourceWarehouseName" : "sourceWarehouseName",
  "userId" : 5,
  "billingQuantity" : 9.1831235947739937586220548837445676326751708984375,
  "sourceBillingTypeId" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "destinationFootprintHeight" : 6,
  "summaryCodeId" : 7,
  "priorityCode" : 7,
  "sourceAisleAddress" : "sourceAisleAddress",
  "listPrice" : 3.901545264248647004734493748401291668415069580078125,
  "sourceOriginName" : "sourceOriginName",
  "sourceBehaviorType" : "sourceBehaviorType",
  "weightPerWrap" : 4.6523964329332461176136348512955009937286376953125,
  "destinationAddressSchemeId" : 3,
  "sourceAllowItemMixing" : false,
  "destinationBillingTypeId" : 2,
  "secure" : "secure",
  "buyerId" : 4,
  "sourceBehaviorTypeName" : "sourceBehaviorTypeName",
  "destinationAisleId" : 6,
  "qualityControlIndicator" : "qualityControlIndicator",
  "workBatchId" : 5,
  "podRevDate" : "podRevDate",
  "sourceFootprintHeight" : 6,
  "pickTouches" : 5,
  "itemDescription" : "itemDescription",
  "sector" : "sector",
  "destinationPriorityCode" : 7,
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "commodityCodeId" : 6,
  "assetCode" : "assetCode",
  "packingSlipDescription" : "packingSlipDescription",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOnline" : false,
  "compCode" : 8,
  "destinationNumber" : 0,
  "alcoholContainerId" : 9,
  "importedRecordId" : 6,
  "foreignId" : 9,
  "backorder" : "backorder",
  "outsideVendor" : 0,
  "sourceOnline" : false,
  "subGroupId" : 7,
  "workCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOriginName" : "destinationOriginName",
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 0.4182561061793121925944660688401199877262115478515625,
  "chargeCode" : "chargeCode",
  "sourceAddressSchemeName" : "sourceAddressSchemeName",
  "destinationWarehouseId" : 9,
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "sourceBillingTypeName",
  "destinationLocation" : "destinationLocation",
  "sourceAddressSchemeId" : 4,
  "sourceLevel" : 5,
  "sourceFootprintWidth" : 7,
  "destinationLevel" : 3,
  "sourceZoneName" : "sourceZoneName",
  "itemStatus" : "itemStatus",
  "pickNo" : "pickNo",
  "destinationFootprintWidth" : 5,
  "productType" : 0,
  "workModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "unitsPerWrap" : 7,
  "destinationZoneName" : "destinationZoneName",
  "quantity" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "accountCodeId" : 4,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "destinationZoneId" : 3,
  "sourceNumber" : 9,
  "destinationFootprintDepth" : 6,
  "sourcePriorityCode" : 6,
  "vendorSKU" : "vendorSKU",
  "sourceFootprintId" : 1,
  "sourceWarehouseId" : 3,
  "sourceBuildingId" : 2,
  "productCodeFlag" : "productCodeFlag",
  "destinationBehaviorTypeName" : "destinationBehaviorTypeName",
  "sourceLocation" : "sourceLocation",
  "destinationFootprintId" : 6,
  "numericSortOrder" : 8
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[WorkActivity]> 
     */
    public class func getWorkActivityByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[WorkActivity]> {
        let path = "/beta/workActivity/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[WorkActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a workActivity by id
     
     - parameter workActivityId: (path) Id of the workActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityById(workActivityId workActivityId: Int32, completion: ((data: WorkActivity?, error: ErrorType?) -> Void)) {
        getWorkActivityByIdWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a workActivity by id
     - GET /beta/workActivity/{workActivityId}
     - Returns the workActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "destinationBillingTypeName" : "destinationBillingTypeName",
  "alcoholTypeId" : 4,
  "destinationBuildingId" : 6,
  "type" : "type",
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "sourceOrigin" : 1,
  "lowStockContactId" : 9,
  "alcoholContainerVolume" : 1,
  "destinationCost" : 6,
  "absoluteMax" : "absoluteMax",
  "numberOfWraps" : 3,
  "criticalAmount" : 4,
  "alcoholContent" : 8.863729185622826634016746538691222667694091796875,
  "unitCode" : "unitCode",
  "numberOfCases" : 7,
  "id" : 0,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "productCodeId" : 5,
  "sourceBuildingName" : "sourceBuildingName",
  "sourceFootprintName" : "sourceFootprintName",
  "maxCycle" : 3,
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "sourceZoneId" : 4,
  "extrinsicNumber2" : 1,
  "extrinsicNumber1" : 2,
  "alcoholCountryId" : 3,
  "extrinsicText1" : "extrinsicText1",
  "sourceCost" : 8,
  "chargeRate" : 8.761432466225475224064211943186819553375244140625,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "alcoholUPCCode" : "alcoholUPCCode",
  "destinationOrigin" : 1,
  "sourceAisleId" : 7,
  "sourceBay" : 9,
  "classRestriction" : "classRestriction",
  "overallLeadTime" : 6,
  "status" : "status",
  "sourceFootprintDepth" : 1,
  "legacyLowLevelContactId" : 0,
  "seasonalItem" : "seasonalItem",
  "overallFixedReorderPoint" : 4,
  "destinationBay" : 7,
  "typeName" : "typeName",
  "destinationAllowItemMixing" : false,
  "masterRef" : 0,
  "serialCode" : "serialCode",
  "extrinsicDecimal2" : 6.623518433804886029747649445198476314544677734375,
  "maxInterim" : 4,
  "wrapCode" : "wrapCode",
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 9,
  "alcoholBrand" : "alcoholBrand",
  "statusName" : "statusName",
  "destinationBehaviorType" : "destinationBehaviorType",
  "majorGroupId" : 0,
  "email" : "email",
  "lotControlFlag" : "lotControlFlag",
  "extrinsicDecimal1" : 8.289659398142969592981899040751159191131591796875,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "workParentId" : 2,
  "podOrderSuffix" : 1,
  "destinationAisleAddress" : "destinationAisleAddress",
  "destinationBuildingName" : "destinationBuildingName",
  "destinationAddressSchemeName" : "destinationAddressSchemeName",
  "destinationFootprintName" : "destinationFootprintName",
  "destinationWarehouseName" : "destinationWarehouseName",
  "sourceWarehouseName" : "sourceWarehouseName",
  "userId" : 5,
  "billingQuantity" : 9.1831235947739937586220548837445676326751708984375,
  "sourceBillingTypeId" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "destinationFootprintHeight" : 6,
  "summaryCodeId" : 7,
  "priorityCode" : 7,
  "sourceAisleAddress" : "sourceAisleAddress",
  "listPrice" : 3.901545264248647004734493748401291668415069580078125,
  "sourceOriginName" : "sourceOriginName",
  "sourceBehaviorType" : "sourceBehaviorType",
  "weightPerWrap" : 4.6523964329332461176136348512955009937286376953125,
  "destinationAddressSchemeId" : 3,
  "sourceAllowItemMixing" : false,
  "destinationBillingTypeId" : 2,
  "secure" : "secure",
  "buyerId" : 4,
  "sourceBehaviorTypeName" : "sourceBehaviorTypeName",
  "destinationAisleId" : 6,
  "qualityControlIndicator" : "qualityControlIndicator",
  "workBatchId" : 5,
  "podRevDate" : "podRevDate",
  "sourceFootprintHeight" : 6,
  "pickTouches" : 5,
  "itemDescription" : "itemDescription",
  "sector" : "sector",
  "destinationPriorityCode" : 7,
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "commodityCodeId" : 6,
  "assetCode" : "assetCode",
  "packingSlipDescription" : "packingSlipDescription",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOnline" : false,
  "compCode" : 8,
  "destinationNumber" : 0,
  "alcoholContainerId" : 9,
  "importedRecordId" : 6,
  "foreignId" : 9,
  "backorder" : "backorder",
  "outsideVendor" : 0,
  "sourceOnline" : false,
  "subGroupId" : 7,
  "workCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "destinationOriginName" : "destinationOriginName",
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 0.4182561061793121925944660688401199877262115478515625,
  "chargeCode" : "chargeCode",
  "sourceAddressSchemeName" : "sourceAddressSchemeName",
  "destinationWarehouseId" : 9,
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "sourceBillingTypeName",
  "destinationLocation" : "destinationLocation",
  "sourceAddressSchemeId" : 4,
  "sourceLevel" : 5,
  "sourceFootprintWidth" : 7,
  "destinationLevel" : 3,
  "sourceZoneName" : "sourceZoneName",
  "itemStatus" : "itemStatus",
  "pickNo" : "pickNo",
  "destinationFootprintWidth" : 5,
  "productType" : 0,
  "workModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "unitsPerWrap" : 7,
  "destinationZoneName" : "destinationZoneName",
  "quantity" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "accountCodeId" : 4,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "destinationZoneId" : 3,
  "sourceNumber" : 9,
  "destinationFootprintDepth" : 6,
  "sourcePriorityCode" : 6,
  "vendorSKU" : "vendorSKU",
  "sourceFootprintId" : 1,
  "sourceWarehouseId" : 3,
  "sourceBuildingId" : 2,
  "productCodeFlag" : "productCodeFlag",
  "destinationBehaviorTypeName" : "destinationBehaviorTypeName",
  "sourceLocation" : "sourceLocation",
  "destinationFootprintId" : 6,
  "numericSortOrder" : 8
}}]
     
     - parameter workActivityId: (path) Id of the workActivity to be returned. 

     - returns: RequestBuilder<WorkActivity> 
     */
    public class func getWorkActivityByIdWithRequestBuilder(workActivityId workActivityId: Int32) -> RequestBuilder<WorkActivity> {
        var path = "/beta/workActivity/{workActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WorkActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityFiles(workActivityId workActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getWorkActivityFilesWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a workActivity.
     - GET /beta/workActivity/{workActivityId}/file
     - Get all existing workActivity files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getWorkActivityFilesWithRequestBuilder(workActivityId workActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/file"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityTags(workActivityId workActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getWorkActivityTagsWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a workActivity.
     - GET /beta/workActivity/{workActivityId}/tag
     - Get all existing workActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getWorkActivityTagsWithRequestBuilder(workActivityId workActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a workActivity
     
     - parameter body: (body) WorkActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWorkActivity(body body: WorkActivity, completion: ((error: ErrorType?) -> Void)) {
        updateWorkActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a workActivity
     - PUT /beta/workActivity
     - Updates an existing workActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) WorkActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWorkActivityWithRequestBuilder(body body: WorkActivity) -> RequestBuilder<Void> {
        let path = "/beta/workActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
