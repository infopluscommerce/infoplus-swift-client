//
// WorkActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WorkActivityAPI: APIBase {
    /**
     
     Create a workActivity
     
     - parameter body: (body) WorkActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivity(body body: WorkActivity, completion: ((data: WorkActivity?, error: ErrorType?) -> Void)) {
        addWorkActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a workActivity
     
     - POST /beta/workActivity
     - Inserts a new workActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "destinationBillingTypeName" : "aeiou",
  "alcoholTypeId" : 123,
  "destinationBuildingId" : 123,
  "type" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "sourceOrigin" : 123,
  "lowStockContactId" : 123,
  "alcoholContainerVolume" : 123,
  "destinationCost" : 123,
  "absoluteMax" : "aeiou",
  "numberOfWraps" : 123,
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "unitCode" : "aeiou",
  "numberOfCases" : 123,
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "productCodeId" : 123,
  "sourceBuildingName" : "aeiou",
  "sourceFootprintName" : "aeiou",
  "maxCycle" : 123,
  "upc" : "aeiou",
  "alcoholContainerName" : "aeiou",
  "sourceZoneId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "alcoholCountryId" : 123,
  "extrinsicText1" : "aeiou",
  "sourceCost" : 123,
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "destinationOrigin" : 123,
  "sourceAisleId" : 123,
  "sourceBay" : 123,
  "classRestriction" : "aeiou",
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "sourceFootprintDepth" : 123,
  "legacyLowLevelContactId" : 123,
  "seasonalItem" : "aeiou",
  "overallFixedReorderPoint" : 123,
  "destinationBay" : 123,
  "typeName" : "aeiou",
  "destinationAllowItemMixing" : true,
  "masterRef" : 123,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "wrapCode" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "statusName" : "aeiou",
  "destinationBehaviorType" : "aeiou",
  "majorGroupId" : 123,
  "email" : "aeiou",
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "workParentId" : 123,
  "podOrderSuffix" : 123,
  "destinationAisleAddress" : "aeiou",
  "destinationBuildingName" : "aeiou",
  "destinationAddressSchemeName" : "aeiou",
  "destinationFootprintName" : "aeiou",
  "destinationWarehouseName" : "aeiou",
  "sourceWarehouseName" : "aeiou",
  "userId" : 123,
  "sourceBillingTypeId" : 123,
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "destinationFootprintHeight" : 123,
  "summaryCodeId" : 123,
  "priorityCode" : 123,
  "sourceAisleAddress" : "aeiou",
  "listPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "sourceOriginName" : "aeiou",
  "sourceBehaviorType" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "destinationAddressSchemeId" : 123,
  "sourceAllowItemMixing" : true,
  "destinationBillingTypeId" : 123,
  "secure" : "aeiou",
  "buyerId" : 123,
  "sourceBehaviorTypeName" : "aeiou",
  "destinationAisleId" : 123,
  "qualityControlIndicator" : "aeiou",
  "workBatchId" : 123,
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "sourceFootprintHeight" : 123,
  "pickTouches" : 123,
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "destinationPriorityCode" : 123,
  "alcoholTypeName" : "aeiou",
  "lobId" : 123,
  "assetCode" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOnline" : true,
  "compCode" : 123,
  "destinationNumber" : 123,
  "alcoholContainerId" : 123,
  "importedRecordId" : 123,
  "foreignId" : 123,
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "sourceOnline" : true,
  "subGroupId" : 123,
  "workCreateDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOriginName" : "aeiou",
  "alcoholRegion" : "aeiou",
  "chargeCode" : "aeiou",
  "sourceAddressSchemeName" : "aeiou",
  "destinationWarehouseId" : 123,
  "alcoholSCCCode" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "aeiou",
  "destinationLocation" : "aeiou",
  "sourceAddressSchemeId" : 123,
  "sourceLevel" : 123,
  "sourceFootprintWidth" : 123,
  "destinationLevel" : 123,
  "sourceZoneName" : "aeiou",
  "itemStatus" : "aeiou",
  "pickNo" : "aeiou",
  "destinationFootprintWidth" : 123,
  "productType" : 123,
  "workModifyDate" : "2000-01-23T04:56:07.000+0000",
  "unitsPerWrap" : 123,
  "destinationZoneName" : "aeiou",
  "quantity" : 123,
  "alcoholCountryName" : "aeiou",
  "accountCodeId" : 123,
  "alcoholNABCACode" : "aeiou",
  "alcoholUNIMERCCode" : "aeiou",
  "destinationZoneId" : 123,
  "sourceNumber" : 123,
  "destinationFootprintDepth" : 123,
  "sourcePriorityCode" : 123,
  "vendorSKU" : "aeiou",
  "sourceFootprintId" : 123,
  "sourceWarehouseId" : 123,
  "sourceBuildingId" : 123,
  "productCodeFlag" : "aeiou",
  "destinationBehaviorTypeName" : "aeiou",
  "sourceLocation" : "aeiou",
  "destinationFootprintId" : 123,
  "numericSortOrder" : 123
}}]
     
     - parameter body: (body) WorkActivity to be inserted. 

     - returns: RequestBuilder<WorkActivity> 
     */
    public class func addWorkActivityWithRequestBuilder(body body: WorkActivity) -> RequestBuilder<WorkActivity> {
        let path = "/beta/workActivity"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<WorkActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new audit for a workActivity
     
     - parameter workActivityId: (path) Id of the workActivity to add an audit to 
     - parameter workActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivityAudit(workActivityId workActivityId: Int, workActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addWorkActivityAuditWithRequestBuilder(workActivityId: workActivityId, workActivityAudit: workActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new audit for a workActivity
     
     - PUT /beta/workActivity/{workActivityId}/audit/{workActivityAudit}
     - Adds an audit to an existing workActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to add an audit to 
     - parameter workActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWorkActivityAuditWithRequestBuilder(workActivityId workActivityId: Int, workActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/audit/{workActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{workActivityAudit}", withString: "\(workActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new tags for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to add a tag to 
     - parameter workActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWorkActivityTag(workActivityId workActivityId: Int, workActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addWorkActivityTagWithRequestBuilder(workActivityId: workActivityId, workActivityTag: workActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new tags for a workActivity.
     
     - PUT /beta/workActivity/{workActivityId}/tag/{workActivityTag}
     - Adds a tag to an existing workActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to add a tag to 
     - parameter workActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWorkActivityTagWithRequestBuilder(workActivityId workActivityId: Int, workActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{workActivityTag}", withString: "\(workActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a workActivity
     
     - parameter workActivityId: (path) Id of the workActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWorkActivity(workActivityId workActivityId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteWorkActivityWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a workActivity
     
     - DELETE /beta/workActivity/{workActivityId}
     - Deletes the workActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWorkActivityWithRequestBuilder(workActivityId workActivityId: Int) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a tag for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to remove tag from 
     - parameter workActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWorkActivityTag(workActivityId workActivityId: Int, workActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWorkActivityTagWithRequestBuilder(workActivityId: workActivityId, workActivityTag: workActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a tag for a workActivity.
     
     - DELETE /beta/workActivity/{workActivityId}/tag/{workActivityTag}
     - Deletes an existing workActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to remove tag from 
     - parameter workActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWorkActivityTagWithRequestBuilder(workActivityId workActivityId: Int, workActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/tag/{workActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{workActivityTag}", withString: "\(workActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a workActivity by id
     
     - parameter workActivityId: (path) Id of the workActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateWorkActivityById(workActivityId workActivityId: Int, completion: ((data: WorkActivity?, error: ErrorType?) -> Void)) {
        getDuplicateWorkActivityByIdWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a workActivity by id
     
     - GET /beta/workActivity/duplicate/{workActivityId}
     - Returns a duplicated workActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "destinationBillingTypeName" : "aeiou",
  "alcoholTypeId" : 123,
  "destinationBuildingId" : 123,
  "type" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "sourceOrigin" : 123,
  "lowStockContactId" : 123,
  "alcoholContainerVolume" : 123,
  "destinationCost" : 123,
  "absoluteMax" : "aeiou",
  "numberOfWraps" : 123,
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "unitCode" : "aeiou",
  "numberOfCases" : 123,
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "productCodeId" : 123,
  "sourceBuildingName" : "aeiou",
  "sourceFootprintName" : "aeiou",
  "maxCycle" : 123,
  "upc" : "aeiou",
  "alcoholContainerName" : "aeiou",
  "sourceZoneId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "alcoholCountryId" : 123,
  "extrinsicText1" : "aeiou",
  "sourceCost" : 123,
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "destinationOrigin" : 123,
  "sourceAisleId" : 123,
  "sourceBay" : 123,
  "classRestriction" : "aeiou",
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "sourceFootprintDepth" : 123,
  "legacyLowLevelContactId" : 123,
  "seasonalItem" : "aeiou",
  "overallFixedReorderPoint" : 123,
  "destinationBay" : 123,
  "typeName" : "aeiou",
  "destinationAllowItemMixing" : true,
  "masterRef" : 123,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "wrapCode" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "statusName" : "aeiou",
  "destinationBehaviorType" : "aeiou",
  "majorGroupId" : 123,
  "email" : "aeiou",
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "workParentId" : 123,
  "podOrderSuffix" : 123,
  "destinationAisleAddress" : "aeiou",
  "destinationBuildingName" : "aeiou",
  "destinationAddressSchemeName" : "aeiou",
  "destinationFootprintName" : "aeiou",
  "destinationWarehouseName" : "aeiou",
  "sourceWarehouseName" : "aeiou",
  "userId" : 123,
  "sourceBillingTypeId" : 123,
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "destinationFootprintHeight" : 123,
  "summaryCodeId" : 123,
  "priorityCode" : 123,
  "sourceAisleAddress" : "aeiou",
  "listPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "sourceOriginName" : "aeiou",
  "sourceBehaviorType" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "destinationAddressSchemeId" : 123,
  "sourceAllowItemMixing" : true,
  "destinationBillingTypeId" : 123,
  "secure" : "aeiou",
  "buyerId" : 123,
  "sourceBehaviorTypeName" : "aeiou",
  "destinationAisleId" : 123,
  "qualityControlIndicator" : "aeiou",
  "workBatchId" : 123,
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "sourceFootprintHeight" : 123,
  "pickTouches" : 123,
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "destinationPriorityCode" : 123,
  "alcoholTypeName" : "aeiou",
  "lobId" : 123,
  "assetCode" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOnline" : true,
  "compCode" : 123,
  "destinationNumber" : 123,
  "alcoholContainerId" : 123,
  "importedRecordId" : 123,
  "foreignId" : 123,
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "sourceOnline" : true,
  "subGroupId" : 123,
  "workCreateDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOriginName" : "aeiou",
  "alcoholRegion" : "aeiou",
  "chargeCode" : "aeiou",
  "sourceAddressSchemeName" : "aeiou",
  "destinationWarehouseId" : 123,
  "alcoholSCCCode" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "aeiou",
  "destinationLocation" : "aeiou",
  "sourceAddressSchemeId" : 123,
  "sourceLevel" : 123,
  "sourceFootprintWidth" : 123,
  "destinationLevel" : 123,
  "sourceZoneName" : "aeiou",
  "itemStatus" : "aeiou",
  "pickNo" : "aeiou",
  "destinationFootprintWidth" : 123,
  "productType" : 123,
  "workModifyDate" : "2000-01-23T04:56:07.000+0000",
  "unitsPerWrap" : 123,
  "destinationZoneName" : "aeiou",
  "quantity" : 123,
  "alcoholCountryName" : "aeiou",
  "accountCodeId" : 123,
  "alcoholNABCACode" : "aeiou",
  "alcoholUNIMERCCode" : "aeiou",
  "destinationZoneId" : 123,
  "sourceNumber" : 123,
  "destinationFootprintDepth" : 123,
  "sourcePriorityCode" : 123,
  "vendorSKU" : "aeiou",
  "sourceFootprintId" : 123,
  "sourceWarehouseId" : 123,
  "sourceBuildingId" : 123,
  "productCodeFlag" : "aeiou",
  "destinationBehaviorTypeName" : "aeiou",
  "sourceLocation" : "aeiou",
  "destinationFootprintId" : 123,
  "numericSortOrder" : 123
}}]
     
     - parameter workActivityId: (path) Id of the workActivity to be duplicated. 

     - returns: RequestBuilder<WorkActivity> 
     */
    public class func getDuplicateWorkActivityByIdWithRequestBuilder(workActivityId workActivityId: Int) -> RequestBuilder<WorkActivity> {
        var path = "/beta/workActivity/duplicate/{workActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WorkActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search workActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [WorkActivity]?, error: ErrorType?) -> Void)) {
        getWorkActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search workActivitys by filter
     
     - GET /beta/workActivity/search
     - Returns the list of workActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "destinationBillingTypeName" : "aeiou",
  "alcoholTypeId" : 123,
  "destinationBuildingId" : 123,
  "type" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "sourceOrigin" : 123,
  "lowStockContactId" : 123,
  "alcoholContainerVolume" : 123,
  "destinationCost" : 123,
  "absoluteMax" : "aeiou",
  "numberOfWraps" : 123,
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "unitCode" : "aeiou",
  "numberOfCases" : 123,
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "productCodeId" : 123,
  "sourceBuildingName" : "aeiou",
  "sourceFootprintName" : "aeiou",
  "maxCycle" : 123,
  "upc" : "aeiou",
  "alcoholContainerName" : "aeiou",
  "sourceZoneId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "alcoholCountryId" : 123,
  "extrinsicText1" : "aeiou",
  "sourceCost" : 123,
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "destinationOrigin" : 123,
  "sourceAisleId" : 123,
  "sourceBay" : 123,
  "classRestriction" : "aeiou",
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "sourceFootprintDepth" : 123,
  "legacyLowLevelContactId" : 123,
  "seasonalItem" : "aeiou",
  "overallFixedReorderPoint" : 123,
  "destinationBay" : 123,
  "typeName" : "aeiou",
  "destinationAllowItemMixing" : true,
  "masterRef" : 123,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "wrapCode" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "statusName" : "aeiou",
  "destinationBehaviorType" : "aeiou",
  "majorGroupId" : 123,
  "email" : "aeiou",
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "workParentId" : 123,
  "podOrderSuffix" : 123,
  "destinationAisleAddress" : "aeiou",
  "destinationBuildingName" : "aeiou",
  "destinationAddressSchemeName" : "aeiou",
  "destinationFootprintName" : "aeiou",
  "destinationWarehouseName" : "aeiou",
  "sourceWarehouseName" : "aeiou",
  "userId" : 123,
  "sourceBillingTypeId" : 123,
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "destinationFootprintHeight" : 123,
  "summaryCodeId" : 123,
  "priorityCode" : 123,
  "sourceAisleAddress" : "aeiou",
  "listPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "sourceOriginName" : "aeiou",
  "sourceBehaviorType" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "destinationAddressSchemeId" : 123,
  "sourceAllowItemMixing" : true,
  "destinationBillingTypeId" : 123,
  "secure" : "aeiou",
  "buyerId" : 123,
  "sourceBehaviorTypeName" : "aeiou",
  "destinationAisleId" : 123,
  "qualityControlIndicator" : "aeiou",
  "workBatchId" : 123,
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "sourceFootprintHeight" : 123,
  "pickTouches" : 123,
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "destinationPriorityCode" : 123,
  "alcoholTypeName" : "aeiou",
  "lobId" : 123,
  "assetCode" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOnline" : true,
  "compCode" : 123,
  "destinationNumber" : 123,
  "alcoholContainerId" : 123,
  "importedRecordId" : 123,
  "foreignId" : 123,
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "sourceOnline" : true,
  "subGroupId" : 123,
  "workCreateDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOriginName" : "aeiou",
  "alcoholRegion" : "aeiou",
  "chargeCode" : "aeiou",
  "sourceAddressSchemeName" : "aeiou",
  "destinationWarehouseId" : 123,
  "alcoholSCCCode" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "aeiou",
  "destinationLocation" : "aeiou",
  "sourceAddressSchemeId" : 123,
  "sourceLevel" : 123,
  "sourceFootprintWidth" : 123,
  "destinationLevel" : 123,
  "sourceZoneName" : "aeiou",
  "itemStatus" : "aeiou",
  "pickNo" : "aeiou",
  "destinationFootprintWidth" : 123,
  "productType" : 123,
  "workModifyDate" : "2000-01-23T04:56:07.000+0000",
  "unitsPerWrap" : 123,
  "destinationZoneName" : "aeiou",
  "quantity" : 123,
  "alcoholCountryName" : "aeiou",
  "accountCodeId" : 123,
  "alcoholNABCACode" : "aeiou",
  "alcoholUNIMERCCode" : "aeiou",
  "destinationZoneId" : 123,
  "sourceNumber" : 123,
  "destinationFootprintDepth" : 123,
  "sourcePriorityCode" : 123,
  "vendorSKU" : "aeiou",
  "sourceFootprintId" : 123,
  "sourceWarehouseId" : 123,
  "sourceBuildingId" : 123,
  "productCodeFlag" : "aeiou",
  "destinationBehaviorTypeName" : "aeiou",
  "sourceLocation" : "aeiou",
  "destinationFootprintId" : 123,
  "numericSortOrder" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[WorkActivity]> 
     */
    public class func getWorkActivityByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[WorkActivity]> {
        let path = "/beta/workActivity/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[WorkActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a workActivity by id
     
     - parameter workActivityId: (path) Id of the workActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityById(workActivityId workActivityId: Int, completion: ((data: WorkActivity?, error: ErrorType?) -> Void)) {
        getWorkActivityByIdWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a workActivity by id
     
     - GET /beta/workActivity/{workActivityId}
     - Returns the workActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "destinationBillingTypeName" : "aeiou",
  "alcoholTypeId" : 123,
  "destinationBuildingId" : 123,
  "type" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "sourceOrigin" : 123,
  "lowStockContactId" : 123,
  "alcoholContainerVolume" : 123,
  "destinationCost" : 123,
  "absoluteMax" : "aeiou",
  "numberOfWraps" : 123,
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "unitCode" : "aeiou",
  "numberOfCases" : 123,
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "productCodeId" : 123,
  "sourceBuildingName" : "aeiou",
  "sourceFootprintName" : "aeiou",
  "maxCycle" : 123,
  "upc" : "aeiou",
  "alcoholContainerName" : "aeiou",
  "sourceZoneId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "alcoholCountryId" : 123,
  "extrinsicText1" : "aeiou",
  "sourceCost" : 123,
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "destinationOrigin" : 123,
  "sourceAisleId" : 123,
  "sourceBay" : 123,
  "classRestriction" : "aeiou",
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "sourceFootprintDepth" : 123,
  "legacyLowLevelContactId" : 123,
  "seasonalItem" : "aeiou",
  "overallFixedReorderPoint" : 123,
  "destinationBay" : 123,
  "typeName" : "aeiou",
  "destinationAllowItemMixing" : true,
  "masterRef" : 123,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "wrapCode" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "statusName" : "aeiou",
  "destinationBehaviorType" : "aeiou",
  "majorGroupId" : 123,
  "email" : "aeiou",
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "workParentId" : 123,
  "podOrderSuffix" : 123,
  "destinationAisleAddress" : "aeiou",
  "destinationBuildingName" : "aeiou",
  "destinationAddressSchemeName" : "aeiou",
  "destinationFootprintName" : "aeiou",
  "destinationWarehouseName" : "aeiou",
  "sourceWarehouseName" : "aeiou",
  "userId" : 123,
  "sourceBillingTypeId" : 123,
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "destinationFootprintHeight" : 123,
  "summaryCodeId" : 123,
  "priorityCode" : 123,
  "sourceAisleAddress" : "aeiou",
  "listPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "sourceOriginName" : "aeiou",
  "sourceBehaviorType" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "destinationAddressSchemeId" : 123,
  "sourceAllowItemMixing" : true,
  "destinationBillingTypeId" : 123,
  "secure" : "aeiou",
  "buyerId" : 123,
  "sourceBehaviorTypeName" : "aeiou",
  "destinationAisleId" : 123,
  "qualityControlIndicator" : "aeiou",
  "workBatchId" : 123,
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "sourceFootprintHeight" : 123,
  "pickTouches" : 123,
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "destinationPriorityCode" : 123,
  "alcoholTypeName" : "aeiou",
  "lobId" : 123,
  "assetCode" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOnline" : true,
  "compCode" : 123,
  "destinationNumber" : 123,
  "alcoholContainerId" : 123,
  "importedRecordId" : 123,
  "foreignId" : 123,
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "sourceOnline" : true,
  "subGroupId" : 123,
  "workCreateDate" : "2000-01-23T04:56:07.000+0000",
  "destinationOriginName" : "aeiou",
  "alcoholRegion" : "aeiou",
  "chargeCode" : "aeiou",
  "sourceAddressSchemeName" : "aeiou",
  "destinationWarehouseId" : 123,
  "alcoholSCCCode" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "sourceBillingTypeName" : "aeiou",
  "destinationLocation" : "aeiou",
  "sourceAddressSchemeId" : 123,
  "sourceLevel" : 123,
  "sourceFootprintWidth" : 123,
  "destinationLevel" : 123,
  "sourceZoneName" : "aeiou",
  "itemStatus" : "aeiou",
  "pickNo" : "aeiou",
  "destinationFootprintWidth" : 123,
  "productType" : 123,
  "workModifyDate" : "2000-01-23T04:56:07.000+0000",
  "unitsPerWrap" : 123,
  "destinationZoneName" : "aeiou",
  "quantity" : 123,
  "alcoholCountryName" : "aeiou",
  "accountCodeId" : 123,
  "alcoholNABCACode" : "aeiou",
  "alcoholUNIMERCCode" : "aeiou",
  "destinationZoneId" : 123,
  "sourceNumber" : 123,
  "destinationFootprintDepth" : 123,
  "sourcePriorityCode" : 123,
  "vendorSKU" : "aeiou",
  "sourceFootprintId" : 123,
  "sourceWarehouseId" : 123,
  "sourceBuildingId" : 123,
  "productCodeFlag" : "aeiou",
  "destinationBehaviorTypeName" : "aeiou",
  "sourceLocation" : "aeiou",
  "destinationFootprintId" : 123,
  "numericSortOrder" : 123
}}]
     
     - parameter workActivityId: (path) Id of the workActivity to be returned. 

     - returns: RequestBuilder<WorkActivity> 
     */
    public class func getWorkActivityByIdWithRequestBuilder(workActivityId workActivityId: Int) -> RequestBuilder<WorkActivity> {
        var path = "/beta/workActivity/{workActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<WorkActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get the tags for a workActivity.
     
     - parameter workActivityId: (path) Id of the workActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWorkActivityTags(workActivityId workActivityId: Int, completion: ((error: ErrorType?) -> Void)) {
        getWorkActivityTagsWithRequestBuilder(workActivityId: workActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Get the tags for a workActivity.
     
     - GET /beta/workActivity/{workActivityId}/tag
     - Get all existing workActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter workActivityId: (path) Id of the workActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getWorkActivityTagsWithRequestBuilder(workActivityId workActivityId: Int) -> RequestBuilder<Void> {
        var path = "/beta/workActivity/{workActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{workActivityId}", withString: "\(workActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a workActivity
     
     - parameter body: (body) WorkActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWorkActivity(body body: WorkActivity, completion: ((error: ErrorType?) -> Void)) {
        updateWorkActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a workActivity
     
     - PUT /beta/workActivity
     - Updates an existing workActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) WorkActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWorkActivityWithRequestBuilder(body body: WorkActivity) -> RequestBuilder<Void> {
        let path = "/beta/workActivity"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
