//
// ItemSectorAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemSectorAPI: APIBase {
    /**
     Create an itemSector
     
     - parameter body: (body) ItemSector to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSector(body body: ItemSector, completion: ((data: ItemSector?, error: ErrorType?) -> Void)) {
        addItemSectorWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an itemSector
     - POST /beta/itemSector
     - Inserts a new itemSector using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter body: (body) ItemSector to be inserted. 

     - returns: RequestBuilder<ItemSector> 
     */
    public class func addItemSectorWithRequestBuilder(body body: ItemSector) -> RequestBuilder<ItemSector> {
        let path = "/beta/itemSector"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSector>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an itemSector
     
     - parameter itemSectorId: (path) Id of the itemSector to add an audit to 
     - parameter itemSectorAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSectorAudit(itemSectorId itemSectorId: Int32, itemSectorAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSectorAuditWithRequestBuilder(itemSectorId: itemSectorId, itemSectorAudit: itemSectorAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an itemSector
     - PUT /beta/itemSector/{itemSectorId}/audit/{itemSectorAudit}
     - Adds an audit to an existing itemSector.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to add an audit to 
     - parameter itemSectorAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSectorAuditWithRequestBuilder(itemSectorId itemSectorId: Int32, itemSectorAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/audit/{itemSectorAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSectorAudit}", withString: "\(itemSectorAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an itemSector
     
     - parameter itemSectorId: (path) Id of the itemSector to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSectorFile(itemSectorId itemSectorId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSectorFileWithRequestBuilder(itemSectorId: itemSectorId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an itemSector
     - POST /beta/itemSector/{itemSectorId}/file/{fileName}
     - Adds a file to an existing itemSector.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSectorFileWithRequestBuilder(itemSectorId itemSectorId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an itemSector by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter itemSectorId: (path) Id of the itemSector to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSectorFileByURL(body body: RecordFile, itemSectorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addItemSectorFileByURLWithRequestBuilder(body: body, itemSectorId: itemSectorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an itemSector by URL.
     - POST /beta/itemSector/{itemSectorId}/file
     - Adds a file to an existing itemSector by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter itemSectorId: (path) Id of the itemSector to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSectorFileByURLWithRequestBuilder(body body: RecordFile, itemSectorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/file"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an itemSector.
     
     - parameter itemSectorId: (path) Id of the itemSector to add a tag to 
     - parameter itemSectorTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSectorTag(itemSectorId itemSectorId: Int32, itemSectorTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSectorTagWithRequestBuilder(itemSectorId: itemSectorId, itemSectorTag: itemSectorTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an itemSector.
     - PUT /beta/itemSector/{itemSectorId}/tag/{itemSectorTag}
     - Adds a tag to an existing itemSector.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to add a tag to 
     - parameter itemSectorTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSectorTagWithRequestBuilder(itemSectorId itemSectorId: Int32, itemSectorTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/tag/{itemSectorTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSectorTag}", withString: "\(itemSectorTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an itemSector
     
     - parameter itemSectorId: (path) Id of the itemSector to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSector(itemSectorId itemSectorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSectorWithRequestBuilder(itemSectorId: itemSectorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an itemSector
     - DELETE /beta/itemSector/{itemSectorId}
     - Deletes the itemSector identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSectorWithRequestBuilder(itemSectorId itemSectorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an itemSector.
     
     - parameter itemSectorId: (path) Id of the itemSector to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSectorFile(itemSectorId itemSectorId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSectorFileWithRequestBuilder(itemSectorId: itemSectorId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an itemSector.
     - DELETE /beta/itemSector/{itemSectorId}/file/{fileId}
     - Deletes an existing itemSector file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSectorFileWithRequestBuilder(itemSectorId itemSectorId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an itemSector.
     
     - parameter itemSectorId: (path) Id of the itemSector to remove tag from 
     - parameter itemSectorTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSectorTag(itemSectorId itemSectorId: Int32, itemSectorTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSectorTagWithRequestBuilder(itemSectorId: itemSectorId, itemSectorTag: itemSectorTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an itemSector.
     - DELETE /beta/itemSector/{itemSectorId}/tag/{itemSectorTag}
     - Deletes an existing itemSector tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to remove tag from 
     - parameter itemSectorTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSectorTagWithRequestBuilder(itemSectorId itemSectorId: Int32, itemSectorTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/tag/{itemSectorTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSectorTag}", withString: "\(itemSectorTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an itemSector by id
     
     - parameter itemSectorId: (path) Id of the itemSector to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemSectorById(itemSectorId itemSectorId: Int32, completion: ((data: ItemSector?, error: ErrorType?) -> Void)) {
        getDuplicateItemSectorByIdWithRequestBuilder(itemSectorId: itemSectorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an itemSector by id
     - GET /beta/itemSector/duplicate/{itemSectorId}
     - Returns a duplicated itemSector identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter itemSectorId: (path) Id of the itemSector to be duplicated. 

     - returns: RequestBuilder<ItemSector> 
     */
    public class func getDuplicateItemSectorByIdWithRequestBuilder(itemSectorId itemSectorId: Int32) -> RequestBuilder<ItemSector> {
        var path = "/beta/itemSector/duplicate/{itemSectorId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSector>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search itemSectors by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSectorByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ItemSector]?, error: ErrorType?) -> Void)) {
        getItemSectorByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search itemSectors by filter
     - GET /beta/itemSector/search
     - Returns the list of itemSectors that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}, {
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemSector]> 
     */
    public class func getItemSectorByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ItemSector]> {
        let path = "/beta/itemSector/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ItemSector]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an itemSector by id
     
     - parameter itemSectorId: (path) Id of the itemSector to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSectorById(itemSectorId itemSectorId: Int32, completion: ((data: ItemSector?, error: ErrorType?) -> Void)) {
        getItemSectorByIdWithRequestBuilder(itemSectorId: itemSectorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an itemSector by id
     - GET /beta/itemSector/{itemSectorId}
     - Returns the itemSector identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter itemSectorId: (path) Id of the itemSector to be returned. 

     - returns: RequestBuilder<ItemSector> 
     */
    public class func getItemSectorByIdWithRequestBuilder(itemSectorId itemSectorId: Int32) -> RequestBuilder<ItemSector> {
        var path = "/beta/itemSector/{itemSectorId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSector>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an itemSector.
     
     - parameter itemSectorId: (path) Id of the itemSector to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSectorFiles(itemSectorId itemSectorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemSectorFilesWithRequestBuilder(itemSectorId: itemSectorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an itemSector.
     - GET /beta/itemSector/{itemSectorId}/file
     - Get all existing itemSector files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemSectorFilesWithRequestBuilder(itemSectorId itemSectorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/file"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an itemSector.
     
     - parameter itemSectorId: (path) Id of the itemSector to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSectorTags(itemSectorId itemSectorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemSectorTagsWithRequestBuilder(itemSectorId: itemSectorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an itemSector.
     - GET /beta/itemSector/{itemSectorId}/tag
     - Get all existing itemSector tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSectorId: (path) Id of the itemSector to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemSectorTagsWithRequestBuilder(itemSectorId itemSectorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSector/{itemSectorId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemSectorId}", withString: "\(itemSectorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an itemSector
     
     - parameter body: (body) ItemSector to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemSector(body body: ItemSector, completion: ((error: ErrorType?) -> Void)) {
        updateItemSectorWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an itemSector
     - PUT /beta/itemSector
     - Updates an existing itemSector using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemSector to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemSectorWithRequestBuilder(body body: ItemSector) -> RequestBuilder<Void> {
        let path = "/beta/itemSector"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
