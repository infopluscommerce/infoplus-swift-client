//
// PalletTypeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PalletTypeAPI: APIBase {
    /**
     Create a palletType
     
     - parameter body: (body) PalletType to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPalletType(body body: PalletType, completion: ((data: PalletType?, error: ErrorType?) -> Void)) {
        addPalletTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a palletType
     - POST /beta/palletType
     - Inserts a new palletType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "packableLengthIn" : 2.3021358869347654518833223846741020679473876953125,
  "palletHeightIn" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "palletLengthIn" : 6.02745618307040320615897144307382404804229736328125,
  "name" : "name",
  "packableWidthIn" : 7.061401241503109105224211816675961017608642578125,
  "packableHeightIn" : 9.301444243932575517419536481611430644989013671875,
  "id" : 0,
  "isActive" : false,
  "palletWeightLbs" : 5.63737665663332876420099637471139430999755859375,
  "palletWidthIn" : 1.46581298050294517310021547018550336360931396484375,
  "lobId" : 3
}}]
     
     - parameter body: (body) PalletType to be inserted. 

     - returns: RequestBuilder<PalletType> 
     */
    public class func addPalletTypeWithRequestBuilder(body body: PalletType) -> RequestBuilder<PalletType> {
        let path = "/beta/palletType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PalletType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a palletType
     
     - parameter palletTypeId: (path) Id of the palletType to add an audit to 
     - parameter palletTypeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPalletTypeAudit(palletTypeId palletTypeId: Int32, palletTypeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addPalletTypeAuditWithRequestBuilder(palletTypeId: palletTypeId, palletTypeAudit: palletTypeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a palletType
     - PUT /beta/palletType/{palletTypeId}/audit/{palletTypeAudit}
     - Adds an audit to an existing palletType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to add an audit to 
     - parameter palletTypeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPalletTypeAuditWithRequestBuilder(palletTypeId palletTypeId: Int32, palletTypeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/audit/{palletTypeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{palletTypeAudit}", withString: "\(palletTypeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a palletType
     
     - parameter palletTypeId: (path) Id of the palletType to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPalletTypeFile(palletTypeId palletTypeId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addPalletTypeFileWithRequestBuilder(palletTypeId: palletTypeId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a palletType
     - POST /beta/palletType/{palletTypeId}/file/{fileName}
     - Adds a file to an existing palletType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addPalletTypeFileWithRequestBuilder(palletTypeId palletTypeId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a palletType by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter palletTypeId: (path) Id of the palletType to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPalletTypeFileByURL(body body: RecordFile, palletTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addPalletTypeFileByURLWithRequestBuilder(body: body, palletTypeId: palletTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a palletType by URL.
     - POST /beta/palletType/{palletTypeId}/file
     - Adds a file to an existing palletType by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter palletTypeId: (path) Id of the palletType to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addPalletTypeFileByURLWithRequestBuilder(body body: RecordFile, palletTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a palletType.
     
     - parameter palletTypeId: (path) Id of the palletType to add a tag to 
     - parameter palletTypeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPalletTypeTag(palletTypeId palletTypeId: Int32, palletTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addPalletTypeTagWithRequestBuilder(palletTypeId: palletTypeId, palletTypeTag: palletTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a palletType.
     - PUT /beta/palletType/{palletTypeId}/tag/{palletTypeTag}
     - Adds a tag to an existing palletType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to add a tag to 
     - parameter palletTypeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPalletTypeTagWithRequestBuilder(palletTypeId palletTypeId: Int32, palletTypeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/tag/{palletTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{palletTypeTag}", withString: "\(palletTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a palletType
     
     - parameter palletTypeId: (path) Id of the palletType to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePalletType(palletTypeId palletTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePalletTypeWithRequestBuilder(palletTypeId: palletTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a palletType
     - DELETE /beta/palletType/{palletTypeId}
     - Deletes the palletType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePalletTypeWithRequestBuilder(palletTypeId palletTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a palletType.
     
     - parameter palletTypeId: (path) Id of the palletType to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePalletTypeFile(palletTypeId palletTypeId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePalletTypeFileWithRequestBuilder(palletTypeId: palletTypeId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a palletType.
     - DELETE /beta/palletType/{palletTypeId}/file/{fileId}
     - Deletes an existing palletType file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePalletTypeFileWithRequestBuilder(palletTypeId palletTypeId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a palletType.
     
     - parameter palletTypeId: (path) Id of the palletType to remove tag from 
     - parameter palletTypeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePalletTypeTag(palletTypeId palletTypeId: Int32, palletTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deletePalletTypeTagWithRequestBuilder(palletTypeId: palletTypeId, palletTypeTag: palletTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a palletType.
     - DELETE /beta/palletType/{palletTypeId}/tag/{palletTypeTag}
     - Deletes an existing palletType tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to remove tag from 
     - parameter palletTypeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePalletTypeTagWithRequestBuilder(palletTypeId palletTypeId: Int32, palletTypeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/tag/{palletTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{palletTypeTag}", withString: "\(palletTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a palletType by id
     
     - parameter palletTypeId: (path) Id of the palletType to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicatePalletTypeById(palletTypeId palletTypeId: Int32, completion: ((data: PalletType?, error: ErrorType?) -> Void)) {
        getDuplicatePalletTypeByIdWithRequestBuilder(palletTypeId: palletTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a palletType by id
     - GET /beta/palletType/duplicate/{palletTypeId}
     - Returns a duplicated palletType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "packableLengthIn" : 2.3021358869347654518833223846741020679473876953125,
  "palletHeightIn" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "palletLengthIn" : 6.02745618307040320615897144307382404804229736328125,
  "name" : "name",
  "packableWidthIn" : 7.061401241503109105224211816675961017608642578125,
  "packableHeightIn" : 9.301444243932575517419536481611430644989013671875,
  "id" : 0,
  "isActive" : false,
  "palletWeightLbs" : 5.63737665663332876420099637471139430999755859375,
  "palletWidthIn" : 1.46581298050294517310021547018550336360931396484375,
  "lobId" : 3
}}]
     
     - parameter palletTypeId: (path) Id of the palletType to be duplicated. 

     - returns: RequestBuilder<PalletType> 
     */
    public class func getDuplicatePalletTypeByIdWithRequestBuilder(palletTypeId palletTypeId: Int32) -> RequestBuilder<PalletType> {
        var path = "/beta/palletType/duplicate/{palletTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PalletType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search palletTypes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPalletTypeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [PalletType]?, error: ErrorType?) -> Void)) {
        getPalletTypeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search palletTypes by filter
     - GET /beta/palletType/search
     - Returns the list of palletTypes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "packableLengthIn" : 2.3021358869347654518833223846741020679473876953125,
  "palletHeightIn" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "palletLengthIn" : 6.02745618307040320615897144307382404804229736328125,
  "name" : "name",
  "packableWidthIn" : 7.061401241503109105224211816675961017608642578125,
  "packableHeightIn" : 9.301444243932575517419536481611430644989013671875,
  "id" : 0,
  "isActive" : false,
  "palletWeightLbs" : 5.63737665663332876420099637471139430999755859375,
  "palletWidthIn" : 1.46581298050294517310021547018550336360931396484375,
  "lobId" : 3
}, {
  "packableLengthIn" : 2.3021358869347654518833223846741020679473876953125,
  "palletHeightIn" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "palletLengthIn" : 6.02745618307040320615897144307382404804229736328125,
  "name" : "name",
  "packableWidthIn" : 7.061401241503109105224211816675961017608642578125,
  "packableHeightIn" : 9.301444243932575517419536481611430644989013671875,
  "id" : 0,
  "isActive" : false,
  "palletWeightLbs" : 5.63737665663332876420099637471139430999755859375,
  "palletWidthIn" : 1.46581298050294517310021547018550336360931396484375,
  "lobId" : 3
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[PalletType]> 
     */
    public class func getPalletTypeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[PalletType]> {
        let path = "/beta/palletType/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PalletType]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a palletType by id
     
     - parameter palletTypeId: (path) Id of the palletType to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPalletTypeById(palletTypeId palletTypeId: Int32, completion: ((data: PalletType?, error: ErrorType?) -> Void)) {
        getPalletTypeByIdWithRequestBuilder(palletTypeId: palletTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a palletType by id
     - GET /beta/palletType/{palletTypeId}
     - Returns the palletType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "packableLengthIn" : 2.3021358869347654518833223846741020679473876953125,
  "palletHeightIn" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "palletLengthIn" : 6.02745618307040320615897144307382404804229736328125,
  "name" : "name",
  "packableWidthIn" : 7.061401241503109105224211816675961017608642578125,
  "packableHeightIn" : 9.301444243932575517419536481611430644989013671875,
  "id" : 0,
  "isActive" : false,
  "palletWeightLbs" : 5.63737665663332876420099637471139430999755859375,
  "palletWidthIn" : 1.46581298050294517310021547018550336360931396484375,
  "lobId" : 3
}}]
     
     - parameter palletTypeId: (path) Id of the palletType to be returned. 

     - returns: RequestBuilder<PalletType> 
     */
    public class func getPalletTypeByIdWithRequestBuilder(palletTypeId palletTypeId: Int32) -> RequestBuilder<PalletType> {
        var path = "/beta/palletType/{palletTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PalletType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a palletType.
     
     - parameter palletTypeId: (path) Id of the palletType to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPalletTypeFiles(palletTypeId palletTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPalletTypeFilesWithRequestBuilder(palletTypeId: palletTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a palletType.
     - GET /beta/palletType/{palletTypeId}/file
     - Get all existing palletType files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPalletTypeFilesWithRequestBuilder(palletTypeId palletTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a palletType.
     
     - parameter palletTypeId: (path) Id of the palletType to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPalletTypeTags(palletTypeId palletTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPalletTypeTagsWithRequestBuilder(palletTypeId: palletTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a palletType.
     - GET /beta/palletType/{palletTypeId}/tag
     - Get all existing palletType tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter palletTypeId: (path) Id of the palletType to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPalletTypeTagsWithRequestBuilder(palletTypeId palletTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/palletType/{palletTypeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{palletTypeId}", withString: "\(palletTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a palletType
     
     - parameter body: (body) PalletType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePalletType(body body: PalletType, completion: ((error: ErrorType?) -> Void)) {
        updatePalletTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a palletType
     - PUT /beta/palletType
     - Updates an existing palletType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) PalletType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updatePalletTypeWithRequestBuilder(body body: PalletType) -> RequestBuilder<Void> {
        let path = "/beta/palletType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a palletType custom fields
     
     - parameter body: (body) PalletType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePalletTypeCustomFields(body body: PalletType, completion: ((error: ErrorType?) -> Void)) {
        updatePalletTypeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a palletType custom fields
     - PUT /beta/palletType/customFields
     - Updates an existing palletType custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) PalletType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updatePalletTypeCustomFieldsWithRequestBuilder(body body: PalletType) -> RequestBuilder<Void> {
        let path = "/beta/palletType/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
