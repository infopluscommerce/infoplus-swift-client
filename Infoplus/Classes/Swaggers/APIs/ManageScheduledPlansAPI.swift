//
// ManageScheduledPlansAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ManageScheduledPlansAPI: APIBase {
    /**
     
     Create a manageScheduledPlans
     
     - parameter body: (body) ManageScheduledPlans to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addManageScheduledPlans(body body: ManageScheduledPlans, completion: ((data: ManageScheduledPlans?, error: ErrorType?) -> Void)) {
        addManageScheduledPlansWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a manageScheduledPlans
     
     - POST /v2.0/manageScheduledPlans
     - Inserts a new manageScheduledPlans using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "scheduledplantypeid" : 123,
  "deleted" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "aeiou",
  "active" : true,
  "planid" : 123,
  "id" : 123,
  "user" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) ManageScheduledPlans to be inserted. 

     - returns: RequestBuilder<ManageScheduledPlans> 
     */
    public class func addManageScheduledPlansWithRequestBuilder(body body: ManageScheduledPlans) -> RequestBuilder<ManageScheduledPlans> {
        let path = "/v2.0/manageScheduledPlans"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ManageScheduledPlans>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a manageScheduledPlans
     
     - parameter manageScheduledPlansId: (path) Id of the manageScheduledPlans to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteManageScheduledPlans(manageScheduledPlansId manageScheduledPlansId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteManageScheduledPlansWithRequestBuilder(manageScheduledPlansId: manageScheduledPlansId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a manageScheduledPlans
     
     - DELETE /v2.0/manageScheduledPlans/{manageScheduledPlansId}
     - Deletes the manageScheduledPlans identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter manageScheduledPlansId: (path) Id of the manageScheduledPlans to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteManageScheduledPlansWithRequestBuilder(manageScheduledPlansId manageScheduledPlansId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/manageScheduledPlans/{manageScheduledPlansId}"
        path = path.stringByReplacingOccurrencesOfString("{manageScheduledPlansId}", withString: "\(manageScheduledPlansId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a manageScheduledPlans by id
     
     - parameter manageScheduledPlansId: (path) Id of the manageScheduledPlans to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateManageScheduledPlansById(manageScheduledPlansId manageScheduledPlansId: Int, completion: ((data: ManageScheduledPlans?, error: ErrorType?) -> Void)) {
        getDuplicateManageScheduledPlansByIdWithRequestBuilder(manageScheduledPlansId: manageScheduledPlansId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a manageScheduledPlans by id
     
     - GET /v2.0/manageScheduledPlans/duplicate/{manageScheduledPlansId}
     - Returns a duplicated manageScheduledPlans identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "scheduledplantypeid" : 123,
  "deleted" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "aeiou",
  "active" : true,
  "planid" : 123,
  "id" : 123,
  "user" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter manageScheduledPlansId: (path) Id of the manageScheduledPlans to be duplicated. 

     - returns: RequestBuilder<ManageScheduledPlans> 
     */
    public class func getDuplicateManageScheduledPlansByIdWithRequestBuilder(manageScheduledPlansId manageScheduledPlansId: Int) -> RequestBuilder<ManageScheduledPlans> {
        var path = "/v2.0/manageScheduledPlans/duplicate/{manageScheduledPlansId}"
        path = path.stringByReplacingOccurrencesOfString("{manageScheduledPlansId}", withString: "\(manageScheduledPlansId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ManageScheduledPlans>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search manageScheduledPlanses by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getManageScheduledPlansByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ManageScheduledPlans]?, error: ErrorType?) -> Void)) {
        getManageScheduledPlansByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search manageScheduledPlanses by filter
     
     - GET /v2.0/manageScheduledPlans/search
     - Returns the list of manageScheduledPlanses that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "scheduledplantypeid" : 123,
  "deleted" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "aeiou",
  "active" : true,
  "planid" : 123,
  "id" : 123,
  "user" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ManageScheduledPlans]> 
     */
    public class func getManageScheduledPlansByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ManageScheduledPlans]> {
        let path = "/v2.0/manageScheduledPlans/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ManageScheduledPlans]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a manageScheduledPlans by id
     
     - parameter manageScheduledPlansId: (path) Id of the manageScheduledPlans to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getManageScheduledPlansById(manageScheduledPlansId manageScheduledPlansId: Int, completion: ((data: ManageScheduledPlans?, error: ErrorType?) -> Void)) {
        getManageScheduledPlansByIdWithRequestBuilder(manageScheduledPlansId: manageScheduledPlansId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a manageScheduledPlans by id
     
     - GET /v2.0/manageScheduledPlans/{manageScheduledPlansId}
     - Returns the manageScheduledPlans identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "scheduledplantypeid" : 123,
  "deleted" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "aeiou",
  "active" : true,
  "planid" : 123,
  "id" : 123,
  "user" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter manageScheduledPlansId: (path) Id of the manageScheduledPlans to be returned. 

     - returns: RequestBuilder<ManageScheduledPlans> 
     */
    public class func getManageScheduledPlansByIdWithRequestBuilder(manageScheduledPlansId manageScheduledPlansId: Int) -> RequestBuilder<ManageScheduledPlans> {
        var path = "/v2.0/manageScheduledPlans/{manageScheduledPlansId}"
        path = path.stringByReplacingOccurrencesOfString("{manageScheduledPlansId}", withString: "\(manageScheduledPlansId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ManageScheduledPlans>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a manageScheduledPlans
     
     - parameter body: (body) ManageScheduledPlans to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateManageScheduledPlans(body body: ManageScheduledPlans, completion: ((error: ErrorType?) -> Void)) {
        updateManageScheduledPlansWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a manageScheduledPlans
     
     - PUT /v2.0/manageScheduledPlans
     - Updates an existing manageScheduledPlans using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ManageScheduledPlans to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateManageScheduledPlansWithRequestBuilder(body body: ManageScheduledPlans) -> RequestBuilder<Void> {
        let path = "/v2.0/manageScheduledPlans"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
