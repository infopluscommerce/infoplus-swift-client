//
// VendorAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class VendorAPI: APIBase {
    /**
     
     Create a vendor
     
     - parameter body: (body) Vendor to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVendor(body body: Vendor, completion: ((data: Vendor?, error: ErrorType?) -> Void)) {
        addVendorWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a vendor
     
     - POST /v2.0/vendor
     - Inserts a new vendor using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "zipCode" : "aeiou",
  "product9" : 123,
  "product8" : 123,
  "requestDays" : 123,
  "product7" : 123,
  "city" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 123,
  "product1" : 123,
  "orderAttach" : "aeiou",
  "orderEmail" : "aeiou",
  "product6" : 123,
  "minority" : "aeiou",
  "product5" : 123,
  "product4" : 123,
  "sendQuantityType" : "aeiou",
  "product3" : 123,
  "shipVia" : 123,
  "inactive" : "aeiou",
  "terms" : "aeiou",
  "street" : "aeiou",
  "contact" : "aeiou",
  "id" : 123,
  "street2" : "aeiou",
  "state" : "aeiou",
  "fax" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "actualDays" : 123,
  "vendorNo" : 123,
  "sendOutside" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "podOrderSuffix" : 123,
  "salesTaxCode" : "aeiou",
  "externalId" : "aeiou",
  "chargeOut" : "aeiou",
  "podEmail" : "aeiou",
  "arEmail" : "aeiou",
  "phone" : "aeiou",
  "name" : "aeiou",
  "fob" : "aeiou",
  "podDays" : 123
}}]
     
     - parameter body: (body) Vendor to be inserted. 

     - returns: RequestBuilder<Vendor> 
     */
    public class func addVendorWithRequestBuilder(body body: Vendor) -> RequestBuilder<Vendor> {
        let path = "/v2.0/vendor"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Vendor>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a vendor
     
     - parameter vendorId: (path) Id of the vendor to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVendor(vendorId vendorId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteVendorWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a vendor
     
     - DELETE /v2.0/vendor/{vendorId}
     - Deletes the vendor identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVendorWithRequestBuilder(vendorId vendorId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/vendor/{vendorId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a vendor by id
     
     - parameter vendorId: (path) Id of the vendor to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateVendorById(vendorId vendorId: Int, completion: ((data: Vendor?, error: ErrorType?) -> Void)) {
        getDuplicateVendorByIdWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a vendor by id
     
     - GET /v2.0/vendor/duplicate/{vendorId}
     - Returns a duplicated vendor identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "zipCode" : "aeiou",
  "product9" : 123,
  "product8" : 123,
  "requestDays" : 123,
  "product7" : 123,
  "city" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 123,
  "product1" : 123,
  "orderAttach" : "aeiou",
  "orderEmail" : "aeiou",
  "product6" : 123,
  "minority" : "aeiou",
  "product5" : 123,
  "product4" : 123,
  "sendQuantityType" : "aeiou",
  "product3" : 123,
  "shipVia" : 123,
  "inactive" : "aeiou",
  "terms" : "aeiou",
  "street" : "aeiou",
  "contact" : "aeiou",
  "id" : 123,
  "street2" : "aeiou",
  "state" : "aeiou",
  "fax" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "actualDays" : 123,
  "vendorNo" : 123,
  "sendOutside" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "podOrderSuffix" : 123,
  "salesTaxCode" : "aeiou",
  "externalId" : "aeiou",
  "chargeOut" : "aeiou",
  "podEmail" : "aeiou",
  "arEmail" : "aeiou",
  "phone" : "aeiou",
  "name" : "aeiou",
  "fob" : "aeiou",
  "podDays" : 123
}}]
     
     - parameter vendorId: (path) Id of the vendor to be duplicated. 

     - returns: RequestBuilder<Vendor> 
     */
    public class func getDuplicateVendorByIdWithRequestBuilder(vendorId vendorId: Int) -> RequestBuilder<Vendor> {
        var path = "/v2.0/vendor/duplicate/{vendorId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Vendor>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search vendors by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Vendor]?, error: ErrorType?) -> Void)) {
        getVendorByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search vendors by filter
     
     - GET /v2.0/vendor/search
     - Returns the list of vendors that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "country" : "aeiou",
  "zipCode" : "aeiou",
  "product9" : 123,
  "product8" : 123,
  "requestDays" : 123,
  "product7" : 123,
  "city" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 123,
  "product1" : 123,
  "orderAttach" : "aeiou",
  "orderEmail" : "aeiou",
  "product6" : 123,
  "minority" : "aeiou",
  "product5" : 123,
  "product4" : 123,
  "sendQuantityType" : "aeiou",
  "product3" : 123,
  "shipVia" : 123,
  "inactive" : "aeiou",
  "terms" : "aeiou",
  "street" : "aeiou",
  "contact" : "aeiou",
  "id" : 123,
  "street2" : "aeiou",
  "state" : "aeiou",
  "fax" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "actualDays" : 123,
  "vendorNo" : 123,
  "sendOutside" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "podOrderSuffix" : 123,
  "salesTaxCode" : "aeiou",
  "externalId" : "aeiou",
  "chargeOut" : "aeiou",
  "podEmail" : "aeiou",
  "arEmail" : "aeiou",
  "phone" : "aeiou",
  "name" : "aeiou",
  "fob" : "aeiou",
  "podDays" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Vendor]> 
     */
    public class func getVendorByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Vendor]> {
        let path = "/v2.0/vendor/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Vendor]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a vendor by id
     
     - parameter vendorId: (path) Id of the vendor to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorById(vendorId vendorId: Int, completion: ((data: Vendor?, error: ErrorType?) -> Void)) {
        getVendorByIdWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a vendor by id
     
     - GET /v2.0/vendor/{vendorId}
     - Returns the vendor identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "zipCode" : "aeiou",
  "product9" : 123,
  "product8" : 123,
  "requestDays" : 123,
  "product7" : 123,
  "city" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 123,
  "product1" : 123,
  "orderAttach" : "aeiou",
  "orderEmail" : "aeiou",
  "product6" : 123,
  "minority" : "aeiou",
  "product5" : 123,
  "product4" : 123,
  "sendQuantityType" : "aeiou",
  "product3" : 123,
  "shipVia" : 123,
  "inactive" : "aeiou",
  "terms" : "aeiou",
  "street" : "aeiou",
  "contact" : "aeiou",
  "id" : 123,
  "street2" : "aeiou",
  "state" : "aeiou",
  "fax" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "actualDays" : 123,
  "vendorNo" : 123,
  "sendOutside" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "podOrderSuffix" : 123,
  "salesTaxCode" : "aeiou",
  "externalId" : "aeiou",
  "chargeOut" : "aeiou",
  "podEmail" : "aeiou",
  "arEmail" : "aeiou",
  "phone" : "aeiou",
  "name" : "aeiou",
  "fob" : "aeiou",
  "podDays" : 123
}}]
     
     - parameter vendorId: (path) Id of the vendor to be returned. 

     - returns: RequestBuilder<Vendor> 
     */
    public class func getVendorByIdWithRequestBuilder(vendorId vendorId: Int) -> RequestBuilder<Vendor> {
        var path = "/v2.0/vendor/{vendorId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Vendor>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a vendor
     
     - parameter body: (body) Vendor to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVendor(body body: Vendor, completion: ((error: ErrorType?) -> Void)) {
        updateVendorWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a vendor
     
     - PUT /v2.0/vendor
     - Updates an existing vendor using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Vendor to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateVendorWithRequestBuilder(body body: Vendor) -> RequestBuilder<Void> {
        let path = "/v2.0/vendor"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a vendor custom fields
     
     - parameter body: (body) Vendor to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVendorCustomFields(body body: Vendor, completion: ((error: ErrorType?) -> Void)) {
        updateVendorCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a vendor custom fields
     
     - PUT /v2.0/vendor/customFields
     - Updates an existing vendor custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Vendor to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateVendorCustomFieldsWithRequestBuilder(body body: Vendor) -> RequestBuilder<Void> {
        let path = "/v2.0/vendor/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
