//
// VendorAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class VendorAPI: APIBase {
    /**
     Create a vendor
     
     - parameter body: (body) Vendor to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVendor(body body: Vendor, completion: ((data: Vendor?, error: ErrorType?) -> Void)) {
        addVendorWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a vendor
     - POST /beta/vendor
     - Inserts a new vendor using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "product9" : 1,
  "product8" : 1,
  "requestDays" : 5,
  "product7" : 1,
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 9,
  "product1" : 7,
  "orderAttach" : "orderAttach",
  "orderEmail" : "orderEmail",
  "product6" : 7,
  "minority" : "minority",
  "product5" : 4,
  "product4" : 2,
  "sendQuantityType" : "sendQuantityType",
  "product3" : 3,
  "shipVia" : 5,
  "inactive" : "inactive",
  "terms" : "terms",
  "street" : "street",
  "contact" : "contact",
  "id" : 0,
  "street2" : "street2",
  "state" : "state",
  "fax" : "fax",
  "lobId" : 1,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "actualDays" : 2,
  "vendorNo" : 6,
  "sendOutside" : "sendOutside",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "podOrderSuffix" : 7,
  "salesTaxCode" : "salesTaxCode",
  "externalId" : "externalId",
  "chargeOut" : "chargeOut",
  "podEmail" : "podEmail",
  "arEmail" : "arEmail",
  "phone" : "phone",
  "name" : "name",
  "fob" : "fob",
  "podDays" : 6
}}]
     
     - parameter body: (body) Vendor to be inserted. 

     - returns: RequestBuilder<Vendor> 
     */
    public class func addVendorWithRequestBuilder(body body: Vendor) -> RequestBuilder<Vendor> {
        let path = "/beta/vendor"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Vendor>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a vendor
     
     - parameter vendorId: (path) Id of the vendor to add an audit to 
     - parameter vendorAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVendorAudit(vendorId vendorId: Int32, vendorAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addVendorAuditWithRequestBuilder(vendorId: vendorId, vendorAudit: vendorAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a vendor
     - PUT /beta/vendor/{vendorId}/audit/{vendorAudit}
     - Adds an audit to an existing vendor.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to add an audit to 
     - parameter vendorAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addVendorAuditWithRequestBuilder(vendorId vendorId: Int32, vendorAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/audit/{vendorAudit}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{vendorAudit}", withString: "\(vendorAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a vendor
     
     - parameter vendorId: (path) Id of the vendor to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVendorFile(vendorId vendorId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addVendorFileWithRequestBuilder(vendorId: vendorId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a vendor
     - POST /beta/vendor/{vendorId}/file/{fileName}
     - Adds a file to an existing vendor.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addVendorFileWithRequestBuilder(vendorId vendorId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a vendor by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter vendorId: (path) Id of the vendor to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVendorFileByURL(body body: RecordFile, vendorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addVendorFileByURLWithRequestBuilder(body: body, vendorId: vendorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a vendor by URL.
     - POST /beta/vendor/{vendorId}/file
     - Adds a file to an existing vendor by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter vendorId: (path) Id of the vendor to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addVendorFileByURLWithRequestBuilder(body body: RecordFile, vendorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/file"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a vendor.
     
     - parameter vendorId: (path) Id of the vendor to add a tag to 
     - parameter vendorTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addVendorTag(vendorId vendorId: Int32, vendorTag: String, completion: ((error: ErrorType?) -> Void)) {
        addVendorTagWithRequestBuilder(vendorId: vendorId, vendorTag: vendorTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a vendor.
     - PUT /beta/vendor/{vendorId}/tag/{vendorTag}
     - Adds a tag to an existing vendor.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to add a tag to 
     - parameter vendorTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addVendorTagWithRequestBuilder(vendorId vendorId: Int32, vendorTag: String) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/tag/{vendorTag}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{vendorTag}", withString: "\(vendorTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a vendor
     
     - parameter vendorId: (path) Id of the vendor to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVendor(vendorId vendorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteVendorWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a vendor
     - DELETE /beta/vendor/{vendorId}
     - Deletes the vendor identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVendorWithRequestBuilder(vendorId vendorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a vendor.
     
     - parameter vendorId: (path) Id of the vendor to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVendorFile(vendorId vendorId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteVendorFileWithRequestBuilder(vendorId: vendorId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a vendor.
     - DELETE /beta/vendor/{vendorId}/file/{fileId}
     - Deletes an existing vendor file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVendorFileWithRequestBuilder(vendorId vendorId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a vendor.
     
     - parameter vendorId: (path) Id of the vendor to remove tag from 
     - parameter vendorTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteVendorTag(vendorId vendorId: Int32, vendorTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteVendorTagWithRequestBuilder(vendorId: vendorId, vendorTag: vendorTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a vendor.
     - DELETE /beta/vendor/{vendorId}/tag/{vendorTag}
     - Deletes an existing vendor tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to remove tag from 
     - parameter vendorTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteVendorTagWithRequestBuilder(vendorId vendorId: Int32, vendorTag: String) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/tag/{vendorTag}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{vendorTag}", withString: "\(vendorTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a vendor by id
     
     - parameter vendorId: (path) Id of the vendor to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateVendorById(vendorId vendorId: Int32, completion: ((data: Vendor?, error: ErrorType?) -> Void)) {
        getDuplicateVendorByIdWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a vendor by id
     - GET /beta/vendor/duplicate/{vendorId}
     - Returns a duplicated vendor identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "product9" : 1,
  "product8" : 1,
  "requestDays" : 5,
  "product7" : 1,
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 9,
  "product1" : 7,
  "orderAttach" : "orderAttach",
  "orderEmail" : "orderEmail",
  "product6" : 7,
  "minority" : "minority",
  "product5" : 4,
  "product4" : 2,
  "sendQuantityType" : "sendQuantityType",
  "product3" : 3,
  "shipVia" : 5,
  "inactive" : "inactive",
  "terms" : "terms",
  "street" : "street",
  "contact" : "contact",
  "id" : 0,
  "street2" : "street2",
  "state" : "state",
  "fax" : "fax",
  "lobId" : 1,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "actualDays" : 2,
  "vendorNo" : 6,
  "sendOutside" : "sendOutside",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "podOrderSuffix" : 7,
  "salesTaxCode" : "salesTaxCode",
  "externalId" : "externalId",
  "chargeOut" : "chargeOut",
  "podEmail" : "podEmail",
  "arEmail" : "arEmail",
  "phone" : "phone",
  "name" : "name",
  "fob" : "fob",
  "podDays" : 6
}}]
     
     - parameter vendorId: (path) Id of the vendor to be duplicated. 

     - returns: RequestBuilder<Vendor> 
     */
    public class func getDuplicateVendorByIdWithRequestBuilder(vendorId vendorId: Int32) -> RequestBuilder<Vendor> {
        var path = "/beta/vendor/duplicate/{vendorId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Vendor>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search vendors by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Vendor]?, error: ErrorType?) -> Void)) {
        getVendorByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search vendors by filter
     - GET /beta/vendor/search
     - Returns the list of vendors that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "country" : "country",
  "zipCode" : "zipCode",
  "product9" : 1,
  "product8" : 1,
  "requestDays" : 5,
  "product7" : 1,
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 9,
  "product1" : 7,
  "orderAttach" : "orderAttach",
  "orderEmail" : "orderEmail",
  "product6" : 7,
  "minority" : "minority",
  "product5" : 4,
  "product4" : 2,
  "sendQuantityType" : "sendQuantityType",
  "product3" : 3,
  "shipVia" : 5,
  "inactive" : "inactive",
  "terms" : "terms",
  "street" : "street",
  "contact" : "contact",
  "id" : 0,
  "street2" : "street2",
  "state" : "state",
  "fax" : "fax",
  "lobId" : 1,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "actualDays" : 2,
  "vendorNo" : 6,
  "sendOutside" : "sendOutside",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "podOrderSuffix" : 7,
  "salesTaxCode" : "salesTaxCode",
  "externalId" : "externalId",
  "chargeOut" : "chargeOut",
  "podEmail" : "podEmail",
  "arEmail" : "arEmail",
  "phone" : "phone",
  "name" : "name",
  "fob" : "fob",
  "podDays" : 6
}, {
  "country" : "country",
  "zipCode" : "zipCode",
  "product9" : 1,
  "product8" : 1,
  "requestDays" : 5,
  "product7" : 1,
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 9,
  "product1" : 7,
  "orderAttach" : "orderAttach",
  "orderEmail" : "orderEmail",
  "product6" : 7,
  "minority" : "minority",
  "product5" : 4,
  "product4" : 2,
  "sendQuantityType" : "sendQuantityType",
  "product3" : 3,
  "shipVia" : 5,
  "inactive" : "inactive",
  "terms" : "terms",
  "street" : "street",
  "contact" : "contact",
  "id" : 0,
  "street2" : "street2",
  "state" : "state",
  "fax" : "fax",
  "lobId" : 1,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "actualDays" : 2,
  "vendorNo" : 6,
  "sendOutside" : "sendOutside",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "podOrderSuffix" : 7,
  "salesTaxCode" : "salesTaxCode",
  "externalId" : "externalId",
  "chargeOut" : "chargeOut",
  "podEmail" : "podEmail",
  "arEmail" : "arEmail",
  "phone" : "phone",
  "name" : "name",
  "fob" : "fob",
  "podDays" : 6
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Vendor]> 
     */
    public class func getVendorByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Vendor]> {
        let path = "/beta/vendor/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Vendor]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a vendor by id
     
     - parameter vendorId: (path) Id of the vendor to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorById(vendorId vendorId: Int32, completion: ((data: Vendor?, error: ErrorType?) -> Void)) {
        getVendorByIdWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a vendor by id
     - GET /beta/vendor/{vendorId}
     - Returns the vendor identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "zipCode" : "zipCode",
  "product9" : 1,
  "product8" : 1,
  "requestDays" : 5,
  "product7" : 1,
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "product2" : 9,
  "product1" : 7,
  "orderAttach" : "orderAttach",
  "orderEmail" : "orderEmail",
  "product6" : 7,
  "minority" : "minority",
  "product5" : 4,
  "product4" : 2,
  "sendQuantityType" : "sendQuantityType",
  "product3" : 3,
  "shipVia" : 5,
  "inactive" : "inactive",
  "terms" : "terms",
  "street" : "street",
  "contact" : "contact",
  "id" : 0,
  "street2" : "street2",
  "state" : "state",
  "fax" : "fax",
  "lobId" : 1,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "actualDays" : 2,
  "vendorNo" : 6,
  "sendOutside" : "sendOutside",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "podOrderSuffix" : 7,
  "salesTaxCode" : "salesTaxCode",
  "externalId" : "externalId",
  "chargeOut" : "chargeOut",
  "podEmail" : "podEmail",
  "arEmail" : "arEmail",
  "phone" : "phone",
  "name" : "name",
  "fob" : "fob",
  "podDays" : 6
}}]
     
     - parameter vendorId: (path) Id of the vendor to be returned. 

     - returns: RequestBuilder<Vendor> 
     */
    public class func getVendorByIdWithRequestBuilder(vendorId vendorId: Int32) -> RequestBuilder<Vendor> {
        var path = "/beta/vendor/{vendorId}"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Vendor>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a vendor.
     
     - parameter vendorId: (path) Id of the vendor to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorFiles(vendorId vendorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getVendorFilesWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a vendor.
     - GET /beta/vendor/{vendorId}/file
     - Get all existing vendor files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getVendorFilesWithRequestBuilder(vendorId vendorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/file"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a vendor.
     
     - parameter vendorId: (path) Id of the vendor to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVendorTags(vendorId vendorId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getVendorTagsWithRequestBuilder(vendorId: vendorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a vendor.
     - GET /beta/vendor/{vendorId}/tag
     - Get all existing vendor tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter vendorId: (path) Id of the vendor to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getVendorTagsWithRequestBuilder(vendorId vendorId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/vendor/{vendorId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{vendorId}", withString: "\(vendorId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a vendor
     
     - parameter body: (body) Vendor to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVendor(body body: Vendor, completion: ((error: ErrorType?) -> Void)) {
        updateVendorWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a vendor
     - PUT /beta/vendor
     - Updates an existing vendor using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Vendor to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateVendorWithRequestBuilder(body body: Vendor) -> RequestBuilder<Void> {
        let path = "/beta/vendor"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a vendor custom fields
     
     - parameter body: (body) Vendor to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateVendorCustomFields(body body: Vendor, completion: ((error: ErrorType?) -> Void)) {
        updateVendorCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a vendor custom fields
     - PUT /beta/vendor/customFields
     - Updates an existing vendor custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Vendor to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateVendorCustomFieldsWithRequestBuilder(body body: Vendor) -> RequestBuilder<Void> {
        let path = "/beta/vendor/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
