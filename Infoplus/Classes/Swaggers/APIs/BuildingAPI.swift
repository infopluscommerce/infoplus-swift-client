//
// BuildingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BuildingAPI: APIBase {
    /**
     Create a building
     
     - parameter body: (body) Building to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBuilding(body body: Building, completion: ((data: Building?, error: ErrorType?) -> Void)) {
        addBuildingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a building
     - POST /beta/building
     - Inserts a new building using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) Building to be inserted. 

     - returns: RequestBuilder<Building> 
     */
    public class func addBuildingWithRequestBuilder(body body: Building) -> RequestBuilder<Building> {
        let path = "/beta/building"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Building>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a building
     
     - parameter buildingId: (path) Id of the building to add an audit to 
     - parameter buildingAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBuildingAudit(buildingId buildingId: Int32, buildingAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addBuildingAuditWithRequestBuilder(buildingId: buildingId, buildingAudit: buildingAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a building
     - PUT /beta/building/{buildingId}/audit/{buildingAudit}
     - Adds an audit to an existing building.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to add an audit to 
     - parameter buildingAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addBuildingAuditWithRequestBuilder(buildingId buildingId: Int32, buildingAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/audit/{buildingAudit}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{buildingAudit}", withString: "\(buildingAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a building
     
     - parameter buildingId: (path) Id of the building to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBuildingFile(buildingId buildingId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addBuildingFileWithRequestBuilder(buildingId: buildingId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a building
     - POST /beta/building/{buildingId}/file/{fileName}
     - Adds a file to an existing building.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addBuildingFileWithRequestBuilder(buildingId buildingId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a building by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter buildingId: (path) Id of the building to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBuildingFileByURL(body body: RecordFile, buildingId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addBuildingFileByURLWithRequestBuilder(body: body, buildingId: buildingId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a building by URL.
     - POST /beta/building/{buildingId}/file
     - Adds a file to an existing building by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter buildingId: (path) Id of the building to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addBuildingFileByURLWithRequestBuilder(body body: RecordFile, buildingId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/file"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a building.
     
     - parameter buildingId: (path) Id of the building to add a tag to 
     - parameter buildingTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBuildingTag(buildingId buildingId: Int32, buildingTag: String, completion: ((error: ErrorType?) -> Void)) {
        addBuildingTagWithRequestBuilder(buildingId: buildingId, buildingTag: buildingTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a building.
     - PUT /beta/building/{buildingId}/tag/{buildingTag}
     - Adds a tag to an existing building.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to add a tag to 
     - parameter buildingTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addBuildingTagWithRequestBuilder(buildingId buildingId: Int32, buildingTag: String) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/tag/{buildingTag}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{buildingTag}", withString: "\(buildingTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a building
     
     - parameter buildingId: (path) Id of the building to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBuilding(buildingId buildingId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteBuildingWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a building
     - DELETE /beta/building/{buildingId}
     - Deletes the building identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBuildingWithRequestBuilder(buildingId buildingId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a building.
     
     - parameter buildingId: (path) Id of the building to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBuildingFile(buildingId buildingId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteBuildingFileWithRequestBuilder(buildingId: buildingId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a building.
     - DELETE /beta/building/{buildingId}/file/{fileId}
     - Deletes an existing building file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBuildingFileWithRequestBuilder(buildingId buildingId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a building.
     
     - parameter buildingId: (path) Id of the building to remove tag from 
     - parameter buildingTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBuildingTag(buildingId buildingId: Int32, buildingTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteBuildingTagWithRequestBuilder(buildingId: buildingId, buildingTag: buildingTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a building.
     - DELETE /beta/building/{buildingId}/tag/{buildingTag}
     - Deletes an existing building tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to remove tag from 
     - parameter buildingTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBuildingTagWithRequestBuilder(buildingId buildingId: Int32, buildingTag: String) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/tag/{buildingTag}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{buildingTag}", withString: "\(buildingTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search buildings by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBuildingByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Building]?, error: ErrorType?) -> Void)) {
        getBuildingByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search buildings by filter
     - GET /beta/building/search
     - Returns the list of buildings that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Building]> 
     */
    public class func getBuildingByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Building]> {
        let path = "/beta/building/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Building]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a building by id
     
     - parameter buildingId: (path) Id of the building to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBuildingById(buildingId buildingId: Int32, completion: ((data: Building?, error: ErrorType?) -> Void)) {
        getBuildingByIdWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a building by id
     - GET /beta/building/{buildingId}
     - Returns the building identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter buildingId: (path) Id of the building to be returned. 

     - returns: RequestBuilder<Building> 
     */
    public class func getBuildingByIdWithRequestBuilder(buildingId buildingId: Int32) -> RequestBuilder<Building> {
        var path = "/beta/building/{buildingId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Building>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a building.
     
     - parameter buildingId: (path) Id of the building to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBuildingFiles(buildingId buildingId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getBuildingFilesWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a building.
     - GET /beta/building/{buildingId}/file
     - Get all existing building files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getBuildingFilesWithRequestBuilder(buildingId buildingId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/file"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a building.
     
     - parameter buildingId: (path) Id of the building to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBuildingTags(buildingId buildingId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getBuildingTagsWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a building.
     - GET /beta/building/{buildingId}/tag
     - Get all existing building tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getBuildingTagsWithRequestBuilder(buildingId buildingId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/building/{buildingId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a building by id
     
     - parameter buildingId: (path) Id of the building to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateBuildingById(buildingId buildingId: Int32, completion: ((data: Building?, error: ErrorType?) -> Void)) {
        getDuplicateBuildingByIdWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a building by id
     - GET /beta/building/duplicate/{buildingId}
     - Returns a duplicated building identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter buildingId: (path) Id of the building to be duplicated. 

     - returns: RequestBuilder<Building> 
     */
    public class func getDuplicateBuildingByIdWithRequestBuilder(buildingId buildingId: Int32) -> RequestBuilder<Building> {
        var path = "/beta/building/duplicate/{buildingId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Building>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a building
     
     - parameter body: (body) Building to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBuilding(body body: Building, completion: ((error: ErrorType?) -> Void)) {
        updateBuildingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a building
     - PUT /beta/building
     - Updates an existing building using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Building to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBuildingWithRequestBuilder(body body: Building) -> RequestBuilder<Void> {
        let path = "/beta/building"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a building custom fields
     
     - parameter body: (body) Building to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBuildingCustomFields(body body: Building, completion: ((error: ErrorType?) -> Void)) {
        updateBuildingCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a building custom fields
     - PUT /beta/building/customFields
     - Updates an existing building custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Building to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBuildingCustomFieldsWithRequestBuilder(body body: Building) -> RequestBuilder<Void> {
        let path = "/beta/building/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
