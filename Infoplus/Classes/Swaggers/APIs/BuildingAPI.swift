//
// BuildingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BuildingAPI: APIBase {
    /**
     
     Create a building
     
     - parameter body: (body) Building to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBuilding(body body: Building, completion: ((data: Building?, error: ErrorType?) -> Void)) {
        addBuildingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a building
     
     - POST /v2.0/building
     - Inserts a new building using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) Building to be inserted. 

     - returns: RequestBuilder<Building> 
     */
    public class func addBuildingWithRequestBuilder(body body: Building) -> RequestBuilder<Building> {
        let path = "/v2.0/building"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Building>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a building
     
     - parameter buildingId: (path) Id of the building to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBuilding(buildingId buildingId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteBuildingWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a building
     
     - DELETE /v2.0/building/{buildingId}
     - Deletes the building identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter buildingId: (path) Id of the building to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBuildingWithRequestBuilder(buildingId buildingId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/building/{buildingId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search buildings by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBuildingByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Building]?, error: ErrorType?) -> Void)) {
        getBuildingByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search buildings by filter
     
     - GET /v2.0/building/search
     - Returns the list of buildings that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "address" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Building]> 
     */
    public class func getBuildingByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Building]> {
        let path = "/v2.0/building/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Building]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a building by id
     
     - parameter buildingId: (path) Id of the building to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBuildingById(buildingId buildingId: Int, completion: ((data: Building?, error: ErrorType?) -> Void)) {
        getBuildingByIdWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a building by id
     
     - GET /v2.0/building/{buildingId}
     - Returns the building identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter buildingId: (path) Id of the building to be returned. 

     - returns: RequestBuilder<Building> 
     */
    public class func getBuildingByIdWithRequestBuilder(buildingId buildingId: Int) -> RequestBuilder<Building> {
        var path = "/v2.0/building/{buildingId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Building>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a building by id
     
     - parameter buildingId: (path) Id of the building to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateBuildingById(buildingId buildingId: Int, completion: ((data: Building?, error: ErrorType?) -> Void)) {
        getDuplicateBuildingByIdWithRequestBuilder(buildingId: buildingId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a building by id
     
     - GET /v2.0/building/duplicate/{buildingId}
     - Returns a duplicated building identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter buildingId: (path) Id of the building to be duplicated. 

     - returns: RequestBuilder<Building> 
     */
    public class func getDuplicateBuildingByIdWithRequestBuilder(buildingId buildingId: Int) -> RequestBuilder<Building> {
        var path = "/v2.0/building/duplicate/{buildingId}"
        path = path.stringByReplacingOccurrencesOfString("{buildingId}", withString: "\(buildingId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Building>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a building
     
     - parameter body: (body) Building to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBuilding(body body: Building, completion: ((error: ErrorType?) -> Void)) {
        updateBuildingWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a building
     
     - PUT /v2.0/building
     - Updates an existing building using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Building to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBuildingWithRequestBuilder(body body: Building) -> RequestBuilder<Void> {
        let path = "/v2.0/building"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a building custom fields
     
     - parameter body: (body) Building to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBuildingCustomFields(body body: Building, completion: ((error: ErrorType?) -> Void)) {
        updateBuildingCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a building custom fields
     
     - PUT /v2.0/building/customFields
     - Updates an existing building custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Building to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBuildingCustomFieldsWithRequestBuilder(body body: Building) -> RequestBuilder<Void> {
        let path = "/v2.0/building/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
