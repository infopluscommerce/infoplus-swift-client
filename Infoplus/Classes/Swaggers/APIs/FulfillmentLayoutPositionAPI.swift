//
// FulfillmentLayoutPositionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class FulfillmentLayoutPositionAPI: APIBase {
    /**
     Add new audit for a fulfillmentLayoutPosition
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to add an audit to 
     - parameter fulfillmentLayoutPositionAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentLayoutPositionAudit(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fulfillmentLayoutPositionAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentLayoutPositionAuditWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId, fulfillmentLayoutPositionAudit: fulfillmentLayoutPositionAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a fulfillmentLayoutPosition
     - PUT /beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/audit/{fulfillmentLayoutPositionAudit}
     - Adds an audit to an existing fulfillmentLayoutPosition.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to add an audit to 
     - parameter fulfillmentLayoutPositionAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentLayoutPositionAuditWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fulfillmentLayoutPositionAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/audit/{fulfillmentLayoutPositionAudit}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionAudit}", withString: "\(fulfillmentLayoutPositionAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a fulfillmentLayoutPosition
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentLayoutPositionFile(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentLayoutPositionFileWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a fulfillmentLayoutPosition
     - POST /beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileName}
     - Adds a file to an existing fulfillmentLayoutPosition.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentLayoutPositionFileWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a fulfillmentLayoutPosition.
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to add a tag to 
     - parameter fulfillmentLayoutPositionTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentLayoutPositionTag(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fulfillmentLayoutPositionTag: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentLayoutPositionTagWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag: fulfillmentLayoutPositionTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a fulfillmentLayoutPosition.
     - PUT /beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}
     - Adds a tag to an existing fulfillmentLayoutPosition.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to add a tag to 
     - parameter fulfillmentLayoutPositionTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentLayoutPositionTagWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fulfillmentLayoutPositionTag: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionTag}", withString: "\(fulfillmentLayoutPositionTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a fulfillmentLayoutPosition.
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to remove tag from 
     - parameter fulfillmentLayoutPositionTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFulfillmentLayoutPositionTag(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fulfillmentLayoutPositionTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteFulfillmentLayoutPositionTagWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId, fulfillmentLayoutPositionTag: fulfillmentLayoutPositionTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a fulfillmentLayoutPosition.
     - DELETE /beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}
     - Deletes an existing fulfillmentLayoutPosition tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to remove tag from 
     - parameter fulfillmentLayoutPositionTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFulfillmentLayoutPositionTagWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, fulfillmentLayoutPositionTag: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag/{fulfillmentLayoutPositionTag}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionTag}", withString: "\(fulfillmentLayoutPositionTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a fulfillmentLayoutPosition by id
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateFulfillmentLayoutPositionById(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, completion: ((data: FulfillmentLayoutPosition?, error: ErrorType?) -> Void)) {
        getDuplicateFulfillmentLayoutPositionByIdWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a fulfillmentLayoutPosition by id
     - GET /beta/fulfillmentLayoutPosition/duplicate/{fulfillmentLayoutPositionId}
     - Returns a duplicated fulfillmentLayoutPosition identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "quantity" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "layoutPosition" : "layoutPosition",
  "customFields" : {
    "key" : "{}"
  },
  "pickPosition" : "pickPosition",
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "sku" : "sku",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}}]
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to be duplicated. 

     - returns: RequestBuilder<FulfillmentLayoutPosition> 
     */
    public class func getDuplicateFulfillmentLayoutPositionByIdWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32) -> RequestBuilder<FulfillmentLayoutPosition> {
        var path = "/beta/fulfillmentLayoutPosition/duplicate/{fulfillmentLayoutPositionId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentLayoutPosition>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search fulfillmentLayoutPositions by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentLayoutPositionByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [FulfillmentLayoutPosition]?, error: ErrorType?) -> Void)) {
        getFulfillmentLayoutPositionByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search fulfillmentLayoutPositions by filter
     - GET /beta/fulfillmentLayoutPosition/search
     - Returns the list of fulfillmentLayoutPositions that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "quantity" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "layoutPosition" : "layoutPosition",
  "customFields" : {
    "key" : "{}"
  },
  "pickPosition" : "pickPosition",
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "sku" : "sku",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}, {
  "quantity" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "layoutPosition" : "layoutPosition",
  "customFields" : {
    "key" : "{}"
  },
  "pickPosition" : "pickPosition",
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "sku" : "sku",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[FulfillmentLayoutPosition]> 
     */
    public class func getFulfillmentLayoutPositionByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[FulfillmentLayoutPosition]> {
        let path = "/beta/fulfillmentLayoutPosition/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[FulfillmentLayoutPosition]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a fulfillmentLayoutPosition by id
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentLayoutPositionById(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, completion: ((data: FulfillmentLayoutPosition?, error: ErrorType?) -> Void)) {
        getFulfillmentLayoutPositionByIdWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a fulfillmentLayoutPosition by id
     - GET /beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}
     - Returns the fulfillmentLayoutPosition identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "quantity" : 5,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "layoutPosition" : "layoutPosition",
  "customFields" : {
    "key" : "{}"
  },
  "pickPosition" : "pickPosition",
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "sku" : "sku",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}}]
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to be returned. 

     - returns: RequestBuilder<FulfillmentLayoutPosition> 
     */
    public class func getFulfillmentLayoutPositionByIdWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32) -> RequestBuilder<FulfillmentLayoutPosition> {
        var path = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentLayoutPosition>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a fulfillmentLayoutPosition.
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentLayoutPositionTags(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getFulfillmentLayoutPositionTagsWithRequestBuilder(fulfillmentLayoutPositionId: fulfillmentLayoutPositionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a fulfillmentLayoutPosition.
     - GET /beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag
     - Get all existing fulfillmentLayoutPosition tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentLayoutPositionId: (path) Id of the fulfillmentLayoutPosition to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getFulfillmentLayoutPositionTagsWithRequestBuilder(fulfillmentLayoutPositionId fulfillmentLayoutPositionId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentLayoutPosition/{fulfillmentLayoutPositionId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentLayoutPositionId}", withString: "\(fulfillmentLayoutPositionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
