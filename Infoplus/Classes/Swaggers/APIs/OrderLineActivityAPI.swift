//
// OrderLineActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class OrderLineActivityAPI: APIBase {
    /**
     Create an orderLineActivity
     
     - parameter body: (body) OrderLineActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderLineActivity(body body: OrderLineActivity, completion: ((data: OrderLineActivity?, error: ErrorType?) -> Void)) {
        addOrderLineActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an orderLineActivity
     - POST /beta/orderLineActivity
     - Inserts a new orderLineActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "itemMajorGroupId" : 9,
  "alcoholTypeId" : 6,
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 4,
  "omsCustomerId" : 3,
  "shipToStreet" : "shipToStreet",
  "division" : 6,
  "alcoholContainerVolume" : 3,
  "orderStatusName" : "orderStatusName",
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 1,
  "alcoholContent" : 5.94489560761401580890606055618263781070709228515625,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 2,
  "id" : 0,
  "sku" : "sku",
  "per" : "per",
  "alcoholState" : "alcoholState",
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "alcoholCountryId" : 3,
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholUPCCode" : "alcoholUPCCode",
  "billToAttention" : "billToAttention",
  "subtotal" : 9.132027271330688478201409452594816684722900390625,
  "integrationPartnerName" : "integrationPartnerName",
  "poNoId" : 5,
  "daysInStorage" : 3,
  "warehouseServiceLevelId" : 4,
  "masterSubGroupName" : "masterSubGroupName",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 7.26052126480210358039357743109576404094696044921875,
  "freight" : 7.04836565559697003635619694250635802745819091796875,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 0.8774076871421565559927557842456735670566558837890625,
  "shipToCompany" : "shipToCompany",
  "itemLegacyLowStockContactId" : 6,
  "shipToZip" : "shipToZip",
  "backorderQty" : 4,
  "alcoholBrand" : "alcoholBrand",
  "orderSourceSKU" : "orderSourceSKU",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "unitDiscount" : 6.8468526983526398765889098285697400569915771484375,
  "itemWeight" : 6.96511769763884558415156789124011993408203125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 0.519900201872498524124921459588222205638885498046875,
  "itemSummaryCodeId" : 9,
  "alcoholVintageYear" : "alcoholVintageYear",
  "numberOfPallets" : 4,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "lineItemId" : 5,
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 5.5332583970349862312332334113307297229766845703125,
  "extendedSell" : 1.173074250955943309548956676735542714595794677734375,
  "orderedQty" : 9,
  "shipCode" : "shipCode",
  "processFlag" : "processFlag",
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 5.5073869641798811613853104063309729099273681640625,
  "priorityCode" : 7,
  "unitSell" : 1.489415909854170383397331534069962799549102783203125,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 8,
  "estimatedNumberOfPicks" : 3,
  "extendedDiscount" : 4.9652184929849543237878606305457651615142822265625,
  "masterProductionCodeName" : "masterProductionCodeName",
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 4,
  "warehouseServiceTypeId" : 6,
  "ncExtendedSell" : 5.02500479152029466689555192715488374233245849609375,
  "weightPerWrap" : 3.557195227068097320710649000830017030239105224609375,
  "orderConfirmationEmailTemplateId" : 0,
  "billToState" : "billToState",
  "revDate" : "revDate",
  "billToCity" : "billToCity",
  "shipToCity" : "shipToCity",
  "orderReason" : 6,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "extendedCost" : 7.4577447736837658709418974467553198337554931640625,
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 7.93350688173715123951978966942988336086273193359375,
  "distributionChannel" : "distributionChannel",
  "itemProductCodeId" : 6,
  "sector" : "sector",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "orderSourceId" : 0,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 6.02745618307040320615897144307382404804229736328125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 4.67894798900584873990737833082675933837890625,
  "orderSourceName" : "orderSourceName",
  "productionLot" : "productionLot",
  "tax" : 9.7029638000235660655334868351928889751434326171875,
  "alcoholContainerId" : 6,
  "groupOrderId" : 7.14353804701230643559028976596891880035400390625,
  "orderInvoiceTemplateId" : 1,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "alcoholRegion" : "alcoholRegion",
  "allowedQty" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 8.289659398142969592981899040751159191131591796875,
  "chargeCode" : "chargeCode",
  "numberOfLineItems" : 0,
  "itemSubGroupId" : 9,
  "orderEstimatedWeightLbs" : 3.258856561904760695824734284542500972747802734375,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "processNoId" : 7,
  "distributionCode" : "distributionCode",
  "numberOfTouches" : 6,
  "priceMode" : "priceMode",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 2,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 4,
  "masterAccountCodeName" : "masterAccountCodeName",
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "crossDock" : 2,
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "masterSummaryCodeName" : "masterSummaryCodeName",
  "shipVia" : "shipVia",
  "total" : 4.258773108174356281097061582840979099273681640625,
  "adjustCode" : 7,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "itemAccountCodeId" : 8,
  "shippedQty" : 2,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 1.0414449161182959269211778519093059003353118896484375,
  "orderLoadProgramId" : 8,
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "vendorSKU" : "vendorSKU",
  "omsOrderNo" : 7,
  "lowStockContactName" : "lowStockContactName",
  "thirdPartyParcelAccountId" : 6,
  "unitCost" : 1.024645700144157789424070870154537260532379150390625,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "restrictionRule" : 1,
  "carrierId" : 0,
  "masterMajorGroupName" : "masterMajorGroupName",
  "backOrderStatus" : "backOrderStatus"
}}]
     
     - parameter body: (body) OrderLineActivity to be inserted. 

     - returns: RequestBuilder<OrderLineActivity> 
     */
    public class func addOrderLineActivityWithRequestBuilder(body body: OrderLineActivity) -> RequestBuilder<OrderLineActivity> {
        let path = "/beta/orderLineActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderLineActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an orderLineActivity
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to add an audit to 
     - parameter orderLineActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderLineActivityAudit(orderLineActivityId orderLineActivityId: Int32, orderLineActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderLineActivityAuditWithRequestBuilder(orderLineActivityId: orderLineActivityId, orderLineActivityAudit: orderLineActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an orderLineActivity
     - PUT /beta/orderLineActivity/{orderLineActivityId}/audit/{orderLineActivityAudit}
     - Adds an audit to an existing orderLineActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to add an audit to 
     - parameter orderLineActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderLineActivityAuditWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32, orderLineActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}/audit/{orderLineActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityAudit}", withString: "\(orderLineActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an orderLineActivity
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderLineActivityFile(orderLineActivityId orderLineActivityId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderLineActivityFileWithRequestBuilder(orderLineActivityId: orderLineActivityId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an orderLineActivity
     - POST /beta/orderLineActivity/{orderLineActivityId}/file/{fileName}
     - Adds a file to an existing orderLineActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderLineActivityFileWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an orderLineActivity.
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to add a tag to 
     - parameter orderLineActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderLineActivityTag(orderLineActivityId orderLineActivityId: Int32, orderLineActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderLineActivityTagWithRequestBuilder(orderLineActivityId: orderLineActivityId, orderLineActivityTag: orderLineActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an orderLineActivity.
     - PUT /beta/orderLineActivity/{orderLineActivityId}/tag/{orderLineActivityTag}
     - Adds a tag to an existing orderLineActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to add a tag to 
     - parameter orderLineActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderLineActivityTagWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32, orderLineActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}/tag/{orderLineActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityTag}", withString: "\(orderLineActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an orderLineActivity
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderLineActivity(orderLineActivityId orderLineActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderLineActivityWithRequestBuilder(orderLineActivityId: orderLineActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an orderLineActivity
     - DELETE /beta/orderLineActivity/{orderLineActivityId}
     - Deletes the orderLineActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderLineActivityWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an orderLineActivity.
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to remove tag from 
     - parameter orderLineActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderLineActivityTag(orderLineActivityId orderLineActivityId: Int32, orderLineActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderLineActivityTagWithRequestBuilder(orderLineActivityId: orderLineActivityId, orderLineActivityTag: orderLineActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an orderLineActivity.
     - DELETE /beta/orderLineActivity/{orderLineActivityId}/tag/{orderLineActivityTag}
     - Deletes an existing orderLineActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to remove tag from 
     - parameter orderLineActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderLineActivityTagWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32, orderLineActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}/tag/{orderLineActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityTag}", withString: "\(orderLineActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an orderLineActivity by id
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateOrderLineActivityById(orderLineActivityId orderLineActivityId: Int32, completion: ((data: OrderLineActivity?, error: ErrorType?) -> Void)) {
        getDuplicateOrderLineActivityByIdWithRequestBuilder(orderLineActivityId: orderLineActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an orderLineActivity by id
     - GET /beta/orderLineActivity/duplicate/{orderLineActivityId}
     - Returns a duplicated orderLineActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "itemMajorGroupId" : 9,
  "alcoholTypeId" : 6,
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 4,
  "omsCustomerId" : 3,
  "shipToStreet" : "shipToStreet",
  "division" : 6,
  "alcoholContainerVolume" : 3,
  "orderStatusName" : "orderStatusName",
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 1,
  "alcoholContent" : 5.94489560761401580890606055618263781070709228515625,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 2,
  "id" : 0,
  "sku" : "sku",
  "per" : "per",
  "alcoholState" : "alcoholState",
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "alcoholCountryId" : 3,
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholUPCCode" : "alcoholUPCCode",
  "billToAttention" : "billToAttention",
  "subtotal" : 9.132027271330688478201409452594816684722900390625,
  "integrationPartnerName" : "integrationPartnerName",
  "poNoId" : 5,
  "daysInStorage" : 3,
  "warehouseServiceLevelId" : 4,
  "masterSubGroupName" : "masterSubGroupName",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 7.26052126480210358039357743109576404094696044921875,
  "freight" : 7.04836565559697003635619694250635802745819091796875,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 0.8774076871421565559927557842456735670566558837890625,
  "shipToCompany" : "shipToCompany",
  "itemLegacyLowStockContactId" : 6,
  "shipToZip" : "shipToZip",
  "backorderQty" : 4,
  "alcoholBrand" : "alcoholBrand",
  "orderSourceSKU" : "orderSourceSKU",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "unitDiscount" : 6.8468526983526398765889098285697400569915771484375,
  "itemWeight" : 6.96511769763884558415156789124011993408203125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 0.519900201872498524124921459588222205638885498046875,
  "itemSummaryCodeId" : 9,
  "alcoholVintageYear" : "alcoholVintageYear",
  "numberOfPallets" : 4,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "lineItemId" : 5,
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 5.5332583970349862312332334113307297229766845703125,
  "extendedSell" : 1.173074250955943309548956676735542714595794677734375,
  "orderedQty" : 9,
  "shipCode" : "shipCode",
  "processFlag" : "processFlag",
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 5.5073869641798811613853104063309729099273681640625,
  "priorityCode" : 7,
  "unitSell" : 1.489415909854170383397331534069962799549102783203125,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 8,
  "estimatedNumberOfPicks" : 3,
  "extendedDiscount" : 4.9652184929849543237878606305457651615142822265625,
  "masterProductionCodeName" : "masterProductionCodeName",
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 4,
  "warehouseServiceTypeId" : 6,
  "ncExtendedSell" : 5.02500479152029466689555192715488374233245849609375,
  "weightPerWrap" : 3.557195227068097320710649000830017030239105224609375,
  "orderConfirmationEmailTemplateId" : 0,
  "billToState" : "billToState",
  "revDate" : "revDate",
  "billToCity" : "billToCity",
  "shipToCity" : "shipToCity",
  "orderReason" : 6,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "extendedCost" : 7.4577447736837658709418974467553198337554931640625,
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 7.93350688173715123951978966942988336086273193359375,
  "distributionChannel" : "distributionChannel",
  "itemProductCodeId" : 6,
  "sector" : "sector",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "orderSourceId" : 0,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 6.02745618307040320615897144307382404804229736328125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 4.67894798900584873990737833082675933837890625,
  "orderSourceName" : "orderSourceName",
  "productionLot" : "productionLot",
  "tax" : 9.7029638000235660655334868351928889751434326171875,
  "alcoholContainerId" : 6,
  "groupOrderId" : 7.14353804701230643559028976596891880035400390625,
  "orderInvoiceTemplateId" : 1,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "alcoholRegion" : "alcoholRegion",
  "allowedQty" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 8.289659398142969592981899040751159191131591796875,
  "chargeCode" : "chargeCode",
  "numberOfLineItems" : 0,
  "itemSubGroupId" : 9,
  "orderEstimatedWeightLbs" : 3.258856561904760695824734284542500972747802734375,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "processNoId" : 7,
  "distributionCode" : "distributionCode",
  "numberOfTouches" : 6,
  "priceMode" : "priceMode",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 2,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 4,
  "masterAccountCodeName" : "masterAccountCodeName",
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "crossDock" : 2,
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "masterSummaryCodeName" : "masterSummaryCodeName",
  "shipVia" : "shipVia",
  "total" : 4.258773108174356281097061582840979099273681640625,
  "adjustCode" : 7,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "itemAccountCodeId" : 8,
  "shippedQty" : 2,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 1.0414449161182959269211778519093059003353118896484375,
  "orderLoadProgramId" : 8,
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "vendorSKU" : "vendorSKU",
  "omsOrderNo" : 7,
  "lowStockContactName" : "lowStockContactName",
  "thirdPartyParcelAccountId" : 6,
  "unitCost" : 1.024645700144157789424070870154537260532379150390625,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "restrictionRule" : 1,
  "carrierId" : 0,
  "masterMajorGroupName" : "masterMajorGroupName",
  "backOrderStatus" : "backOrderStatus"
}}]
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to be duplicated. 

     - returns: RequestBuilder<OrderLineActivity> 
     */
    public class func getDuplicateOrderLineActivityByIdWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32) -> RequestBuilder<OrderLineActivity> {
        var path = "/beta/orderLineActivity/duplicate/{orderLineActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderLineActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search orderLineActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderLineActivityByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [OrderLineActivity]?, error: ErrorType?) -> Void)) {
        getOrderLineActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search orderLineActivitys by filter
     - GET /beta/orderLineActivity/search
     - Returns the list of orderLineActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "itemMajorGroupId" : 9,
  "alcoholTypeId" : 6,
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 4,
  "omsCustomerId" : 3,
  "shipToStreet" : "shipToStreet",
  "division" : 6,
  "alcoholContainerVolume" : 3,
  "orderStatusName" : "orderStatusName",
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 1,
  "alcoholContent" : 5.94489560761401580890606055618263781070709228515625,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 2,
  "id" : 0,
  "sku" : "sku",
  "per" : "per",
  "alcoholState" : "alcoholState",
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "alcoholCountryId" : 3,
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholUPCCode" : "alcoholUPCCode",
  "billToAttention" : "billToAttention",
  "subtotal" : 9.132027271330688478201409452594816684722900390625,
  "integrationPartnerName" : "integrationPartnerName",
  "poNoId" : 5,
  "daysInStorage" : 3,
  "warehouseServiceLevelId" : 4,
  "masterSubGroupName" : "masterSubGroupName",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 7.26052126480210358039357743109576404094696044921875,
  "freight" : 7.04836565559697003635619694250635802745819091796875,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 0.8774076871421565559927557842456735670566558837890625,
  "shipToCompany" : "shipToCompany",
  "itemLegacyLowStockContactId" : 6,
  "shipToZip" : "shipToZip",
  "backorderQty" : 4,
  "alcoholBrand" : "alcoholBrand",
  "orderSourceSKU" : "orderSourceSKU",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "unitDiscount" : 6.8468526983526398765889098285697400569915771484375,
  "itemWeight" : 6.96511769763884558415156789124011993408203125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 0.519900201872498524124921459588222205638885498046875,
  "itemSummaryCodeId" : 9,
  "alcoholVintageYear" : "alcoholVintageYear",
  "numberOfPallets" : 4,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "lineItemId" : 5,
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 5.5332583970349862312332334113307297229766845703125,
  "extendedSell" : 1.173074250955943309548956676735542714595794677734375,
  "orderedQty" : 9,
  "shipCode" : "shipCode",
  "processFlag" : "processFlag",
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 5.5073869641798811613853104063309729099273681640625,
  "priorityCode" : 7,
  "unitSell" : 1.489415909854170383397331534069962799549102783203125,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 8,
  "estimatedNumberOfPicks" : 3,
  "extendedDiscount" : 4.9652184929849543237878606305457651615142822265625,
  "masterProductionCodeName" : "masterProductionCodeName",
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 4,
  "warehouseServiceTypeId" : 6,
  "ncExtendedSell" : 5.02500479152029466689555192715488374233245849609375,
  "weightPerWrap" : 3.557195227068097320710649000830017030239105224609375,
  "orderConfirmationEmailTemplateId" : 0,
  "billToState" : "billToState",
  "revDate" : "revDate",
  "billToCity" : "billToCity",
  "shipToCity" : "shipToCity",
  "orderReason" : 6,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "extendedCost" : 7.4577447736837658709418974467553198337554931640625,
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 7.93350688173715123951978966942988336086273193359375,
  "distributionChannel" : "distributionChannel",
  "itemProductCodeId" : 6,
  "sector" : "sector",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "orderSourceId" : 0,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 6.02745618307040320615897144307382404804229736328125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 4.67894798900584873990737833082675933837890625,
  "orderSourceName" : "orderSourceName",
  "productionLot" : "productionLot",
  "tax" : 9.7029638000235660655334868351928889751434326171875,
  "alcoholContainerId" : 6,
  "groupOrderId" : 7.14353804701230643559028976596891880035400390625,
  "orderInvoiceTemplateId" : 1,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "alcoholRegion" : "alcoholRegion",
  "allowedQty" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 8.289659398142969592981899040751159191131591796875,
  "chargeCode" : "chargeCode",
  "numberOfLineItems" : 0,
  "itemSubGroupId" : 9,
  "orderEstimatedWeightLbs" : 3.258856561904760695824734284542500972747802734375,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "processNoId" : 7,
  "distributionCode" : "distributionCode",
  "numberOfTouches" : 6,
  "priceMode" : "priceMode",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 2,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 4,
  "masterAccountCodeName" : "masterAccountCodeName",
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "crossDock" : 2,
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "masterSummaryCodeName" : "masterSummaryCodeName",
  "shipVia" : "shipVia",
  "total" : 4.258773108174356281097061582840979099273681640625,
  "adjustCode" : 7,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "itemAccountCodeId" : 8,
  "shippedQty" : 2,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 1.0414449161182959269211778519093059003353118896484375,
  "orderLoadProgramId" : 8,
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "vendorSKU" : "vendorSKU",
  "omsOrderNo" : 7,
  "lowStockContactName" : "lowStockContactName",
  "thirdPartyParcelAccountId" : 6,
  "unitCost" : 1.024645700144157789424070870154537260532379150390625,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "restrictionRule" : 1,
  "carrierId" : 0,
  "masterMajorGroupName" : "masterMajorGroupName",
  "backOrderStatus" : "backOrderStatus"
}, {
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "itemMajorGroupId" : 9,
  "alcoholTypeId" : 6,
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 4,
  "omsCustomerId" : 3,
  "shipToStreet" : "shipToStreet",
  "division" : 6,
  "alcoholContainerVolume" : 3,
  "orderStatusName" : "orderStatusName",
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 1,
  "alcoholContent" : 5.94489560761401580890606055618263781070709228515625,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 2,
  "id" : 0,
  "sku" : "sku",
  "per" : "per",
  "alcoholState" : "alcoholState",
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "alcoholCountryId" : 3,
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholUPCCode" : "alcoholUPCCode",
  "billToAttention" : "billToAttention",
  "subtotal" : 9.132027271330688478201409452594816684722900390625,
  "integrationPartnerName" : "integrationPartnerName",
  "poNoId" : 5,
  "daysInStorage" : 3,
  "warehouseServiceLevelId" : 4,
  "masterSubGroupName" : "masterSubGroupName",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 7.26052126480210358039357743109576404094696044921875,
  "freight" : 7.04836565559697003635619694250635802745819091796875,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 0.8774076871421565559927557842456735670566558837890625,
  "shipToCompany" : "shipToCompany",
  "itemLegacyLowStockContactId" : 6,
  "shipToZip" : "shipToZip",
  "backorderQty" : 4,
  "alcoholBrand" : "alcoholBrand",
  "orderSourceSKU" : "orderSourceSKU",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "unitDiscount" : 6.8468526983526398765889098285697400569915771484375,
  "itemWeight" : 6.96511769763884558415156789124011993408203125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 0.519900201872498524124921459588222205638885498046875,
  "itemSummaryCodeId" : 9,
  "alcoholVintageYear" : "alcoholVintageYear",
  "numberOfPallets" : 4,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "lineItemId" : 5,
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 5.5332583970349862312332334113307297229766845703125,
  "extendedSell" : 1.173074250955943309548956676735542714595794677734375,
  "orderedQty" : 9,
  "shipCode" : "shipCode",
  "processFlag" : "processFlag",
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 5.5073869641798811613853104063309729099273681640625,
  "priorityCode" : 7,
  "unitSell" : 1.489415909854170383397331534069962799549102783203125,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 8,
  "estimatedNumberOfPicks" : 3,
  "extendedDiscount" : 4.9652184929849543237878606305457651615142822265625,
  "masterProductionCodeName" : "masterProductionCodeName",
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 4,
  "warehouseServiceTypeId" : 6,
  "ncExtendedSell" : 5.02500479152029466689555192715488374233245849609375,
  "weightPerWrap" : 3.557195227068097320710649000830017030239105224609375,
  "orderConfirmationEmailTemplateId" : 0,
  "billToState" : "billToState",
  "revDate" : "revDate",
  "billToCity" : "billToCity",
  "shipToCity" : "shipToCity",
  "orderReason" : 6,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "extendedCost" : 7.4577447736837658709418974467553198337554931640625,
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 7.93350688173715123951978966942988336086273193359375,
  "distributionChannel" : "distributionChannel",
  "itemProductCodeId" : 6,
  "sector" : "sector",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "orderSourceId" : 0,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 6.02745618307040320615897144307382404804229736328125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 4.67894798900584873990737833082675933837890625,
  "orderSourceName" : "orderSourceName",
  "productionLot" : "productionLot",
  "tax" : 9.7029638000235660655334868351928889751434326171875,
  "alcoholContainerId" : 6,
  "groupOrderId" : 7.14353804701230643559028976596891880035400390625,
  "orderInvoiceTemplateId" : 1,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "alcoholRegion" : "alcoholRegion",
  "allowedQty" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 8.289659398142969592981899040751159191131591796875,
  "chargeCode" : "chargeCode",
  "numberOfLineItems" : 0,
  "itemSubGroupId" : 9,
  "orderEstimatedWeightLbs" : 3.258856561904760695824734284542500972747802734375,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "processNoId" : 7,
  "distributionCode" : "distributionCode",
  "numberOfTouches" : 6,
  "priceMode" : "priceMode",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 2,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 4,
  "masterAccountCodeName" : "masterAccountCodeName",
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "crossDock" : 2,
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "masterSummaryCodeName" : "masterSummaryCodeName",
  "shipVia" : "shipVia",
  "total" : 4.258773108174356281097061582840979099273681640625,
  "adjustCode" : 7,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "itemAccountCodeId" : 8,
  "shippedQty" : 2,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 1.0414449161182959269211778519093059003353118896484375,
  "orderLoadProgramId" : 8,
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "vendorSKU" : "vendorSKU",
  "omsOrderNo" : 7,
  "lowStockContactName" : "lowStockContactName",
  "thirdPartyParcelAccountId" : 6,
  "unitCost" : 1.024645700144157789424070870154537260532379150390625,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "restrictionRule" : 1,
  "carrierId" : 0,
  "masterMajorGroupName" : "masterMajorGroupName",
  "backOrderStatus" : "backOrderStatus"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[OrderLineActivity]> 
     */
    public class func getOrderLineActivityByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[OrderLineActivity]> {
        let path = "/beta/orderLineActivity/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[OrderLineActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an orderLineActivity by id
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderLineActivityById(orderLineActivityId orderLineActivityId: Int32, completion: ((data: OrderLineActivity?, error: ErrorType?) -> Void)) {
        getOrderLineActivityByIdWithRequestBuilder(orderLineActivityId: orderLineActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an orderLineActivity by id
     - GET /beta/orderLineActivity/{orderLineActivityId}
     - Returns the orderLineActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "itemMajorGroupId" : 9,
  "alcoholTypeId" : 6,
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 4,
  "omsCustomerId" : 3,
  "shipToStreet" : "shipToStreet",
  "division" : 6,
  "alcoholContainerVolume" : 3,
  "orderStatusName" : "orderStatusName",
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 1,
  "alcoholContent" : 5.94489560761401580890606055618263781070709228515625,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 2,
  "id" : 0,
  "sku" : "sku",
  "per" : "per",
  "alcoholState" : "alcoholState",
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "upc" : "upc",
  "alcoholContainerName" : "alcoholContainerName",
  "alcoholCountryId" : 3,
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholUPCCode" : "alcoholUPCCode",
  "billToAttention" : "billToAttention",
  "subtotal" : 9.132027271330688478201409452594816684722900390625,
  "integrationPartnerName" : "integrationPartnerName",
  "poNoId" : 5,
  "daysInStorage" : 3,
  "warehouseServiceLevelId" : 4,
  "masterSubGroupName" : "masterSubGroupName",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 7.26052126480210358039357743109576404094696044921875,
  "freight" : 7.04836565559697003635619694250635802745819091796875,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 0.8774076871421565559927557842456735670566558837890625,
  "shipToCompany" : "shipToCompany",
  "itemLegacyLowStockContactId" : 6,
  "shipToZip" : "shipToZip",
  "backorderQty" : 4,
  "alcoholBrand" : "alcoholBrand",
  "orderSourceSKU" : "orderSourceSKU",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "unitDiscount" : 6.8468526983526398765889098285697400569915771484375,
  "itemWeight" : 6.96511769763884558415156789124011993408203125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 0.519900201872498524124921459588222205638885498046875,
  "itemSummaryCodeId" : 9,
  "alcoholVintageYear" : "alcoholVintageYear",
  "numberOfPallets" : 4,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "lineItemId" : 5,
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 5.5332583970349862312332334113307297229766845703125,
  "extendedSell" : 1.173074250955943309548956676735542714595794677734375,
  "orderedQty" : 9,
  "shipCode" : "shipCode",
  "processFlag" : "processFlag",
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 5.5073869641798811613853104063309729099273681640625,
  "priorityCode" : 7,
  "unitSell" : 1.489415909854170383397331534069962799549102783203125,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 8,
  "estimatedNumberOfPicks" : 3,
  "extendedDiscount" : 4.9652184929849543237878606305457651615142822265625,
  "masterProductionCodeName" : "masterProductionCodeName",
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 4,
  "warehouseServiceTypeId" : 6,
  "ncExtendedSell" : 5.02500479152029466689555192715488374233245849609375,
  "weightPerWrap" : 3.557195227068097320710649000830017030239105224609375,
  "orderConfirmationEmailTemplateId" : 0,
  "billToState" : "billToState",
  "revDate" : "revDate",
  "billToCity" : "billToCity",
  "shipToCity" : "shipToCity",
  "orderReason" : 6,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "extendedCost" : 7.4577447736837658709418974467553198337554931640625,
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 7.93350688173715123951978966942988336086273193359375,
  "distributionChannel" : "distributionChannel",
  "itemProductCodeId" : 6,
  "sector" : "sector",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "orderSourceId" : 0,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 6.02745618307040320615897144307382404804229736328125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 4.67894798900584873990737833082675933837890625,
  "orderSourceName" : "orderSourceName",
  "productionLot" : "productionLot",
  "tax" : 9.7029638000235660655334868351928889751434326171875,
  "alcoholContainerId" : 6,
  "groupOrderId" : 7.14353804701230643559028976596891880035400390625,
  "orderInvoiceTemplateId" : 1,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "alcoholRegion" : "alcoholRegion",
  "allowedQty" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 8.289659398142969592981899040751159191131591796875,
  "chargeCode" : "chargeCode",
  "numberOfLineItems" : 0,
  "itemSubGroupId" : 9,
  "orderEstimatedWeightLbs" : 3.258856561904760695824734284542500972747802734375,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "processNoId" : 7,
  "distributionCode" : "distributionCode",
  "numberOfTouches" : 6,
  "priceMode" : "priceMode",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 2,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 4,
  "masterAccountCodeName" : "masterAccountCodeName",
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "crossDock" : 2,
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "masterSummaryCodeName" : "masterSummaryCodeName",
  "shipVia" : "shipVia",
  "total" : 4.258773108174356281097061582840979099273681640625,
  "adjustCode" : 7,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "itemAccountCodeId" : 8,
  "shippedQty" : 2,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 1.0414449161182959269211778519093059003353118896484375,
  "orderLoadProgramId" : 8,
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "vendorSKU" : "vendorSKU",
  "omsOrderNo" : 7,
  "lowStockContactName" : "lowStockContactName",
  "thirdPartyParcelAccountId" : 6,
  "unitCost" : 1.024645700144157789424070870154537260532379150390625,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "restrictionRule" : 1,
  "carrierId" : 0,
  "masterMajorGroupName" : "masterMajorGroupName",
  "backOrderStatus" : "backOrderStatus"
}}]
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to be returned. 

     - returns: RequestBuilder<OrderLineActivity> 
     */
    public class func getOrderLineActivityByIdWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32) -> RequestBuilder<OrderLineActivity> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderLineActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an orderLineActivity.
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderLineActivityTags(orderLineActivityId orderLineActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getOrderLineActivityTagsWithRequestBuilder(orderLineActivityId: orderLineActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an orderLineActivity.
     - GET /beta/orderLineActivity/{orderLineActivityId}/tag
     - Get all existing orderLineActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderLineActivityId: (path) Id of the orderLineActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getOrderLineActivityTagsWithRequestBuilder(orderLineActivityId orderLineActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/orderLineActivity/{orderLineActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{orderLineActivityId}", withString: "\(orderLineActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an orderLineActivity
     
     - parameter body: (body) OrderLineActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOrderLineActivity(body body: OrderLineActivity, completion: ((error: ErrorType?) -> Void)) {
        updateOrderLineActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an orderLineActivity
     - PUT /beta/orderLineActivity
     - Updates an existing orderLineActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) OrderLineActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateOrderLineActivityWithRequestBuilder(body body: OrderLineActivity) -> RequestBuilder<Void> {
        let path = "/beta/orderLineActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
