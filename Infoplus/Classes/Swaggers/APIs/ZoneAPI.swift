//
// ZoneAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ZoneAPI: APIBase {
    /**
     
     Create a zone
     
     - parameter body: (body) Zone to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addZone(body body: Zone, completion: ((data: Zone?, error: ErrorType?) -> Void)) {
        addZoneWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a zone
     
     - POST /v1.0/zone
     - Inserts a new zone using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "id" : 123,
  "isClimateControlled" : true,
  "isRefrigerated" : true,
  "address" : "aeiou",
  "name" : "aeiou",
  "isFrozen" : true,
  "isSecure" : true,
  "isFoodGrade" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}, contentType=application/json}]
     
     - parameter body: (body) Zone to be inserted. 

     - returns: RequestBuilder<Zone> 
     */
    public class func addZoneWithRequestBuilder(body body: Zone) -> RequestBuilder<Zone> {
        let path = "/v1.0/zone"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Zone>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a zone
     
     - parameter zoneId: (path) Id of the zone to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteZone(zoneId zoneId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteZoneWithRequestBuilder(zoneId: zoneId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a zone
     
     - DELETE /v1.0/zone/{zoneId}
     - Deletes the zone identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteZoneWithRequestBuilder(zoneId zoneId: Int) -> RequestBuilder<Void> {
        var path = "/v1.0/zone/{zoneId}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search zones by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getZoneByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Zone]?, error: ErrorType?) -> Void)) {
        getZoneByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search zones by filter
     
     - GET /v1.0/zone/search
     - Returns the list of zones that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example=[ {
  "id" : 123,
  "isClimateControlled" : true,
  "isRefrigerated" : true,
  "address" : "aeiou",
  "name" : "aeiou",
  "isFrozen" : true,
  "isSecure" : true,
  "isFoodGrade" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ], contentType=application/json}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Zone]> 
     */
    public class func getZoneByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Zone]> {
        let path = "/v1.0/zone/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Zone]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a zone by id
     
     - parameter zoneId: (path) Id of the zone to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getZoneById(zoneId zoneId: Int, completion: ((data: Zone?, error: ErrorType?) -> Void)) {
        getZoneByIdWithRequestBuilder(zoneId: zoneId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a zone by id
     
     - GET /v1.0/zone/{zoneId}
     - Returns the zone identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "id" : 123,
  "isClimateControlled" : true,
  "isRefrigerated" : true,
  "address" : "aeiou",
  "name" : "aeiou",
  "isFrozen" : true,
  "isSecure" : true,
  "isFoodGrade" : true,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "warehouseId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}, contentType=application/json}]
     
     - parameter zoneId: (path) Id of the zone to be returned. 

     - returns: RequestBuilder<Zone> 
     */
    public class func getZoneByIdWithRequestBuilder(zoneId zoneId: Int) -> RequestBuilder<Zone> {
        var path = "/v1.0/zone/{zoneId}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Zone>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a zone
     
     - parameter body: (body) Zone to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateZone(body body: Zone, completion: ((error: ErrorType?) -> Void)) {
        updateZoneWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a zone
     
     - PUT /v1.0/zone
     - Updates an existing zone using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Zone to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateZoneWithRequestBuilder(body body: Zone) -> RequestBuilder<Void> {
        let path = "/v1.0/zone"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
