//
// ZoneAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ZoneAPI: APIBase {
    /**
     Create a zone
     
     - parameter body: (body) Zone to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addZone(body body: Zone, completion: ((data: Zone?, error: ErrorType?) -> Void)) {
        addZoneWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a zone
     - POST /beta/zone
     - Inserts a new zone using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "isFoodGrade" : false,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "isSecure" : false,
  "isRefrigerated" : false,
  "id" : 0,
  "isClimateControlled" : false,
  "isFrozen" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) Zone to be inserted. 

     - returns: RequestBuilder<Zone> 
     */
    public class func addZoneWithRequestBuilder(body body: Zone) -> RequestBuilder<Zone> {
        let path = "/beta/zone"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Zone>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a zone
     
     - parameter zoneId: (path) Id of the zone to add an audit to 
     - parameter zoneAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addZoneAudit(zoneId zoneId: Int32, zoneAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addZoneAuditWithRequestBuilder(zoneId: zoneId, zoneAudit: zoneAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a zone
     - PUT /beta/zone/{zoneId}/audit/{zoneAudit}
     - Adds an audit to an existing zone.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to add an audit to 
     - parameter zoneAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addZoneAuditWithRequestBuilder(zoneId zoneId: Int32, zoneAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/zone/{zoneId}/audit/{zoneAudit}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{zoneAudit}", withString: "\(zoneAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a zone
     
     - parameter zoneId: (path) Id of the zone to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addZoneFile(zoneId zoneId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addZoneFileWithRequestBuilder(zoneId: zoneId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a zone
     - POST /beta/zone/{zoneId}/file/{fileName}
     - Adds a file to an existing zone.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addZoneFileWithRequestBuilder(zoneId zoneId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/zone/{zoneId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a zone.
     
     - parameter zoneId: (path) Id of the zone to add a tag to 
     - parameter zoneTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addZoneTag(zoneId zoneId: Int32, zoneTag: String, completion: ((error: ErrorType?) -> Void)) {
        addZoneTagWithRequestBuilder(zoneId: zoneId, zoneTag: zoneTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a zone.
     - PUT /beta/zone/{zoneId}/tag/{zoneTag}
     - Adds a tag to an existing zone.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to add a tag to 
     - parameter zoneTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addZoneTagWithRequestBuilder(zoneId zoneId: Int32, zoneTag: String) -> RequestBuilder<Void> {
        var path = "/beta/zone/{zoneId}/tag/{zoneTag}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{zoneTag}", withString: "\(zoneTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a zone
     
     - parameter zoneId: (path) Id of the zone to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteZone(zoneId zoneId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteZoneWithRequestBuilder(zoneId: zoneId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a zone
     - DELETE /beta/zone/{zoneId}
     - Deletes the zone identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteZoneWithRequestBuilder(zoneId zoneId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/zone/{zoneId}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a zone.
     
     - parameter zoneId: (path) Id of the zone to remove tag from 
     - parameter zoneTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteZoneTag(zoneId zoneId: Int32, zoneTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteZoneTagWithRequestBuilder(zoneId: zoneId, zoneTag: zoneTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a zone.
     - DELETE /beta/zone/{zoneId}/tag/{zoneTag}
     - Deletes an existing zone tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to remove tag from 
     - parameter zoneTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteZoneTagWithRequestBuilder(zoneId zoneId: Int32, zoneTag: String) -> RequestBuilder<Void> {
        var path = "/beta/zone/{zoneId}/tag/{zoneTag}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{zoneTag}", withString: "\(zoneTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a zone by id
     
     - parameter zoneId: (path) Id of the zone to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateZoneById(zoneId zoneId: Int32, completion: ((data: Zone?, error: ErrorType?) -> Void)) {
        getDuplicateZoneByIdWithRequestBuilder(zoneId: zoneId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a zone by id
     - GET /beta/zone/duplicate/{zoneId}
     - Returns a duplicated zone identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "isFoodGrade" : false,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "isSecure" : false,
  "isRefrigerated" : false,
  "id" : 0,
  "isClimateControlled" : false,
  "isFrozen" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter zoneId: (path) Id of the zone to be duplicated. 

     - returns: RequestBuilder<Zone> 
     */
    public class func getDuplicateZoneByIdWithRequestBuilder(zoneId zoneId: Int32) -> RequestBuilder<Zone> {
        var path = "/beta/zone/duplicate/{zoneId}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Zone>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search zones by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getZoneByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Zone]?, error: ErrorType?) -> Void)) {
        getZoneByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search zones by filter
     - GET /beta/zone/search
     - Returns the list of zones that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "isFoodGrade" : false,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "isSecure" : false,
  "isRefrigerated" : false,
  "id" : 0,
  "isClimateControlled" : false,
  "isFrozen" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "isFoodGrade" : false,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "isSecure" : false,
  "isRefrigerated" : false,
  "id" : 0,
  "isClimateControlled" : false,
  "isFrozen" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Zone]> 
     */
    public class func getZoneByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Zone]> {
        let path = "/beta/zone/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Zone]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a zone by id
     
     - parameter zoneId: (path) Id of the zone to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getZoneById(zoneId zoneId: Int32, completion: ((data: Zone?, error: ErrorType?) -> Void)) {
        getZoneByIdWithRequestBuilder(zoneId: zoneId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a zone by id
     - GET /beta/zone/{zoneId}
     - Returns the zone identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseId" : 6,
  "isFoodGrade" : false,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "isSecure" : false,
  "isRefrigerated" : false,
  "id" : 0,
  "isClimateControlled" : false,
  "isFrozen" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter zoneId: (path) Id of the zone to be returned. 

     - returns: RequestBuilder<Zone> 
     */
    public class func getZoneByIdWithRequestBuilder(zoneId zoneId: Int32) -> RequestBuilder<Zone> {
        var path = "/beta/zone/{zoneId}"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Zone>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a zone.
     
     - parameter zoneId: (path) Id of the zone to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getZoneTags(zoneId zoneId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getZoneTagsWithRequestBuilder(zoneId: zoneId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a zone.
     - GET /beta/zone/{zoneId}/tag
     - Get all existing zone tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter zoneId: (path) Id of the zone to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getZoneTagsWithRequestBuilder(zoneId zoneId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/zone/{zoneId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{zoneId}", withString: "\(zoneId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a zone
     
     - parameter body: (body) Zone to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateZone(body body: Zone, completion: ((error: ErrorType?) -> Void)) {
        updateZoneWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a zone
     - PUT /beta/zone
     - Updates an existing zone using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Zone to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateZoneWithRequestBuilder(body body: Zone) -> RequestBuilder<Void> {
        let path = "/beta/zone"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a zone custom fields
     
     - parameter body: (body) Zone to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateZoneCustomFields(body body: Zone, completion: ((error: ErrorType?) -> Void)) {
        updateZoneCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a zone custom fields
     - PUT /beta/zone/customFields
     - Updates an existing zone custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Zone to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateZoneCustomFieldsWithRequestBuilder(body body: Zone) -> RequestBuilder<Void> {
        let path = "/beta/zone/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
