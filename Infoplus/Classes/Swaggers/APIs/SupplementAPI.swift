//
// SupplementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SupplementAPI: APIBase {
    /**
     
     Create a supplement
     
     - parameter body: (body) Supplement to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSupplement(body body: Supplement, completion: ((data: Supplement?, error: ErrorType?) -> Void)) {
        addSupplementWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a supplement
     
     - POST /beta/supplement
     - Inserts a new supplement using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "originalSKUId" : 123,
  "supplementSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "supplementQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) Supplement to be inserted. 

     - returns: RequestBuilder<Supplement> 
     */
    public class func addSupplementWithRequestBuilder(body body: Supplement) -> RequestBuilder<Supplement> {
        let path = "/beta/supplement"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Supplement>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a supplement
     
     - parameter supplementId: (path) Id of the supplement to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSupplement(supplementId supplementId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteSupplementWithRequestBuilder(supplementId: supplementId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a supplement
     
     - DELETE /beta/supplement/{supplementId}
     - Deletes the supplement identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter supplementId: (path) Id of the supplement to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSupplementWithRequestBuilder(supplementId supplementId: Int) -> RequestBuilder<Void> {
        var path = "/beta/supplement/{supplementId}"
        path = path.stringByReplacingOccurrencesOfString("{supplementId}", withString: "\(supplementId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search supplements by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSupplementByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Supplement]?, error: ErrorType?) -> Void)) {
        getSupplementByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search supplements by filter
     
     - GET /beta/supplement/search
     - Returns the list of supplements that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "originalSKUId" : 123,
  "supplementSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "supplementQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Supplement]> 
     */
    public class func getSupplementByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Supplement]> {
        let path = "/beta/supplement/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Supplement]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a supplement by id
     
     - parameter supplementId: (path) Id of the supplement to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSupplementById(supplementId supplementId: Int, completion: ((data: Supplement?, error: ErrorType?) -> Void)) {
        getSupplementByIdWithRequestBuilder(supplementId: supplementId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a supplement by id
     
     - GET /beta/supplement/{supplementId}
     - Returns the supplement identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "originalSKUId" : 123,
  "supplementSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "supplementQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter supplementId: (path) Id of the supplement to be returned. 

     - returns: RequestBuilder<Supplement> 
     */
    public class func getSupplementByIdWithRequestBuilder(supplementId supplementId: Int) -> RequestBuilder<Supplement> {
        var path = "/beta/supplement/{supplementId}"
        path = path.stringByReplacingOccurrencesOfString("{supplementId}", withString: "\(supplementId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Supplement>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a supplement
     
     - parameter body: (body) Supplement to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSupplement(body body: Supplement, completion: ((error: ErrorType?) -> Void)) {
        updateSupplementWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a supplement
     
     - PUT /beta/supplement
     - Updates an existing supplement using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Supplement to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSupplementWithRequestBuilder(body body: Supplement) -> RequestBuilder<Void> {
        let path = "/beta/supplement"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a supplement custom fields
     
     - parameter body: (body) Supplement to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSupplementCustomFields(body body: Supplement, completion: ((error: ErrorType?) -> Void)) {
        updateSupplementCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a supplement custom fields
     
     - PUT /beta/supplement/customFields
     - Updates an existing supplement custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Supplement to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSupplementCustomFieldsWithRequestBuilder(body body: Supplement) -> RequestBuilder<Void> {
        let path = "/beta/supplement/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
