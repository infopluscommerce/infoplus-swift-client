//
// LoadAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class LoadAPI: APIBase {
    /**
     Add new audit for a load
     
     - parameter loadId: (path) Id of the load to add an audit to 
     - parameter loadAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadAudit(loadId loadId: Int32, loadAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addLoadAuditWithRequestBuilder(loadId: loadId, loadAudit: loadAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a load
     - PUT /v3.0/load/{loadId}/audit/{loadAudit}
     - Adds an audit to an existing load.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to add an audit to 
     - parameter loadAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadAuditWithRequestBuilder(loadId loadId: Int32, loadAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/audit/{loadAudit}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{loadAudit}", withString: "\(loadAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a load
     
     - parameter loadId: (path) Id of the load to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadFile(loadId loadId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addLoadFileWithRequestBuilder(loadId: loadId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a load
     - POST /v3.0/load/{loadId}/file/{fileName}
     - Adds a file to an existing load.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadFileWithRequestBuilder(loadId loadId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a load by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter loadId: (path) Id of the load to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadFileByURL(body body: RecordFile, loadId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addLoadFileByURLWithRequestBuilder(body: body, loadId: loadId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a load by URL.
     - POST /v3.0/load/{loadId}/file
     - Adds a file to an existing load by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter loadId: (path) Id of the load to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadFileByURLWithRequestBuilder(body body: RecordFile, loadId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/file"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a load.
     
     - parameter loadId: (path) Id of the load to add a tag to 
     - parameter loadTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLoadTag(loadId loadId: Int32, loadTag: String, completion: ((error: ErrorType?) -> Void)) {
        addLoadTagWithRequestBuilder(loadId: loadId, loadTag: loadTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a load.
     - PUT /v3.0/load/{loadId}/tag/{loadTag}
     - Adds a tag to an existing load.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to add a tag to 
     - parameter loadTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addLoadTagWithRequestBuilder(loadId loadId: Int32, loadTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/tag/{loadTag}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{loadTag}", withString: "\(loadTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a load.
     
     - parameter loadId: (path) Id of the load to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteLoadFile(loadId loadId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteLoadFileWithRequestBuilder(loadId: loadId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a load.
     - DELETE /v3.0/load/{loadId}/file/{fileId}
     - Deletes an existing load file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteLoadFileWithRequestBuilder(loadId loadId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a load.
     
     - parameter loadId: (path) Id of the load to remove tag from 
     - parameter loadTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteLoadTag(loadId loadId: Int32, loadTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteLoadTagWithRequestBuilder(loadId: loadId, loadTag: loadTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a load.
     - DELETE /v3.0/load/{loadId}/tag/{loadTag}
     - Deletes an existing load tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to remove tag from 
     - parameter loadTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteLoadTagWithRequestBuilder(loadId loadId: Int32, loadTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/tag/{loadTag}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{loadTag}", withString: "\(loadTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a load by id
     
     - parameter loadId: (path) Id of the load to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateLoadById(loadId loadId: Int32, completion: ((data: Load?, error: ErrorType?) -> Void)) {
        getDuplicateLoadByIdWithRequestBuilder(loadId: loadId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a load by id
     - GET /v3.0/load/duplicate/{loadId}
     - Returns a duplicated load identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonTypeId" : 7,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "parentLoadId" : 5,
  "lpn" : "lpn",
  "palletTypeId" : 2,
  "warehouseId" : 1,
  "locationId" : 5,
  "id" : 0,
  "behaviorType" : "behaviorType",
  "orderNoList" : [ 9.301444243932575517419536481611430644989013671875, 9.301444243932575517419536481611430644989013671875 ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter loadId: (path) Id of the load to be duplicated. 

     - returns: RequestBuilder<Load> 
     */
    public class func getDuplicateLoadByIdWithRequestBuilder(loadId loadId: Int32) -> RequestBuilder<Load> {
        var path = "/v3.0/load/duplicate/{loadId}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Load>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search loads by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Load]?, error: ErrorType?) -> Void)) {
        getLoadByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search loads by filter
     - GET /v3.0/load/search
     - Returns the list of loads that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "cartonTypeId" : 7,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "parentLoadId" : 5,
  "lpn" : "lpn",
  "palletTypeId" : 2,
  "warehouseId" : 1,
  "locationId" : 5,
  "id" : 0,
  "behaviorType" : "behaviorType",
  "orderNoList" : [ 9.301444243932575517419536481611430644989013671875, 9.301444243932575517419536481611430644989013671875 ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}, {
  "cartonTypeId" : 7,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "parentLoadId" : 5,
  "lpn" : "lpn",
  "palletTypeId" : 2,
  "warehouseId" : 1,
  "locationId" : 5,
  "id" : 0,
  "behaviorType" : "behaviorType",
  "orderNoList" : [ 9.301444243932575517419536481611430644989013671875, 9.301444243932575517419536481611430644989013671875 ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Load]> 
     */
    public class func getLoadByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Load]> {
        let path = "/v3.0/load/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Load]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a load by id
     
     - parameter loadId: (path) Id of the load to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadById(loadId loadId: Int32, completion: ((data: Load?, error: ErrorType?) -> Void)) {
        getLoadByIdWithRequestBuilder(loadId: loadId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a load by id
     - GET /v3.0/load/{loadId}
     - Returns the load identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonTypeId" : 7,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "parentLoadId" : 5,
  "lpn" : "lpn",
  "palletTypeId" : 2,
  "warehouseId" : 1,
  "locationId" : 5,
  "id" : 0,
  "behaviorType" : "behaviorType",
  "orderNoList" : [ 9.301444243932575517419536481611430644989013671875, 9.301444243932575517419536481611430644989013671875 ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter loadId: (path) Id of the load to be returned. 

     - returns: RequestBuilder<Load> 
     */
    public class func getLoadByIdWithRequestBuilder(loadId loadId: Int32) -> RequestBuilder<Load> {
        var path = "/v3.0/load/{loadId}"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Load>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a load.
     
     - parameter loadId: (path) Id of the load to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadFiles(loadId loadId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getLoadFilesWithRequestBuilder(loadId: loadId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a load.
     - GET /v3.0/load/{loadId}/file
     - Get all existing load files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getLoadFilesWithRequestBuilder(loadId loadId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/file"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a load.
     
     - parameter loadId: (path) Id of the load to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLoadTags(loadId loadId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getLoadTagsWithRequestBuilder(loadId: loadId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a load.
     - GET /v3.0/load/{loadId}/tag
     - Get all existing load tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter loadId: (path) Id of the load to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getLoadTagsWithRequestBuilder(loadId loadId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/load/{loadId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{loadId}", withString: "\(loadId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a load custom fields
     
     - parameter body: (body) Load to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateLoadCustomFields(body body: Load, completion: ((error: ErrorType?) -> Void)) {
        updateLoadCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a load custom fields
     - PUT /v3.0/load/customFields
     - Updates an existing load custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Load to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateLoadCustomFieldsWithRequestBuilder(body body: Load) -> RequestBuilder<Void> {
        let path = "/v3.0/load/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
