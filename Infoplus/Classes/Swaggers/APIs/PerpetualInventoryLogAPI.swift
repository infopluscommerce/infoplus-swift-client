//
// PerpetualInventoryLogAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PerpetualInventoryLogAPI: APIBase {
    /**
     Add new audit for a perpetualInventoryLog
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add an audit to 
     - parameter perpetualInventoryLogAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPerpetualInventoryLogAudit(perpetualInventoryLogId perpetualInventoryLogId: Int32, perpetualInventoryLogAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addPerpetualInventoryLogAuditWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId, perpetualInventoryLogAudit: perpetualInventoryLogAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a perpetualInventoryLog
     - PUT /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/audit/{perpetualInventoryLogAudit}
     - Adds an audit to an existing perpetualInventoryLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add an audit to 
     - parameter perpetualInventoryLogAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPerpetualInventoryLogAuditWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32, perpetualInventoryLogAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/audit/{perpetualInventoryLogAudit}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogAudit}", withString: "\(perpetualInventoryLogAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a perpetualInventoryLog
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPerpetualInventoryLogFile(perpetualInventoryLogId perpetualInventoryLogId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addPerpetualInventoryLogFileWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a perpetualInventoryLog
     - POST /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file/{fileName}
     - Adds a file to an existing perpetualInventoryLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addPerpetualInventoryLogFileWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a perpetualInventoryLog by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPerpetualInventoryLogFileByURL(body body: RecordFile, perpetualInventoryLogId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addPerpetualInventoryLogFileByURLWithRequestBuilder(body: body, perpetualInventoryLogId: perpetualInventoryLogId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a perpetualInventoryLog by URL.
     - POST /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file
     - Adds a file to an existing perpetualInventoryLog by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addPerpetualInventoryLogFileByURLWithRequestBuilder(body body: RecordFile, perpetualInventoryLogId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a perpetualInventoryLog.
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add a tag to 
     - parameter perpetualInventoryLogTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPerpetualInventoryLogTag(perpetualInventoryLogId perpetualInventoryLogId: Int32, perpetualInventoryLogTag: String, completion: ((error: ErrorType?) -> Void)) {
        addPerpetualInventoryLogTagWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId, perpetualInventoryLogTag: perpetualInventoryLogTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a perpetualInventoryLog.
     - PUT /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/tag/{perpetualInventoryLogTag}
     - Adds a tag to an existing perpetualInventoryLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to add a tag to 
     - parameter perpetualInventoryLogTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPerpetualInventoryLogTagWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32, perpetualInventoryLogTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/tag/{perpetualInventoryLogTag}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogTag}", withString: "\(perpetualInventoryLogTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a perpetualInventoryLog.
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePerpetualInventoryLogFile(perpetualInventoryLogId perpetualInventoryLogId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePerpetualInventoryLogFileWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a perpetualInventoryLog.
     - DELETE /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file/{fileId}
     - Deletes an existing perpetualInventoryLog file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePerpetualInventoryLogFileWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a perpetualInventoryLog.
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to remove tag from 
     - parameter perpetualInventoryLogTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePerpetualInventoryLogTag(perpetualInventoryLogId perpetualInventoryLogId: Int32, perpetualInventoryLogTag: String, completion: ((error: ErrorType?) -> Void)) {
        deletePerpetualInventoryLogTagWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId, perpetualInventoryLogTag: perpetualInventoryLogTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a perpetualInventoryLog.
     - DELETE /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/tag/{perpetualInventoryLogTag}
     - Deletes an existing perpetualInventoryLog tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to remove tag from 
     - parameter perpetualInventoryLogTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePerpetualInventoryLogTagWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32, perpetualInventoryLogTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/tag/{perpetualInventoryLogTag}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogTag}", withString: "\(perpetualInventoryLogTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a perpetualInventoryLog by id
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicatePerpetualInventoryLogById(perpetualInventoryLogId perpetualInventoryLogId: Int32, completion: ((data: PerpetualInventoryLog?, error: ErrorType?) -> Void)) {
        getDuplicatePerpetualInventoryLogByIdWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a perpetualInventoryLog by id
     - GET /v3.0/perpetualInventoryLog/duplicate/{perpetualInventoryLogId}
     - Returns a duplicated perpetualInventoryLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sampleTo" : "sampleTo",
  "budgetCode" : "budgetCode",
  "interimFact" : 6.77832496304801335185175048536621034145355224609375,
  "legacyPoNo" : "legacyPoNo",
  "weightPerWrap" : 6.87805222012787620400331434211693704128265380859375,
  "vendorId" : 5,
  "itemAllocationRule" : "itemAllocationRule",
  "oddQuantity" : 9,
  "orderQuantity" : 7,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "revDate" : "revDate",
  "unitsPerCase" : 0,
  "itemStorageLotMixingRule" : "itemStorageLotMixingRule",
  "lineNo" : 7,
  "unitCode" : "unitCode",
  "id" : 0,
  "sku" : "sku",
  "itemForwardItemMixingRule" : "itemForwardItemMixingRule",
  "currentQuantity" : 7,
  "pricingPer" : "pricingPer",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "mlCost" : 4.1456080298839363962315474054776132106781005859375,
  "lobId" : 5,
  "height" : 6.51918095101838179772357761976309120655059814453125,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00",
  "chargeFreight" : "chargeFreight",
  "itemWarehouseDisplayField" : "itemWarehouseDisplayField",
  "accountingCode" : "accountingCode",
  "taxExempt" : "taxExempt",
  "itemForwardLotMixingRule" : "itemForwardLotMixingRule",
  "outstandingPickQuantity" : 9,
  "artBack" : "artBack",
  "lastAct" : "2000-01-23T04:56:07.000+00:00",
  "itemBarcodeField" : "itemBarcodeField",
  "capitalize" : "capitalize",
  "itemReceiptLocationId" : 6,
  "warehouseId" : 2,
  "maxUnders" : 5,
  "interimQuantity" : 1,
  "receivedQuantity" : 8,
  "receiptNo" : 3,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "itemStorageItemMixingRule" : "itemStorageItemMixingRule",
  "asnId" : 5,
  "dockDate" : "2000-01-23T04:56:07.000+00:00",
  "asnLine" : 7,
  "itemProductIdTagSchemeId" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptStatus" : "receiptStatus",
  "factCost" : 2.027123023002321833274663731572218239307403564453125,
  "endQuantity" : 6,
  "maxFreight" : 6.8468526983526398765889098285697400569915771484375,
  "norcs" : "norcs",
  "mlVendor" : 3,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "origin",
  "warehouseLocationId" : 3,
  "endFact" : 6.96511769763884558415156789124011993408203125,
  "enteredBy" : "enteredBy",
  "caseWeight" : 7.05877035158235610623478351044468581676483154296875,
  "locationStatus" : "locationStatus",
  "distDate" : "2000-01-23T04:56:07.000+00:00",
  "endVal" : 3.557195227068097320710649000830017030239105224609375,
  "wrapCode" : "wrapCode",
  "sfpComplete" : "sfpComplete",
  "bsVendor" : 6,
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "receivedBy" : "receivedBy",
  "unitsPerWrap" : 1,
  "address" : "address",
  "cost" : 1.024645700144157789424070870154537260532379150390625,
  "interimVal" : 2.884162126668780246063761296682059764862060546875,
  "sell" : 1.489415909854170383397331534069962799549102783203125,
  "length" : 4.6523964329332461176136348512955009937286376953125,
  "maxOvers" : 4,
  "productIdTag" : "productIdTag",
  "impressions" : 8,
  "sample" : 1,
  "fromProd" : 9,
  "paidFull" : "paidFull",
  "prodLot" : "prodLot",
  "width" : 0.10263654006109401706225980888120830059051513671875,
  "receivedSfp" : 9,
  "accrual" : "accrual",
  "freightCost" : 6.683562403749608193948006373830139636993408203125,
  "itemReceiptId" : 1,
  "maxOther" : 7.4577447736837658709418974467553198337554931640625,
  "freezeAction" : "freezeAction"
}}]
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to be duplicated. 

     - returns: RequestBuilder<PerpetualInventoryLog> 
     */
    public class func getDuplicatePerpetualInventoryLogByIdWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32) -> RequestBuilder<PerpetualInventoryLog> {
        var path = "/v3.0/perpetualInventoryLog/duplicate/{perpetualInventoryLogId}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PerpetualInventoryLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search perpetualInventoryLogs by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPerpetualInventoryLogByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [PerpetualInventoryLog]?, error: ErrorType?) -> Void)) {
        getPerpetualInventoryLogByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search perpetualInventoryLogs by filter
     - GET /v3.0/perpetualInventoryLog/search
     - Returns the list of perpetualInventoryLogs that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "sampleTo" : "sampleTo",
  "budgetCode" : "budgetCode",
  "interimFact" : 6.77832496304801335185175048536621034145355224609375,
  "legacyPoNo" : "legacyPoNo",
  "weightPerWrap" : 6.87805222012787620400331434211693704128265380859375,
  "vendorId" : 5,
  "itemAllocationRule" : "itemAllocationRule",
  "oddQuantity" : 9,
  "orderQuantity" : 7,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "revDate" : "revDate",
  "unitsPerCase" : 0,
  "itemStorageLotMixingRule" : "itemStorageLotMixingRule",
  "lineNo" : 7,
  "unitCode" : "unitCode",
  "id" : 0,
  "sku" : "sku",
  "itemForwardItemMixingRule" : "itemForwardItemMixingRule",
  "currentQuantity" : 7,
  "pricingPer" : "pricingPer",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "mlCost" : 4.1456080298839363962315474054776132106781005859375,
  "lobId" : 5,
  "height" : 6.51918095101838179772357761976309120655059814453125,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00",
  "chargeFreight" : "chargeFreight",
  "itemWarehouseDisplayField" : "itemWarehouseDisplayField",
  "accountingCode" : "accountingCode",
  "taxExempt" : "taxExempt",
  "itemForwardLotMixingRule" : "itemForwardLotMixingRule",
  "outstandingPickQuantity" : 9,
  "artBack" : "artBack",
  "lastAct" : "2000-01-23T04:56:07.000+00:00",
  "itemBarcodeField" : "itemBarcodeField",
  "capitalize" : "capitalize",
  "itemReceiptLocationId" : 6,
  "warehouseId" : 2,
  "maxUnders" : 5,
  "interimQuantity" : 1,
  "receivedQuantity" : 8,
  "receiptNo" : 3,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "itemStorageItemMixingRule" : "itemStorageItemMixingRule",
  "asnId" : 5,
  "dockDate" : "2000-01-23T04:56:07.000+00:00",
  "asnLine" : 7,
  "itemProductIdTagSchemeId" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptStatus" : "receiptStatus",
  "factCost" : 2.027123023002321833274663731572218239307403564453125,
  "endQuantity" : 6,
  "maxFreight" : 6.8468526983526398765889098285697400569915771484375,
  "norcs" : "norcs",
  "mlVendor" : 3,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "origin",
  "warehouseLocationId" : 3,
  "endFact" : 6.96511769763884558415156789124011993408203125,
  "enteredBy" : "enteredBy",
  "caseWeight" : 7.05877035158235610623478351044468581676483154296875,
  "locationStatus" : "locationStatus",
  "distDate" : "2000-01-23T04:56:07.000+00:00",
  "endVal" : 3.557195227068097320710649000830017030239105224609375,
  "wrapCode" : "wrapCode",
  "sfpComplete" : "sfpComplete",
  "bsVendor" : 6,
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "receivedBy" : "receivedBy",
  "unitsPerWrap" : 1,
  "address" : "address",
  "cost" : 1.024645700144157789424070870154537260532379150390625,
  "interimVal" : 2.884162126668780246063761296682059764862060546875,
  "sell" : 1.489415909854170383397331534069962799549102783203125,
  "length" : 4.6523964329332461176136348512955009937286376953125,
  "maxOvers" : 4,
  "productIdTag" : "productIdTag",
  "impressions" : 8,
  "sample" : 1,
  "fromProd" : 9,
  "paidFull" : "paidFull",
  "prodLot" : "prodLot",
  "width" : 0.10263654006109401706225980888120830059051513671875,
  "receivedSfp" : 9,
  "accrual" : "accrual",
  "freightCost" : 6.683562403749608193948006373830139636993408203125,
  "itemReceiptId" : 1,
  "maxOther" : 7.4577447736837658709418974467553198337554931640625,
  "freezeAction" : "freezeAction"
}, {
  "sampleTo" : "sampleTo",
  "budgetCode" : "budgetCode",
  "interimFact" : 6.77832496304801335185175048536621034145355224609375,
  "legacyPoNo" : "legacyPoNo",
  "weightPerWrap" : 6.87805222012787620400331434211693704128265380859375,
  "vendorId" : 5,
  "itemAllocationRule" : "itemAllocationRule",
  "oddQuantity" : 9,
  "orderQuantity" : 7,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "revDate" : "revDate",
  "unitsPerCase" : 0,
  "itemStorageLotMixingRule" : "itemStorageLotMixingRule",
  "lineNo" : 7,
  "unitCode" : "unitCode",
  "id" : 0,
  "sku" : "sku",
  "itemForwardItemMixingRule" : "itemForwardItemMixingRule",
  "currentQuantity" : 7,
  "pricingPer" : "pricingPer",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "mlCost" : 4.1456080298839363962315474054776132106781005859375,
  "lobId" : 5,
  "height" : 6.51918095101838179772357761976309120655059814453125,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00",
  "chargeFreight" : "chargeFreight",
  "itemWarehouseDisplayField" : "itemWarehouseDisplayField",
  "accountingCode" : "accountingCode",
  "taxExempt" : "taxExempt",
  "itemForwardLotMixingRule" : "itemForwardLotMixingRule",
  "outstandingPickQuantity" : 9,
  "artBack" : "artBack",
  "lastAct" : "2000-01-23T04:56:07.000+00:00",
  "itemBarcodeField" : "itemBarcodeField",
  "capitalize" : "capitalize",
  "itemReceiptLocationId" : 6,
  "warehouseId" : 2,
  "maxUnders" : 5,
  "interimQuantity" : 1,
  "receivedQuantity" : 8,
  "receiptNo" : 3,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "itemStorageItemMixingRule" : "itemStorageItemMixingRule",
  "asnId" : 5,
  "dockDate" : "2000-01-23T04:56:07.000+00:00",
  "asnLine" : 7,
  "itemProductIdTagSchemeId" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptStatus" : "receiptStatus",
  "factCost" : 2.027123023002321833274663731572218239307403564453125,
  "endQuantity" : 6,
  "maxFreight" : 6.8468526983526398765889098285697400569915771484375,
  "norcs" : "norcs",
  "mlVendor" : 3,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "origin",
  "warehouseLocationId" : 3,
  "endFact" : 6.96511769763884558415156789124011993408203125,
  "enteredBy" : "enteredBy",
  "caseWeight" : 7.05877035158235610623478351044468581676483154296875,
  "locationStatus" : "locationStatus",
  "distDate" : "2000-01-23T04:56:07.000+00:00",
  "endVal" : 3.557195227068097320710649000830017030239105224609375,
  "wrapCode" : "wrapCode",
  "sfpComplete" : "sfpComplete",
  "bsVendor" : 6,
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "receivedBy" : "receivedBy",
  "unitsPerWrap" : 1,
  "address" : "address",
  "cost" : 1.024645700144157789424070870154537260532379150390625,
  "interimVal" : 2.884162126668780246063761296682059764862060546875,
  "sell" : 1.489415909854170383397331534069962799549102783203125,
  "length" : 4.6523964329332461176136348512955009937286376953125,
  "maxOvers" : 4,
  "productIdTag" : "productIdTag",
  "impressions" : 8,
  "sample" : 1,
  "fromProd" : 9,
  "paidFull" : "paidFull",
  "prodLot" : "prodLot",
  "width" : 0.10263654006109401706225980888120830059051513671875,
  "receivedSfp" : 9,
  "accrual" : "accrual",
  "freightCost" : 6.683562403749608193948006373830139636993408203125,
  "itemReceiptId" : 1,
  "maxOther" : 7.4577447736837658709418974467553198337554931640625,
  "freezeAction" : "freezeAction"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[PerpetualInventoryLog]> 
     */
    public class func getPerpetualInventoryLogByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[PerpetualInventoryLog]> {
        let path = "/v3.0/perpetualInventoryLog/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PerpetualInventoryLog]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a perpetualInventoryLog by id
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPerpetualInventoryLogById(perpetualInventoryLogId perpetualInventoryLogId: Int32, completion: ((data: PerpetualInventoryLog?, error: ErrorType?) -> Void)) {
        getPerpetualInventoryLogByIdWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a perpetualInventoryLog by id
     - GET /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}
     - Returns the perpetualInventoryLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sampleTo" : "sampleTo",
  "budgetCode" : "budgetCode",
  "interimFact" : 6.77832496304801335185175048536621034145355224609375,
  "legacyPoNo" : "legacyPoNo",
  "weightPerWrap" : 6.87805222012787620400331434211693704128265380859375,
  "vendorId" : 5,
  "itemAllocationRule" : "itemAllocationRule",
  "oddQuantity" : 9,
  "orderQuantity" : 7,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "revDate" : "revDate",
  "unitsPerCase" : 0,
  "itemStorageLotMixingRule" : "itemStorageLotMixingRule",
  "lineNo" : 7,
  "unitCode" : "unitCode",
  "id" : 0,
  "sku" : "sku",
  "itemForwardItemMixingRule" : "itemForwardItemMixingRule",
  "currentQuantity" : 7,
  "pricingPer" : "pricingPer",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "mlCost" : 4.1456080298839363962315474054776132106781005859375,
  "lobId" : 5,
  "height" : 6.51918095101838179772357761976309120655059814453125,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00",
  "chargeFreight" : "chargeFreight",
  "itemWarehouseDisplayField" : "itemWarehouseDisplayField",
  "accountingCode" : "accountingCode",
  "taxExempt" : "taxExempt",
  "itemForwardLotMixingRule" : "itemForwardLotMixingRule",
  "outstandingPickQuantity" : 9,
  "artBack" : "artBack",
  "lastAct" : "2000-01-23T04:56:07.000+00:00",
  "itemBarcodeField" : "itemBarcodeField",
  "capitalize" : "capitalize",
  "itemReceiptLocationId" : 6,
  "warehouseId" : 2,
  "maxUnders" : 5,
  "interimQuantity" : 1,
  "receivedQuantity" : 8,
  "receiptNo" : 3,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "itemStorageItemMixingRule" : "itemStorageItemMixingRule",
  "asnId" : 5,
  "dockDate" : "2000-01-23T04:56:07.000+00:00",
  "asnLine" : 7,
  "itemProductIdTagSchemeId" : 3,
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptStatus" : "receiptStatus",
  "factCost" : 2.027123023002321833274663731572218239307403564453125,
  "endQuantity" : 6,
  "maxFreight" : 6.8468526983526398765889098285697400569915771484375,
  "norcs" : "norcs",
  "mlVendor" : 3,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "origin",
  "warehouseLocationId" : 3,
  "endFact" : 6.96511769763884558415156789124011993408203125,
  "enteredBy" : "enteredBy",
  "caseWeight" : 7.05877035158235610623478351044468581676483154296875,
  "locationStatus" : "locationStatus",
  "distDate" : "2000-01-23T04:56:07.000+00:00",
  "endVal" : 3.557195227068097320710649000830017030239105224609375,
  "wrapCode" : "wrapCode",
  "sfpComplete" : "sfpComplete",
  "bsVendor" : 6,
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "receivedBy" : "receivedBy",
  "unitsPerWrap" : 1,
  "address" : "address",
  "cost" : 1.024645700144157789424070870154537260532379150390625,
  "interimVal" : 2.884162126668780246063761296682059764862060546875,
  "sell" : 1.489415909854170383397331534069962799549102783203125,
  "length" : 4.6523964329332461176136348512955009937286376953125,
  "maxOvers" : 4,
  "productIdTag" : "productIdTag",
  "impressions" : 8,
  "sample" : 1,
  "fromProd" : 9,
  "paidFull" : "paidFull",
  "prodLot" : "prodLot",
  "width" : 0.10263654006109401706225980888120830059051513671875,
  "receivedSfp" : 9,
  "accrual" : "accrual",
  "freightCost" : 6.683562403749608193948006373830139636993408203125,
  "itemReceiptId" : 1,
  "maxOther" : 7.4577447736837658709418974467553198337554931640625,
  "freezeAction" : "freezeAction"
}}]
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to be returned. 

     - returns: RequestBuilder<PerpetualInventoryLog> 
     */
    public class func getPerpetualInventoryLogByIdWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32) -> RequestBuilder<PerpetualInventoryLog> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PerpetualInventoryLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a perpetualInventoryLog.
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPerpetualInventoryLogFiles(perpetualInventoryLogId perpetualInventoryLogId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPerpetualInventoryLogFilesWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a perpetualInventoryLog.
     - GET /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file
     - Get all existing perpetualInventoryLog files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPerpetualInventoryLogFilesWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/file"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a perpetualInventoryLog.
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPerpetualInventoryLogTags(perpetualInventoryLogId perpetualInventoryLogId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPerpetualInventoryLogTagsWithRequestBuilder(perpetualInventoryLogId: perpetualInventoryLogId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a perpetualInventoryLog.
     - GET /v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/tag
     - Get all existing perpetualInventoryLog tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter perpetualInventoryLogId: (path) Id of the perpetualInventoryLog to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPerpetualInventoryLogTagsWithRequestBuilder(perpetualInventoryLogId perpetualInventoryLogId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/perpetualInventoryLog/{perpetualInventoryLogId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{perpetualInventoryLogId}", withString: "\(perpetualInventoryLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
