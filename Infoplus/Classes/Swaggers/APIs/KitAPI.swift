//
// KitAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class KitAPI: APIBase {
    /**
     
     Create a kit
     
     - parameter body: (body) Kit to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addKit(body body: Kit, completion: ((data: Kit?, error: ErrorType?) -> Void)) {
        addKitWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a kit
     
     - POST /v2.0/kit
     - Inserts a new kit using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "line7" : "aeiou",
  "line6" : "aeiou",
  "other" : "aeiou",
  "line5" : "aeiou",
  "line4" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "aeiou",
  "midInvQty" : 123,
  "numberOfComponents" : 123,
  "isKOD" : "aeiou",
  "kitSKUId" : 123,
  "touches" : 123,
  "minInvQty" : 123,
  "kodType" : "aeiou",
  "id" : 123,
  "line3" : "aeiou",
  "line2" : "aeiou",
  "packagingType" : "aeiou",
  "line1" : "aeiou",
  "maxInvQty" : 123,
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) Kit to be inserted. 

     - returns: RequestBuilder<Kit> 
     */
    public class func addKitWithRequestBuilder(body body: Kit) -> RequestBuilder<Kit> {
        let path = "/v2.0/kit"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Kit>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a kit
     
     - parameter kitId: (path) Id of the kit to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteKit(kitId kitId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteKitWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a kit
     
     - DELETE /v2.0/kit/{kitId}
     - Deletes the kit identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter kitId: (path) Id of the kit to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteKitWithRequestBuilder(kitId kitId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/kit/{kitId}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a kit by id
     
     - parameter kitId: (path) Id of the kit to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateKitById(kitId kitId: Int, completion: ((data: Kit?, error: ErrorType?) -> Void)) {
        getDuplicateKitByIdWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a kit by id
     
     - GET /v2.0/kit/duplicate/{kitId}
     - Returns a duplicated kit identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "line7" : "aeiou",
  "line6" : "aeiou",
  "other" : "aeiou",
  "line5" : "aeiou",
  "line4" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "aeiou",
  "midInvQty" : 123,
  "numberOfComponents" : 123,
  "isKOD" : "aeiou",
  "kitSKUId" : 123,
  "touches" : 123,
  "minInvQty" : 123,
  "kodType" : "aeiou",
  "id" : 123,
  "line3" : "aeiou",
  "line2" : "aeiou",
  "packagingType" : "aeiou",
  "line1" : "aeiou",
  "maxInvQty" : 123,
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter kitId: (path) Id of the kit to be duplicated. 

     - returns: RequestBuilder<Kit> 
     */
    public class func getDuplicateKitByIdWithRequestBuilder(kitId kitId: Int) -> RequestBuilder<Kit> {
        var path = "/v2.0/kit/duplicate/{kitId}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Kit>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search kits by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getKitByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Kit]?, error: ErrorType?) -> Void)) {
        getKitByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search kits by filter
     
     - GET /v2.0/kit/search
     - Returns the list of kits that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "line7" : "aeiou",
  "line6" : "aeiou",
  "other" : "aeiou",
  "line5" : "aeiou",
  "line4" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "aeiou",
  "midInvQty" : 123,
  "numberOfComponents" : 123,
  "isKOD" : "aeiou",
  "kitSKUId" : 123,
  "touches" : 123,
  "minInvQty" : 123,
  "kodType" : "aeiou",
  "id" : 123,
  "line3" : "aeiou",
  "line2" : "aeiou",
  "packagingType" : "aeiou",
  "line1" : "aeiou",
  "maxInvQty" : 123,
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Kit]> 
     */
    public class func getKitByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Kit]> {
        let path = "/v2.0/kit/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Kit]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a kit by id
     
     - parameter kitId: (path) Id of the kit to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getKitById(kitId kitId: Int, completion: ((data: Kit?, error: ErrorType?) -> Void)) {
        getKitByIdWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a kit by id
     
     - GET /v2.0/kit/{kitId}
     - Returns the kit identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "line7" : "aeiou",
  "line6" : "aeiou",
  "other" : "aeiou",
  "line5" : "aeiou",
  "line4" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "aeiou",
  "midInvQty" : 123,
  "numberOfComponents" : 123,
  "isKOD" : "aeiou",
  "kitSKUId" : 123,
  "touches" : 123,
  "minInvQty" : 123,
  "kodType" : "aeiou",
  "id" : 123,
  "line3" : "aeiou",
  "line2" : "aeiou",
  "packagingType" : "aeiou",
  "line1" : "aeiou",
  "maxInvQty" : 123,
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter kitId: (path) Id of the kit to be returned. 

     - returns: RequestBuilder<Kit> 
     */
    public class func getKitByIdWithRequestBuilder(kitId kitId: Int) -> RequestBuilder<Kit> {
        var path = "/v2.0/kit/{kitId}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Kit>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a kit
     
     - parameter body: (body) Kit to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateKit(body body: Kit, completion: ((error: ErrorType?) -> Void)) {
        updateKitWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a kit
     
     - PUT /v2.0/kit
     - Updates an existing kit using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Kit to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateKitWithRequestBuilder(body body: Kit) -> RequestBuilder<Void> {
        let path = "/v2.0/kit"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a kit custom fields
     
     - parameter body: (body) Kit to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateKitCustomFields(body body: Kit, completion: ((error: ErrorType?) -> Void)) {
        updateKitCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a kit custom fields
     
     - PUT /v2.0/kit/customFields
     - Updates an existing kit custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Kit to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateKitCustomFieldsWithRequestBuilder(body body: Kit) -> RequestBuilder<Void> {
        let path = "/v2.0/kit/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
