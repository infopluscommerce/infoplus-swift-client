//
// KitAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class KitAPI: APIBase {
    /**
     Create a kit
     
     - parameter body: (body) Kit to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addKit(body body: Kit, completion: ((data: Kit?, error: ErrorType?) -> Void)) {
        addKitWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a kit
     - POST /beta/kit
     - Inserts a new kit using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "line7" : "line7",
  "line6" : "line6",
  "other" : "other",
  "line5" : "line5",
  "kitComponentList" : [ {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  }, {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  } ],
  "line4" : "line4",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "line8",
  "midInvQty" : 2,
  "numberOfComponents" : 1,
  "isKOD" : "isKOD",
  "touches" : 5,
  "kitSKU" : "kitSKU",
  "minInvQty" : 5,
  "kodType" : "kodType",
  "id" : 6,
  "line3" : "line3",
  "line2" : "line2",
  "packagingType" : "packagingType",
  "line1" : "line1",
  "maxInvQty" : 7,
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) Kit to be inserted. 

     - returns: RequestBuilder<Kit> 
     */
    public class func addKitWithRequestBuilder(body body: Kit) -> RequestBuilder<Kit> {
        let path = "/beta/kit"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Kit>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a kit
     
     - parameter kitId: (path) Id of the kit to add an audit to 
     - parameter kitAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addKitAudit(kitId kitId: Int32, kitAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addKitAuditWithRequestBuilder(kitId: kitId, kitAudit: kitAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a kit
     - PUT /beta/kit/{kitId}/audit/{kitAudit}
     - Adds an audit to an existing kit.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter kitId: (path) Id of the kit to add an audit to 
     - parameter kitAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addKitAuditWithRequestBuilder(kitId kitId: Int32, kitAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/kit/{kitId}/audit/{kitAudit}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{kitAudit}", withString: "\(kitAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a kit.
     
     - parameter kitId: (path) Id of the kit to add a tag to 
     - parameter kitTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addKitTag(kitId kitId: Int32, kitTag: String, completion: ((error: ErrorType?) -> Void)) {
        addKitTagWithRequestBuilder(kitId: kitId, kitTag: kitTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a kit.
     - PUT /beta/kit/{kitId}/tag/{kitTag}
     - Adds a tag to an existing kit.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter kitId: (path) Id of the kit to add a tag to 
     - parameter kitTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addKitTagWithRequestBuilder(kitId kitId: Int32, kitTag: String) -> RequestBuilder<Void> {
        var path = "/beta/kit/{kitId}/tag/{kitTag}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{kitTag}", withString: "\(kitTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a kit
     
     - parameter kitId: (path) Id of the kit to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteKit(kitId kitId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteKitWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a kit
     - DELETE /beta/kit/{kitId}
     - Deletes the kit identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter kitId: (path) Id of the kit to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteKitWithRequestBuilder(kitId kitId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/kit/{kitId}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a kit.
     
     - parameter kitId: (path) Id of the kit to remove tag from 
     - parameter kitTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteKitTag(kitId kitId: Int32, kitTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteKitTagWithRequestBuilder(kitId: kitId, kitTag: kitTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a kit.
     - DELETE /beta/kit/{kitId}/tag/{kitTag}
     - Deletes an existing kit tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter kitId: (path) Id of the kit to remove tag from 
     - parameter kitTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteKitTagWithRequestBuilder(kitId kitId: Int32, kitTag: String) -> RequestBuilder<Void> {
        var path = "/beta/kit/{kitId}/tag/{kitTag}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{kitTag}", withString: "\(kitTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a kit by id
     
     - parameter kitId: (path) Id of the kit to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateKitById(kitId kitId: Int32, completion: ((data: Kit?, error: ErrorType?) -> Void)) {
        getDuplicateKitByIdWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a kit by id
     - GET /beta/kit/duplicate/{kitId}
     - Returns a duplicated kit identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "line7" : "line7",
  "line6" : "line6",
  "other" : "other",
  "line5" : "line5",
  "kitComponentList" : [ {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  }, {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  } ],
  "line4" : "line4",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "line8",
  "midInvQty" : 2,
  "numberOfComponents" : 1,
  "isKOD" : "isKOD",
  "touches" : 5,
  "kitSKU" : "kitSKU",
  "minInvQty" : 5,
  "kodType" : "kodType",
  "id" : 6,
  "line3" : "line3",
  "line2" : "line2",
  "packagingType" : "packagingType",
  "line1" : "line1",
  "maxInvQty" : 7,
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter kitId: (path) Id of the kit to be duplicated. 

     - returns: RequestBuilder<Kit> 
     */
    public class func getDuplicateKitByIdWithRequestBuilder(kitId kitId: Int32) -> RequestBuilder<Kit> {
        var path = "/beta/kit/duplicate/{kitId}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Kit>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search kits by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getKitByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Kit]?, error: ErrorType?) -> Void)) {
        getKitByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search kits by filter
     - GET /beta/kit/search
     - Returns the list of kits that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "line7" : "line7",
  "line6" : "line6",
  "other" : "other",
  "line5" : "line5",
  "kitComponentList" : [ {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  }, {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  } ],
  "line4" : "line4",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "line8",
  "midInvQty" : 2,
  "numberOfComponents" : 1,
  "isKOD" : "isKOD",
  "touches" : 5,
  "kitSKU" : "kitSKU",
  "minInvQty" : 5,
  "kodType" : "kodType",
  "id" : 6,
  "line3" : "line3",
  "line2" : "line2",
  "packagingType" : "packagingType",
  "line1" : "line1",
  "maxInvQty" : 7,
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "line7" : "line7",
  "line6" : "line6",
  "other" : "other",
  "line5" : "line5",
  "kitComponentList" : [ {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  }, {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  } ],
  "line4" : "line4",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "line8",
  "midInvQty" : 2,
  "numberOfComponents" : 1,
  "isKOD" : "isKOD",
  "touches" : 5,
  "kitSKU" : "kitSKU",
  "minInvQty" : 5,
  "kodType" : "kodType",
  "id" : 6,
  "line3" : "line3",
  "line2" : "line2",
  "packagingType" : "packagingType",
  "line1" : "line1",
  "maxInvQty" : 7,
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Kit]> 
     */
    public class func getKitByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Kit]> {
        let path = "/beta/kit/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Kit]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a kit by id
     
     - parameter kitId: (path) Id of the kit to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getKitById(kitId kitId: Int32, completion: ((data: Kit?, error: ErrorType?) -> Void)) {
        getKitByIdWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a kit by id
     - GET /beta/kit/{kitId}
     - Returns the kit identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "line7" : "line7",
  "line6" : "line6",
  "other" : "other",
  "line5" : "line5",
  "kitComponentList" : [ {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  }, {
    "additionalServices" : "additionalServices",
    "instructions" : "instructions",
    "quantity" : 9,
    "critical" : "critical",
    "customFields" : {
      "key" : "{}"
    },
    "invno" : "invno",
    "sku" : "sku"
  } ],
  "line4" : "line4",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "line8" : "line8",
  "midInvQty" : 2,
  "numberOfComponents" : 1,
  "isKOD" : "isKOD",
  "touches" : 5,
  "kitSKU" : "kitSKU",
  "minInvQty" : 5,
  "kodType" : "kodType",
  "id" : 6,
  "line3" : "line3",
  "line2" : "line2",
  "packagingType" : "packagingType",
  "line1" : "line1",
  "maxInvQty" : 7,
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter kitId: (path) Id of the kit to be returned. 

     - returns: RequestBuilder<Kit> 
     */
    public class func getKitByIdWithRequestBuilder(kitId kitId: Int32) -> RequestBuilder<Kit> {
        var path = "/beta/kit/{kitId}"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Kit>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a kit.
     
     - parameter kitId: (path) Id of the kit to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getKitTags(kitId kitId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getKitTagsWithRequestBuilder(kitId: kitId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a kit.
     - GET /beta/kit/{kitId}/tag
     - Get all existing kit tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter kitId: (path) Id of the kit to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getKitTagsWithRequestBuilder(kitId kitId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/kit/{kitId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{kitId}", withString: "\(kitId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a kit
     
     - parameter body: (body) Kit to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateKit(body body: Kit, completion: ((error: ErrorType?) -> Void)) {
        updateKitWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a kit
     - PUT /beta/kit
     - Updates an existing kit using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Kit to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateKitWithRequestBuilder(body body: Kit) -> RequestBuilder<Void> {
        let path = "/beta/kit"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a kit custom fields
     
     - parameter body: (body) Kit to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateKitCustomFields(body body: Kit, completion: ((error: ErrorType?) -> Void)) {
        updateKitCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a kit custom fields
     - PUT /beta/kit/customFields
     - Updates an existing kit custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Kit to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateKitCustomFieldsWithRequestBuilder(body body: Kit) -> RequestBuilder<Void> {
        let path = "/beta/kit/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
