//
// OrderActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class OrderActivityAPI: APIBase {
    /**
     Create an orderActivity
     
     - parameter body: (body) OrderActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderActivity(body body: OrderActivity, completion: ((data: OrderActivity?, error: ErrorType?) -> Void)) {
        addOrderActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an orderActivity
     - POST /v3.0/orderActivity
     - Inserts a new orderActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 2,
  "omsCustomerId" : 1,
  "shipToStreet" : "shipToStreet",
  "division" : 5,
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 3,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 3,
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "reqStatusName" : "reqStatusName",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "chargedRate" : 7.04836565559697003635619694250635802745819091796875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 9,
  "billToAttention" : "billToAttention",
  "subtotal" : 9.0183481860707832566959041287191212177276611328125,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "warehouseServiceLevelId" : 3,
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 8.7620420127490010742121739895083010196685791015625,
  "freight" : 1.024645700144157789424070870154537260532379150390625,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 6.438423552598546706349225132726132869720458984375,
  "shipToCompany" : "shipToCompany",
  "numberOfCartons" : 7,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.96511769763884558415156789124011993408203125,
  "numberOfPallets" : 1,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "shipCode" : "shipCode",
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 2.884162126668780246063761296682059764862060546875,
  "priorityCode" : 2,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 5,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 6,
  "warehouseServiceTypeId" : 7,
  "orderConfirmationEmailTemplateId" : 6,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 7,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 1.2846590061165319429647979632136411964893341064453125,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 5,
  "orderSourceId" : 3,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 0.80082819046101150206595775671303272247314453125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 6.683562403749608193948006373830139636993408203125,
  "orderSourceName" : "orderSourceName",
  "numberOfInnerPacks" : 7,
  "tax" : 3.557195227068097320710649000830017030239105224609375,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "orderInvoiceTemplateId" : 8,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "numberOfLineItems" : 4,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "numberOfTouches" : 0,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 0,
  "parcelAccountId" : 6,
  "enteredBy" : "enteredBy",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 9.965781217890562260208753286860883235931396484375,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "weightLbs" : 1.489415909854170383397331534069962799549102783203125,
  "estimatedWeightLbs" : 6.8468526983526398765889098285697400569915771484375,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 9.3693102714106686335071572102606296539306640625,
  "orderLoadProgramId" : 4,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "omsOrderNo" : 7,
  "thirdPartyParcelAccountId" : 6,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 5,
  "backOrderStatus" : "backOrderStatus"
}}]
     
     - parameter body: (body) OrderActivity to be inserted. 

     - returns: RequestBuilder<OrderActivity> 
     */
    public class func addOrderActivityWithRequestBuilder(body body: OrderActivity) -> RequestBuilder<OrderActivity> {
        let path = "/v3.0/orderActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an orderActivity
     
     - parameter orderActivityId: (path) Id of the orderActivity to add an audit to 
     - parameter orderActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderActivityAudit(orderActivityId orderActivityId: Double, orderActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderActivityAuditWithRequestBuilder(orderActivityId: orderActivityId, orderActivityAudit: orderActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an orderActivity
     - PUT /v3.0/orderActivity/{orderActivityId}/audit/{orderActivityAudit}
     - Adds an audit to an existing orderActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to add an audit to 
     - parameter orderActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderActivityAuditWithRequestBuilder(orderActivityId orderActivityId: Double, orderActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/audit/{orderActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderActivityAudit}", withString: "\(orderActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an orderActivity
     
     - parameter orderActivityId: (path) Id of the orderActivity to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderActivityFile(orderActivityId orderActivityId: Double, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderActivityFileWithRequestBuilder(orderActivityId: orderActivityId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an orderActivity
     - POST /v3.0/orderActivity/{orderActivityId}/file/{fileName}
     - Adds a file to an existing orderActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderActivityFileWithRequestBuilder(orderActivityId orderActivityId: Double, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an orderActivity by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter orderActivityId: (path) Id of the orderActivity to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderActivityFileByURL(body body: RecordFile, orderActivityId: Double, completion: ((error: ErrorType?) -> Void)) {
        addOrderActivityFileByURLWithRequestBuilder(body: body, orderActivityId: orderActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an orderActivity by URL.
     - POST /v3.0/orderActivity/{orderActivityId}/file
     - Adds a file to an existing orderActivity by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter orderActivityId: (path) Id of the orderActivity to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderActivityFileByURLWithRequestBuilder(body body: RecordFile, orderActivityId: Double) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/file"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an orderActivity.
     
     - parameter orderActivityId: (path) Id of the orderActivity to add a tag to 
     - parameter orderActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderActivityTag(orderActivityId orderActivityId: Double, orderActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderActivityTagWithRequestBuilder(orderActivityId: orderActivityId, orderActivityTag: orderActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an orderActivity.
     - PUT /v3.0/orderActivity/{orderActivityId}/tag/{orderActivityTag}
     - Adds a tag to an existing orderActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to add a tag to 
     - parameter orderActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderActivityTagWithRequestBuilder(orderActivityId orderActivityId: Double, orderActivityTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/tag/{orderActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderActivityTag}", withString: "\(orderActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an orderActivity
     
     - parameter orderActivityId: (path) Id of the orderActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderActivity(orderActivityId orderActivityId: Double, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderActivityWithRequestBuilder(orderActivityId: orderActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an orderActivity
     - DELETE /v3.0/orderActivity/{orderActivityId}
     - Deletes the orderActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderActivityWithRequestBuilder(orderActivityId orderActivityId: Double) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an orderActivity.
     
     - parameter orderActivityId: (path) Id of the orderActivity to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderActivityFile(orderActivityId orderActivityId: Double, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderActivityFileWithRequestBuilder(orderActivityId: orderActivityId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an orderActivity.
     - DELETE /v3.0/orderActivity/{orderActivityId}/file/{fileId}
     - Deletes an existing orderActivity file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderActivityFileWithRequestBuilder(orderActivityId orderActivityId: Double, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an orderActivity.
     
     - parameter orderActivityId: (path) Id of the orderActivity to remove tag from 
     - parameter orderActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderActivityTag(orderActivityId orderActivityId: Double, orderActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderActivityTagWithRequestBuilder(orderActivityId: orderActivityId, orderActivityTag: orderActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an orderActivity.
     - DELETE /v3.0/orderActivity/{orderActivityId}/tag/{orderActivityTag}
     - Deletes an existing orderActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to remove tag from 
     - parameter orderActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderActivityTagWithRequestBuilder(orderActivityId orderActivityId: Double, orderActivityTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/tag/{orderActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderActivityTag}", withString: "\(orderActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an orderActivity by id
     
     - parameter orderActivityId: (path) Id of the orderActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateOrderActivityById(orderActivityId orderActivityId: Double, completion: ((data: OrderActivity?, error: ErrorType?) -> Void)) {
        getDuplicateOrderActivityByIdWithRequestBuilder(orderActivityId: orderActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an orderActivity by id
     - GET /v3.0/orderActivity/duplicate/{orderActivityId}
     - Returns a duplicated orderActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 2,
  "omsCustomerId" : 1,
  "shipToStreet" : "shipToStreet",
  "division" : 5,
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 3,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 3,
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "reqStatusName" : "reqStatusName",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "chargedRate" : 7.04836565559697003635619694250635802745819091796875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 9,
  "billToAttention" : "billToAttention",
  "subtotal" : 9.0183481860707832566959041287191212177276611328125,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "warehouseServiceLevelId" : 3,
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 8.7620420127490010742121739895083010196685791015625,
  "freight" : 1.024645700144157789424070870154537260532379150390625,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 6.438423552598546706349225132726132869720458984375,
  "shipToCompany" : "shipToCompany",
  "numberOfCartons" : 7,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.96511769763884558415156789124011993408203125,
  "numberOfPallets" : 1,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "shipCode" : "shipCode",
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 2.884162126668780246063761296682059764862060546875,
  "priorityCode" : 2,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 5,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 6,
  "warehouseServiceTypeId" : 7,
  "orderConfirmationEmailTemplateId" : 6,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 7,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 1.2846590061165319429647979632136411964893341064453125,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 5,
  "orderSourceId" : 3,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 0.80082819046101150206595775671303272247314453125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 6.683562403749608193948006373830139636993408203125,
  "orderSourceName" : "orderSourceName",
  "numberOfInnerPacks" : 7,
  "tax" : 3.557195227068097320710649000830017030239105224609375,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "orderInvoiceTemplateId" : 8,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "numberOfLineItems" : 4,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "numberOfTouches" : 0,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 0,
  "parcelAccountId" : 6,
  "enteredBy" : "enteredBy",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 9.965781217890562260208753286860883235931396484375,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "weightLbs" : 1.489415909854170383397331534069962799549102783203125,
  "estimatedWeightLbs" : 6.8468526983526398765889098285697400569915771484375,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 9.3693102714106686335071572102606296539306640625,
  "orderLoadProgramId" : 4,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "omsOrderNo" : 7,
  "thirdPartyParcelAccountId" : 6,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 5,
  "backOrderStatus" : "backOrderStatus"
}}]
     
     - parameter orderActivityId: (path) Id of the orderActivity to be duplicated. 

     - returns: RequestBuilder<OrderActivity> 
     */
    public class func getDuplicateOrderActivityByIdWithRequestBuilder(orderActivityId orderActivityId: Double) -> RequestBuilder<OrderActivity> {
        var path = "/v3.0/orderActivity/duplicate/{orderActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search orderActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderActivityByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [OrderActivity]?, error: ErrorType?) -> Void)) {
        getOrderActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search orderActivitys by filter
     - GET /v3.0/orderActivity/search
     - Returns the list of orderActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 2,
  "omsCustomerId" : 1,
  "shipToStreet" : "shipToStreet",
  "division" : 5,
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 3,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 3,
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "reqStatusName" : "reqStatusName",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "chargedRate" : 7.04836565559697003635619694250635802745819091796875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 9,
  "billToAttention" : "billToAttention",
  "subtotal" : 9.0183481860707832566959041287191212177276611328125,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "warehouseServiceLevelId" : 3,
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 8.7620420127490010742121739895083010196685791015625,
  "freight" : 1.024645700144157789424070870154537260532379150390625,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 6.438423552598546706349225132726132869720458984375,
  "shipToCompany" : "shipToCompany",
  "numberOfCartons" : 7,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.96511769763884558415156789124011993408203125,
  "numberOfPallets" : 1,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "shipCode" : "shipCode",
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 2.884162126668780246063761296682059764862060546875,
  "priorityCode" : 2,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 5,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 6,
  "warehouseServiceTypeId" : 7,
  "orderConfirmationEmailTemplateId" : 6,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 7,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 1.2846590061165319429647979632136411964893341064453125,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 5,
  "orderSourceId" : 3,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 0.80082819046101150206595775671303272247314453125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 6.683562403749608193948006373830139636993408203125,
  "orderSourceName" : "orderSourceName",
  "numberOfInnerPacks" : 7,
  "tax" : 3.557195227068097320710649000830017030239105224609375,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "orderInvoiceTemplateId" : 8,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "numberOfLineItems" : 4,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "numberOfTouches" : 0,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 0,
  "parcelAccountId" : 6,
  "enteredBy" : "enteredBy",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 9.965781217890562260208753286860883235931396484375,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "weightLbs" : 1.489415909854170383397331534069962799549102783203125,
  "estimatedWeightLbs" : 6.8468526983526398765889098285697400569915771484375,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 9.3693102714106686335071572102606296539306640625,
  "orderLoadProgramId" : 4,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "omsOrderNo" : 7,
  "thirdPartyParcelAccountId" : 6,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 5,
  "backOrderStatus" : "backOrderStatus"
}, {
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 2,
  "omsCustomerId" : 1,
  "shipToStreet" : "shipToStreet",
  "division" : 5,
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 3,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 3,
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "reqStatusName" : "reqStatusName",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "chargedRate" : 7.04836565559697003635619694250635802745819091796875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 9,
  "billToAttention" : "billToAttention",
  "subtotal" : 9.0183481860707832566959041287191212177276611328125,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "warehouseServiceLevelId" : 3,
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 8.7620420127490010742121739895083010196685791015625,
  "freight" : 1.024645700144157789424070870154537260532379150390625,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 6.438423552598546706349225132726132869720458984375,
  "shipToCompany" : "shipToCompany",
  "numberOfCartons" : 7,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.96511769763884558415156789124011993408203125,
  "numberOfPallets" : 1,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "shipCode" : "shipCode",
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 2.884162126668780246063761296682059764862060546875,
  "priorityCode" : 2,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 5,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 6,
  "warehouseServiceTypeId" : 7,
  "orderConfirmationEmailTemplateId" : 6,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 7,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 1.2846590061165319429647979632136411964893341064453125,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 5,
  "orderSourceId" : 3,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 0.80082819046101150206595775671303272247314453125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 6.683562403749608193948006373830139636993408203125,
  "orderSourceName" : "orderSourceName",
  "numberOfInnerPacks" : 7,
  "tax" : 3.557195227068097320710649000830017030239105224609375,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "orderInvoiceTemplateId" : 8,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "numberOfLineItems" : 4,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "numberOfTouches" : 0,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 0,
  "parcelAccountId" : 6,
  "enteredBy" : "enteredBy",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 9.965781217890562260208753286860883235931396484375,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "weightLbs" : 1.489415909854170383397331534069962799549102783203125,
  "estimatedWeightLbs" : 6.8468526983526398765889098285697400569915771484375,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 9.3693102714106686335071572102606296539306640625,
  "orderLoadProgramId" : 4,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "omsOrderNo" : 7,
  "thirdPartyParcelAccountId" : 6,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 5,
  "backOrderStatus" : "backOrderStatus"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[OrderActivity]> 
     */
    public class func getOrderActivityByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[OrderActivity]> {
        let path = "/v3.0/orderActivity/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[OrderActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an orderActivity by id
     
     - parameter orderActivityId: (path) Id of the orderActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderActivityById(orderActivityId orderActivityId: Double, completion: ((data: OrderActivity?, error: ErrorType?) -> Void)) {
        getOrderActivityByIdWithRequestBuilder(orderActivityId: orderActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an orderActivity by id
     - GET /v3.0/orderActivity/{orderActivityId}
     - Returns the orderActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "backOrderReleaseDate" : "2000-01-23T04:56:07.000+00:00",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 2,
  "omsCustomerId" : 1,
  "shipToStreet" : "shipToStreet",
  "division" : 5,
  "slaStatus" : "slaStatus",
  "billToZip" : "billToZip",
  "numberOfWraps" : 3,
  "shipToEmail" : "shipToEmail",
  "numberOfCases" : 3,
  "billToStreet" : "billToStreet",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "reqStatusName" : "reqStatusName",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "chargedRate" : 7.04836565559697003635619694250635802745819091796875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 9,
  "billToAttention" : "billToAttention",
  "subtotal" : 9.0183481860707832566959041287191212177276611328125,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "warehouseServiceLevelId" : 3,
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 8.7620420127490010742121739895083010196685791015625,
  "freight" : 1.024645700144157789424070870154537260532379150390625,
  "billToCompany" : "billToCompany",
  "productionType" : "productionType",
  "taxOnFreight" : 6.438423552598546706349225132726132869720458984375,
  "shipToCompany" : "shipToCompany",
  "numberOfCartons" : 7,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.96511769763884558415156789124011993408203125,
  "numberOfPallets" : 1,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "shipCode" : "shipCode",
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 2.884162126668780246063761296682059764862060546875,
  "priorityCode" : 2,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "shippedDate" : "2000-01-23T04:56:07.000+00:00",
  "packingSlipTemplateId" : 5,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 6,
  "warehouseServiceTypeId" : 7,
  "orderConfirmationEmailTemplateId" : 6,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 7,
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 1.2846590061165319429647979632136411964893341064453125,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 5,
  "orderSourceId" : 3,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 0.80082819046101150206595775671303272247314453125,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "legacyServiceType" : "legacyServiceType",
  "totalPaid" : 6.683562403749608193948006373830139636993408203125,
  "orderSourceName" : "orderSourceName",
  "numberOfInnerPacks" : 7,
  "tax" : 3.557195227068097320710649000830017030239105224609375,
  "groupOrderId" : 6.02745618307040320615897144307382404804229736328125,
  "orderInvoiceTemplateId" : 8,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "billToPhone" : "billToPhone",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "numberOfLineItems" : 4,
  "legacyServiceTypeName" : "legacyServiceTypeName",
  "numberOfTouches" : 0,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 0,
  "parcelAccountId" : 6,
  "enteredBy" : "enteredBy",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 9.965781217890562260208753286860883235931396484375,
  "slaDate" : "2000-01-23T04:56:07.000+00:00",
  "weightLbs" : 1.489415909854170383397331534069962799549102783203125,
  "estimatedWeightLbs" : 6.8468526983526398765889098285697400569915771484375,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 9.3693102714106686335071572102606296539306640625,
  "orderLoadProgramId" : 4,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "omsOrderNo" : 7,
  "thirdPartyParcelAccountId" : 6,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 5,
  "backOrderStatus" : "backOrderStatus"
}}]
     
     - parameter orderActivityId: (path) Id of the orderActivity to be returned. 

     - returns: RequestBuilder<OrderActivity> 
     */
    public class func getOrderActivityByIdWithRequestBuilder(orderActivityId orderActivityId: Double) -> RequestBuilder<OrderActivity> {
        var path = "/v3.0/orderActivity/{orderActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an orderActivity.
     
     - parameter orderActivityId: (path) Id of the orderActivity to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderActivityFiles(orderActivityId orderActivityId: Double, completion: ((error: ErrorType?) -> Void)) {
        getOrderActivityFilesWithRequestBuilder(orderActivityId: orderActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an orderActivity.
     - GET /v3.0/orderActivity/{orderActivityId}/file
     - Get all existing orderActivity files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getOrderActivityFilesWithRequestBuilder(orderActivityId orderActivityId: Double) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/file"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an orderActivity.
     
     - parameter orderActivityId: (path) Id of the orderActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderActivityTags(orderActivityId orderActivityId: Double, completion: ((error: ErrorType?) -> Void)) {
        getOrderActivityTagsWithRequestBuilder(orderActivityId: orderActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an orderActivity.
     - GET /v3.0/orderActivity/{orderActivityId}/tag
     - Get all existing orderActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderActivityId: (path) Id of the orderActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getOrderActivityTagsWithRequestBuilder(orderActivityId orderActivityId: Double) -> RequestBuilder<Void> {
        var path = "/v3.0/orderActivity/{orderActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{orderActivityId}", withString: "\(orderActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an orderActivity
     
     - parameter body: (body) OrderActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOrderActivity(body body: OrderActivity, completion: ((error: ErrorType?) -> Void)) {
        updateOrderActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an orderActivity
     - PUT /v3.0/orderActivity
     - Updates an existing orderActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) OrderActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateOrderActivityWithRequestBuilder(body body: OrderActivity) -> RequestBuilder<Void> {
        let path = "/v3.0/orderActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
