//
// ItemReceiptActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemReceiptActivityAPI: APIBase {
    /**
     Create an itemReceiptActivity
     
     - parameter body: (body) ItemReceiptActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemReceiptActivity(body body: ItemReceiptActivity, completion: ((data: ItemReceiptActivity?, error: ErrorType?) -> Void)) {
        addItemReceiptActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an itemReceiptActivity
     - POST /beta/itemReceiptActivity
     - Inserts a new itemReceiptActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "itemSector" : "itemSector",
  "alcoholTypeId" : 1,
  "vendorComplianceSurveyAnswer15" : "vendorComplianceSurveyAnswer15",
  "vendorComplianceSurveyAnswer14" : "vendorComplianceSurveyAnswer14",
  "vendorComplianceSurveyAnswer13" : "vendorComplianceSurveyAnswer13",
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer12" : "vendorComplianceSurveyAnswer12",
  "vendorComplianceSurveyAnswer11" : "vendorComplianceSurveyAnswer11",
  "vendorComplianceSurveyAnswer10" : "vendorComplianceSurveyAnswer10",
  "vendorComplianceSurveyAnswer6" : "vendorComplianceSurveyAnswer6",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "vendorComplianceSurveyAnswer5" : "vendorComplianceSurveyAnswer5",
  "alcoholContainerVolume" : 9,
  "vendorComplianceSurveyAnswer4" : "vendorComplianceSurveyAnswer4",
  "vendorComplianceSurveyAnswer3" : "vendorComplianceSurveyAnswer3",
  "poNo" : "poNo",
  "vendorComplianceSurveyAnswer9" : "vendorComplianceSurveyAnswer9",
  "vendorComplianceSurveyAnswer8" : "vendorComplianceSurveyAnswer8",
  "alcoholContent" : 4.9652184929849543237878606305457651615142822265625,
  "vendorComplianceSurveyAnswer7" : "vendorComplianceSurveyAnswer7",
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptUnitsPerCase" : 5,
  "id" : 0,
  "receiptProductionLot" : "receiptProductionLot",
  "sku" : "sku",
  "vendorComplianceSurveyAnswer2" : "vendorComplianceSurveyAnswer2",
  "alcoholState" : "alcoholState",
  "receiptReceivedBy" : "receiptReceivedBy",
  "vendorComplianceSurveyAnswer1" : "vendorComplianceSurveyAnswer1",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "receiptUnitCode" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptType" : "receiptType",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "receiptUnitsPerWrap" : 5,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "receiptNumberOfCases" : 7,
  "itemAccountCodeName" : "itemAccountCodeName",
  "alcoholContainerName" : "alcoholContainerName",
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 9,
  "alcoholContainerId" : 5,
  "itemId" : 1,
  "itemMajorGroup" : 1,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "itemUPC" : "itemUPC",
  "itemSummaryCode" : 7,
  "alcoholRegion" : "alcoholRegion",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "receiptModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "receiptWrapUnitWeight" : 2.027123023002321833274663731572218239307403564453125,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseName" : "warehouseName",
  "receiptStatusName" : "receiptStatusName",
  "receiptEnteredBy" : "receiptEnteredBy",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "receiptCaseWeight" : 4.1456080298839363962315474054776132106781005859375,
  "receiptReceiveQuantity" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "vendorComplianceSurveyAnswer20" : "vendorComplianceSurveyAnswer20",
  "itemAccountCode" : "itemAccountCode",
  "receiptASNCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer19" : "vendorComplianceSurveyAnswer19",
  "vendorComplianceSurveyAnswer18" : "vendorComplianceSurveyAnswer18",
  "vendorComplianceSurveyAnswer17" : "vendorComplianceSurveyAnswer17",
  "vendorComplianceSurveyAnswer16" : "vendorComplianceSurveyAnswer16",
  "itemSubGroup" : 1,
  "itemReceiptId" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter body: (body) ItemReceiptActivity to be inserted. 

     - returns: RequestBuilder<ItemReceiptActivity> 
     */
    public class func addItemReceiptActivityWithRequestBuilder(body body: ItemReceiptActivity) -> RequestBuilder<ItemReceiptActivity> {
        let path = "/beta/itemReceiptActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemReceiptActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an itemReceiptActivity
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to add an audit to 
     - parameter itemReceiptActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemReceiptActivityAudit(itemReceiptActivityId itemReceiptActivityId: Int32, itemReceiptActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemReceiptActivityAuditWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId, itemReceiptActivityAudit: itemReceiptActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an itemReceiptActivity
     - PUT /beta/itemReceiptActivity/{itemReceiptActivityId}/audit/{itemReceiptActivityAudit}
     - Adds an audit to an existing itemReceiptActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to add an audit to 
     - parameter itemReceiptActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemReceiptActivityAuditWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32, itemReceiptActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemReceiptActivity/{itemReceiptActivityId}/audit/{itemReceiptActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityAudit}", withString: "\(itemReceiptActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an itemReceiptActivity.
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to add a tag to 
     - parameter itemReceiptActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemReceiptActivityTag(itemReceiptActivityId itemReceiptActivityId: Int32, itemReceiptActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemReceiptActivityTagWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId, itemReceiptActivityTag: itemReceiptActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an itemReceiptActivity.
     - PUT /beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}
     - Adds a tag to an existing itemReceiptActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to add a tag to 
     - parameter itemReceiptActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemReceiptActivityTagWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32, itemReceiptActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityTag}", withString: "\(itemReceiptActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an itemReceiptActivity
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemReceiptActivity(itemReceiptActivityId itemReceiptActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemReceiptActivityWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an itemReceiptActivity
     - DELETE /beta/itemReceiptActivity/{itemReceiptActivityId}
     - Deletes the itemReceiptActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemReceiptActivityWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemReceiptActivity/{itemReceiptActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an itemReceiptActivity.
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to remove tag from 
     - parameter itemReceiptActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemReceiptActivityTag(itemReceiptActivityId itemReceiptActivityId: Int32, itemReceiptActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemReceiptActivityTagWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId, itemReceiptActivityTag: itemReceiptActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an itemReceiptActivity.
     - DELETE /beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}
     - Deletes an existing itemReceiptActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to remove tag from 
     - parameter itemReceiptActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemReceiptActivityTagWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32, itemReceiptActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemReceiptActivity/{itemReceiptActivityId}/tag/{itemReceiptActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityTag}", withString: "\(itemReceiptActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an itemReceiptActivity by id
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemReceiptActivityById(itemReceiptActivityId itemReceiptActivityId: Int32, completion: ((data: ItemReceiptActivity?, error: ErrorType?) -> Void)) {
        getDuplicateItemReceiptActivityByIdWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an itemReceiptActivity by id
     - GET /beta/itemReceiptActivity/duplicate/{itemReceiptActivityId}
     - Returns a duplicated itemReceiptActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "itemSector" : "itemSector",
  "alcoholTypeId" : 1,
  "vendorComplianceSurveyAnswer15" : "vendorComplianceSurveyAnswer15",
  "vendorComplianceSurveyAnswer14" : "vendorComplianceSurveyAnswer14",
  "vendorComplianceSurveyAnswer13" : "vendorComplianceSurveyAnswer13",
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer12" : "vendorComplianceSurveyAnswer12",
  "vendorComplianceSurveyAnswer11" : "vendorComplianceSurveyAnswer11",
  "vendorComplianceSurveyAnswer10" : "vendorComplianceSurveyAnswer10",
  "vendorComplianceSurveyAnswer6" : "vendorComplianceSurveyAnswer6",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "vendorComplianceSurveyAnswer5" : "vendorComplianceSurveyAnswer5",
  "alcoholContainerVolume" : 9,
  "vendorComplianceSurveyAnswer4" : "vendorComplianceSurveyAnswer4",
  "vendorComplianceSurveyAnswer3" : "vendorComplianceSurveyAnswer3",
  "poNo" : "poNo",
  "vendorComplianceSurveyAnswer9" : "vendorComplianceSurveyAnswer9",
  "vendorComplianceSurveyAnswer8" : "vendorComplianceSurveyAnswer8",
  "alcoholContent" : 4.9652184929849543237878606305457651615142822265625,
  "vendorComplianceSurveyAnswer7" : "vendorComplianceSurveyAnswer7",
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptUnitsPerCase" : 5,
  "id" : 0,
  "receiptProductionLot" : "receiptProductionLot",
  "sku" : "sku",
  "vendorComplianceSurveyAnswer2" : "vendorComplianceSurveyAnswer2",
  "alcoholState" : "alcoholState",
  "receiptReceivedBy" : "receiptReceivedBy",
  "vendorComplianceSurveyAnswer1" : "vendorComplianceSurveyAnswer1",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "receiptUnitCode" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptType" : "receiptType",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "receiptUnitsPerWrap" : 5,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "receiptNumberOfCases" : 7,
  "itemAccountCodeName" : "itemAccountCodeName",
  "alcoholContainerName" : "alcoholContainerName",
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 9,
  "alcoholContainerId" : 5,
  "itemId" : 1,
  "itemMajorGroup" : 1,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "itemUPC" : "itemUPC",
  "itemSummaryCode" : 7,
  "alcoholRegion" : "alcoholRegion",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "receiptModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "receiptWrapUnitWeight" : 2.027123023002321833274663731572218239307403564453125,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseName" : "warehouseName",
  "receiptStatusName" : "receiptStatusName",
  "receiptEnteredBy" : "receiptEnteredBy",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "receiptCaseWeight" : 4.1456080298839363962315474054776132106781005859375,
  "receiptReceiveQuantity" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "vendorComplianceSurveyAnswer20" : "vendorComplianceSurveyAnswer20",
  "itemAccountCode" : "itemAccountCode",
  "receiptASNCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer19" : "vendorComplianceSurveyAnswer19",
  "vendorComplianceSurveyAnswer18" : "vendorComplianceSurveyAnswer18",
  "vendorComplianceSurveyAnswer17" : "vendorComplianceSurveyAnswer17",
  "vendorComplianceSurveyAnswer16" : "vendorComplianceSurveyAnswer16",
  "itemSubGroup" : 1,
  "itemReceiptId" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to be duplicated. 

     - returns: RequestBuilder<ItemReceiptActivity> 
     */
    public class func getDuplicateItemReceiptActivityByIdWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32) -> RequestBuilder<ItemReceiptActivity> {
        var path = "/beta/itemReceiptActivity/duplicate/{itemReceiptActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemReceiptActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search itemReceiptActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemReceiptActivityByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ItemReceiptActivity]?, error: ErrorType?) -> Void)) {
        getItemReceiptActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search itemReceiptActivitys by filter
     - GET /beta/itemReceiptActivity/search
     - Returns the list of itemReceiptActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "itemSector" : "itemSector",
  "alcoholTypeId" : 1,
  "vendorComplianceSurveyAnswer15" : "vendorComplianceSurveyAnswer15",
  "vendorComplianceSurveyAnswer14" : "vendorComplianceSurveyAnswer14",
  "vendorComplianceSurveyAnswer13" : "vendorComplianceSurveyAnswer13",
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer12" : "vendorComplianceSurveyAnswer12",
  "vendorComplianceSurveyAnswer11" : "vendorComplianceSurveyAnswer11",
  "vendorComplianceSurveyAnswer10" : "vendorComplianceSurveyAnswer10",
  "vendorComplianceSurveyAnswer6" : "vendorComplianceSurveyAnswer6",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "vendorComplianceSurveyAnswer5" : "vendorComplianceSurveyAnswer5",
  "alcoholContainerVolume" : 9,
  "vendorComplianceSurveyAnswer4" : "vendorComplianceSurveyAnswer4",
  "vendorComplianceSurveyAnswer3" : "vendorComplianceSurveyAnswer3",
  "poNo" : "poNo",
  "vendorComplianceSurveyAnswer9" : "vendorComplianceSurveyAnswer9",
  "vendorComplianceSurveyAnswer8" : "vendorComplianceSurveyAnswer8",
  "alcoholContent" : 4.9652184929849543237878606305457651615142822265625,
  "vendorComplianceSurveyAnswer7" : "vendorComplianceSurveyAnswer7",
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptUnitsPerCase" : 5,
  "id" : 0,
  "receiptProductionLot" : "receiptProductionLot",
  "sku" : "sku",
  "vendorComplianceSurveyAnswer2" : "vendorComplianceSurveyAnswer2",
  "alcoholState" : "alcoholState",
  "receiptReceivedBy" : "receiptReceivedBy",
  "vendorComplianceSurveyAnswer1" : "vendorComplianceSurveyAnswer1",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "receiptUnitCode" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptType" : "receiptType",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "receiptUnitsPerWrap" : 5,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "receiptNumberOfCases" : 7,
  "itemAccountCodeName" : "itemAccountCodeName",
  "alcoholContainerName" : "alcoholContainerName",
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 9,
  "alcoholContainerId" : 5,
  "itemId" : 1,
  "itemMajorGroup" : 1,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "itemUPC" : "itemUPC",
  "itemSummaryCode" : 7,
  "alcoholRegion" : "alcoholRegion",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "receiptModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "receiptWrapUnitWeight" : 2.027123023002321833274663731572218239307403564453125,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseName" : "warehouseName",
  "receiptStatusName" : "receiptStatusName",
  "receiptEnteredBy" : "receiptEnteredBy",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "receiptCaseWeight" : 4.1456080298839363962315474054776132106781005859375,
  "receiptReceiveQuantity" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "vendorComplianceSurveyAnswer20" : "vendorComplianceSurveyAnswer20",
  "itemAccountCode" : "itemAccountCode",
  "receiptASNCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer19" : "vendorComplianceSurveyAnswer19",
  "vendorComplianceSurveyAnswer18" : "vendorComplianceSurveyAnswer18",
  "vendorComplianceSurveyAnswer17" : "vendorComplianceSurveyAnswer17",
  "vendorComplianceSurveyAnswer16" : "vendorComplianceSurveyAnswer16",
  "itemSubGroup" : 1,
  "itemReceiptId" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}, {
  "itemSector" : "itemSector",
  "alcoholTypeId" : 1,
  "vendorComplianceSurveyAnswer15" : "vendorComplianceSurveyAnswer15",
  "vendorComplianceSurveyAnswer14" : "vendorComplianceSurveyAnswer14",
  "vendorComplianceSurveyAnswer13" : "vendorComplianceSurveyAnswer13",
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer12" : "vendorComplianceSurveyAnswer12",
  "vendorComplianceSurveyAnswer11" : "vendorComplianceSurveyAnswer11",
  "vendorComplianceSurveyAnswer10" : "vendorComplianceSurveyAnswer10",
  "vendorComplianceSurveyAnswer6" : "vendorComplianceSurveyAnswer6",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "vendorComplianceSurveyAnswer5" : "vendorComplianceSurveyAnswer5",
  "alcoholContainerVolume" : 9,
  "vendorComplianceSurveyAnswer4" : "vendorComplianceSurveyAnswer4",
  "vendorComplianceSurveyAnswer3" : "vendorComplianceSurveyAnswer3",
  "poNo" : "poNo",
  "vendorComplianceSurveyAnswer9" : "vendorComplianceSurveyAnswer9",
  "vendorComplianceSurveyAnswer8" : "vendorComplianceSurveyAnswer8",
  "alcoholContent" : 4.9652184929849543237878606305457651615142822265625,
  "vendorComplianceSurveyAnswer7" : "vendorComplianceSurveyAnswer7",
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptUnitsPerCase" : 5,
  "id" : 0,
  "receiptProductionLot" : "receiptProductionLot",
  "sku" : "sku",
  "vendorComplianceSurveyAnswer2" : "vendorComplianceSurveyAnswer2",
  "alcoholState" : "alcoholState",
  "receiptReceivedBy" : "receiptReceivedBy",
  "vendorComplianceSurveyAnswer1" : "vendorComplianceSurveyAnswer1",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "receiptUnitCode" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptType" : "receiptType",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "receiptUnitsPerWrap" : 5,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "receiptNumberOfCases" : 7,
  "itemAccountCodeName" : "itemAccountCodeName",
  "alcoholContainerName" : "alcoholContainerName",
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 9,
  "alcoholContainerId" : 5,
  "itemId" : 1,
  "itemMajorGroup" : 1,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "itemUPC" : "itemUPC",
  "itemSummaryCode" : 7,
  "alcoholRegion" : "alcoholRegion",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "receiptModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "receiptWrapUnitWeight" : 2.027123023002321833274663731572218239307403564453125,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseName" : "warehouseName",
  "receiptStatusName" : "receiptStatusName",
  "receiptEnteredBy" : "receiptEnteredBy",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "receiptCaseWeight" : 4.1456080298839363962315474054776132106781005859375,
  "receiptReceiveQuantity" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "vendorComplianceSurveyAnswer20" : "vendorComplianceSurveyAnswer20",
  "itemAccountCode" : "itemAccountCode",
  "receiptASNCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer19" : "vendorComplianceSurveyAnswer19",
  "vendorComplianceSurveyAnswer18" : "vendorComplianceSurveyAnswer18",
  "vendorComplianceSurveyAnswer17" : "vendorComplianceSurveyAnswer17",
  "vendorComplianceSurveyAnswer16" : "vendorComplianceSurveyAnswer16",
  "itemSubGroup" : 1,
  "itemReceiptId" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemReceiptActivity]> 
     */
    public class func getItemReceiptActivityByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ItemReceiptActivity]> {
        let path = "/beta/itemReceiptActivity/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ItemReceiptActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an itemReceiptActivity by id
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemReceiptActivityById(itemReceiptActivityId itemReceiptActivityId: Int32, completion: ((data: ItemReceiptActivity?, error: ErrorType?) -> Void)) {
        getItemReceiptActivityByIdWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an itemReceiptActivity by id
     - GET /beta/itemReceiptActivity/{itemReceiptActivityId}
     - Returns the itemReceiptActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "itemSector" : "itemSector",
  "alcoholTypeId" : 1,
  "vendorComplianceSurveyAnswer15" : "vendorComplianceSurveyAnswer15",
  "vendorComplianceSurveyAnswer14" : "vendorComplianceSurveyAnswer14",
  "vendorComplianceSurveyAnswer13" : "vendorComplianceSurveyAnswer13",
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer12" : "vendorComplianceSurveyAnswer12",
  "vendorComplianceSurveyAnswer11" : "vendorComplianceSurveyAnswer11",
  "vendorComplianceSurveyAnswer10" : "vendorComplianceSurveyAnswer10",
  "vendorComplianceSurveyAnswer6" : "vendorComplianceSurveyAnswer6",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "vendorComplianceSurveyAnswer5" : "vendorComplianceSurveyAnswer5",
  "alcoholContainerVolume" : 9,
  "vendorComplianceSurveyAnswer4" : "vendorComplianceSurveyAnswer4",
  "vendorComplianceSurveyAnswer3" : "vendorComplianceSurveyAnswer3",
  "poNo" : "poNo",
  "vendorComplianceSurveyAnswer9" : "vendorComplianceSurveyAnswer9",
  "vendorComplianceSurveyAnswer8" : "vendorComplianceSurveyAnswer8",
  "alcoholContent" : 4.9652184929849543237878606305457651615142822265625,
  "vendorComplianceSurveyAnswer7" : "vendorComplianceSurveyAnswer7",
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptUnitsPerCase" : 5,
  "id" : 0,
  "receiptProductionLot" : "receiptProductionLot",
  "sku" : "sku",
  "vendorComplianceSurveyAnswer2" : "vendorComplianceSurveyAnswer2",
  "alcoholState" : "alcoholState",
  "receiptReceivedBy" : "receiptReceivedBy",
  "vendorComplianceSurveyAnswer1" : "vendorComplianceSurveyAnswer1",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 1,
  "receiptUnitCode" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "receiptType" : "receiptType",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "receiptUnitsPerWrap" : 5,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "receiptNumberOfCases" : 7,
  "itemAccountCodeName" : "itemAccountCodeName",
  "alcoholContainerName" : "alcoholContainerName",
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 9,
  "alcoholContainerId" : 5,
  "itemId" : 1,
  "itemMajorGroup" : 1,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "itemUPC" : "itemUPC",
  "itemSummaryCode" : 7,
  "alcoholRegion" : "alcoholRegion",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "receiptModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "receiptWrapUnitWeight" : 2.027123023002321833274663731572218239307403564453125,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseName" : "warehouseName",
  "receiptStatusName" : "receiptStatusName",
  "receiptEnteredBy" : "receiptEnteredBy",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "receiptCaseWeight" : 4.1456080298839363962315474054776132106781005859375,
  "receiptReceiveQuantity" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "alcoholCountryName" : "alcoholCountryName",
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "vendorComplianceSurveyAnswer20" : "vendorComplianceSurveyAnswer20",
  "itemAccountCode" : "itemAccountCode",
  "receiptASNCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "vendorComplianceSurveyAnswer19" : "vendorComplianceSurveyAnswer19",
  "vendorComplianceSurveyAnswer18" : "vendorComplianceSurveyAnswer18",
  "vendorComplianceSurveyAnswer17" : "vendorComplianceSurveyAnswer17",
  "vendorComplianceSurveyAnswer16" : "vendorComplianceSurveyAnswer16",
  "itemSubGroup" : 1,
  "itemReceiptId" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to be returned. 

     - returns: RequestBuilder<ItemReceiptActivity> 
     */
    public class func getItemReceiptActivityByIdWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32) -> RequestBuilder<ItemReceiptActivity> {
        var path = "/beta/itemReceiptActivity/{itemReceiptActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemReceiptActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an itemReceiptActivity.
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemReceiptActivityTags(itemReceiptActivityId itemReceiptActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemReceiptActivityTagsWithRequestBuilder(itemReceiptActivityId: itemReceiptActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an itemReceiptActivity.
     - GET /beta/itemReceiptActivity/{itemReceiptActivityId}/tag
     - Get all existing itemReceiptActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptActivityId: (path) Id of the itemReceiptActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemReceiptActivityTagsWithRequestBuilder(itemReceiptActivityId itemReceiptActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemReceiptActivity/{itemReceiptActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptActivityId}", withString: "\(itemReceiptActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an itemReceiptActivity
     
     - parameter body: (body) ItemReceiptActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemReceiptActivity(body body: ItemReceiptActivity, completion: ((error: ErrorType?) -> Void)) {
        updateItemReceiptActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an itemReceiptActivity
     - PUT /beta/itemReceiptActivity
     - Updates an existing itemReceiptActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemReceiptActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemReceiptActivityWithRequestBuilder(body body: ItemReceiptActivity) -> RequestBuilder<Void> {
        let path = "/beta/itemReceiptActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
