//
// CommodityCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CommodityCodeAPI: APIBase {
    /**
     Add new audit for a commodityCode
     
     - parameter commodityCodeId: (path) Id of the commodityCode to add an audit to 
     - parameter commodityCodeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCommodityCodeAudit(commodityCodeId commodityCodeId: Int32, commodityCodeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addCommodityCodeAuditWithRequestBuilder(commodityCodeId: commodityCodeId, commodityCodeAudit: commodityCodeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a commodityCode
     - PUT /beta/commodityCode/{commodityCodeId}/audit/{commodityCodeAudit}
     - Adds an audit to an existing commodityCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to add an audit to 
     - parameter commodityCodeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCommodityCodeAuditWithRequestBuilder(commodityCodeId commodityCodeId: Int32, commodityCodeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/audit/{commodityCodeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeAudit}", withString: "\(commodityCodeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a commodityCode
     
     - parameter commodityCodeId: (path) Id of the commodityCode to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCommodityCodeFile(commodityCodeId commodityCodeId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addCommodityCodeFileWithRequestBuilder(commodityCodeId: commodityCodeId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a commodityCode
     - POST /beta/commodityCode/{commodityCodeId}/file/{fileName}
     - Adds a file to an existing commodityCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addCommodityCodeFileWithRequestBuilder(commodityCodeId commodityCodeId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a commodityCode by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter commodityCodeId: (path) Id of the commodityCode to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCommodityCodeFileByURL(body body: RecordFile, commodityCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addCommodityCodeFileByURLWithRequestBuilder(body: body, commodityCodeId: commodityCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a commodityCode by URL.
     - POST /beta/commodityCode/{commodityCodeId}/file
     - Adds a file to an existing commodityCode by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter commodityCodeId: (path) Id of the commodityCode to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addCommodityCodeFileByURLWithRequestBuilder(body body: RecordFile, commodityCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a commodityCode.
     
     - parameter commodityCodeId: (path) Id of the commodityCode to add a tag to 
     - parameter commodityCodeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCommodityCodeTag(commodityCodeId commodityCodeId: Int32, commodityCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addCommodityCodeTagWithRequestBuilder(commodityCodeId: commodityCodeId, commodityCodeTag: commodityCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a commodityCode.
     - PUT /beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}
     - Adds a tag to an existing commodityCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to add a tag to 
     - parameter commodityCodeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCommodityCodeTagWithRequestBuilder(commodityCodeId commodityCodeId: Int32, commodityCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeTag}", withString: "\(commodityCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a commodityCode.
     
     - parameter commodityCodeId: (path) Id of the commodityCode to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCommodityCodeFile(commodityCodeId commodityCodeId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteCommodityCodeFileWithRequestBuilder(commodityCodeId: commodityCodeId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a commodityCode.
     - DELETE /beta/commodityCode/{commodityCodeId}/file/{fileId}
     - Deletes an existing commodityCode file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCommodityCodeFileWithRequestBuilder(commodityCodeId commodityCodeId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a commodityCode.
     
     - parameter commodityCodeId: (path) Id of the commodityCode to remove tag from 
     - parameter commodityCodeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCommodityCodeTag(commodityCodeId commodityCodeId: Int32, commodityCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteCommodityCodeTagWithRequestBuilder(commodityCodeId: commodityCodeId, commodityCodeTag: commodityCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a commodityCode.
     - DELETE /beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}
     - Deletes an existing commodityCode tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to remove tag from 
     - parameter commodityCodeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCommodityCodeTagWithRequestBuilder(commodityCodeId commodityCodeId: Int32, commodityCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/tag/{commodityCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeTag}", withString: "\(commodityCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search commodityCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCommodityCodeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [CommodityCode]?, error: ErrorType?) -> Void)) {
        getCommodityCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search commodityCodes by filter
     - GET /beta/commodityCode/search
     - Returns the list of commodityCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "code" : "code",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "meaning" : "meaning",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "code" : "code",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "meaning" : "meaning",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[CommodityCode]> 
     */
    public class func getCommodityCodeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[CommodityCode]> {
        let path = "/beta/commodityCode/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[CommodityCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a commodityCode by id
     
     - parameter commodityCodeId: (path) Id of the commodityCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCommodityCodeById(commodityCodeId commodityCodeId: Int32, completion: ((data: CommodityCode?, error: ErrorType?) -> Void)) {
        getCommodityCodeByIdWithRequestBuilder(commodityCodeId: commodityCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a commodityCode by id
     - GET /beta/commodityCode/{commodityCodeId}
     - Returns the commodityCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "code" : "code",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "meaning" : "meaning",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter commodityCodeId: (path) Id of the commodityCode to be returned. 

     - returns: RequestBuilder<CommodityCode> 
     */
    public class func getCommodityCodeByIdWithRequestBuilder(commodityCodeId commodityCodeId: Int32) -> RequestBuilder<CommodityCode> {
        var path = "/beta/commodityCode/{commodityCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommodityCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a commodityCode.
     
     - parameter commodityCodeId: (path) Id of the commodityCode to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCommodityCodeFiles(commodityCodeId commodityCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCommodityCodeFilesWithRequestBuilder(commodityCodeId: commodityCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a commodityCode.
     - GET /beta/commodityCode/{commodityCodeId}/file
     - Get all existing commodityCode files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCommodityCodeFilesWithRequestBuilder(commodityCodeId commodityCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a commodityCode.
     
     - parameter commodityCodeId: (path) Id of the commodityCode to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCommodityCodeTags(commodityCodeId commodityCodeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCommodityCodeTagsWithRequestBuilder(commodityCodeId: commodityCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a commodityCode.
     - GET /beta/commodityCode/{commodityCodeId}/tag
     - Get all existing commodityCode tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter commodityCodeId: (path) Id of the commodityCode to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCommodityCodeTagsWithRequestBuilder(commodityCodeId commodityCodeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/commodityCode/{commodityCodeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a commodityCode by id
     
     - parameter commodityCodeId: (path) Id of the commodityCode to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateCommodityCodeById(commodityCodeId commodityCodeId: Int32, completion: ((data: CommodityCode?, error: ErrorType?) -> Void)) {
        getDuplicateCommodityCodeByIdWithRequestBuilder(commodityCodeId: commodityCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a commodityCode by id
     - GET /beta/commodityCode/duplicate/{commodityCodeId}
     - Returns a duplicated commodityCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "code" : "code",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "meaning" : "meaning",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter commodityCodeId: (path) Id of the commodityCode to be duplicated. 

     - returns: RequestBuilder<CommodityCode> 
     */
    public class func getDuplicateCommodityCodeByIdWithRequestBuilder(commodityCodeId commodityCodeId: Int32) -> RequestBuilder<CommodityCode> {
        var path = "/beta/commodityCode/duplicate/{commodityCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{commodityCodeId}", withString: "\(commodityCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommodityCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
