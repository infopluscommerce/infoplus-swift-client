//
// ParcelAccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ParcelAccountAPI: APIBase {
    /**
     
     Search parcelAccounts by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelAccountByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ParcelAccount]?, error: ErrorType?) -> Void)) {
        getParcelAccountByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search parcelAccounts by filter
     
     - GET /beta/parcelAccount/search
     - Returns the list of parcelAccounts that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "carrier" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "manifestPartnerId" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "aeiou",
  "name" : "aeiou",
  "client" : 123,
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ParcelAccount]> 
     */
    public class func getParcelAccountByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ParcelAccount]> {
        let path = "/beta/parcelAccount/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ParcelAccount]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a parcelAccount by id
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelAccountById(parcelAccountId parcelAccountId: Int, completion: ((data: ParcelAccount?, error: ErrorType?) -> Void)) {
        getParcelAccountByIdWithRequestBuilder(parcelAccountId: parcelAccountId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a parcelAccount by id
     
     - GET /beta/parcelAccount/{parcelAccountId}
     - Returns the parcelAccount identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "carrier" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "manifestPartnerId" : "aeiou",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "aeiou",
  "name" : "aeiou",
  "client" : 123,
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to be returned. 

     - returns: RequestBuilder<ParcelAccount> 
     */
    public class func getParcelAccountByIdWithRequestBuilder(parcelAccountId parcelAccountId: Int) -> RequestBuilder<ParcelAccount> {
        var path = "/beta/parcelAccount/{parcelAccountId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ParcelAccount>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a parcelAccount custom fields
     
     - parameter body: (body) ParcelAccount to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateParcelAccountCustomFields(body body: ParcelAccount, completion: ((error: ErrorType?) -> Void)) {
        updateParcelAccountCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a parcelAccount custom fields
     
     - PUT /beta/parcelAccount/customFields
     - Updates an existing parcelAccount custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ParcelAccount to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateParcelAccountCustomFieldsWithRequestBuilder(body body: ParcelAccount) -> RequestBuilder<Void> {
        let path = "/beta/parcelAccount/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
