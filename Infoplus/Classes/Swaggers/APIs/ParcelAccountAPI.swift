//
// ParcelAccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ParcelAccountAPI: APIBase {
    /**
     Add new audit for a parcelAccount
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to add an audit to 
     - parameter parcelAccountAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelAccountAudit(parcelAccountId parcelAccountId: Int32, parcelAccountAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addParcelAccountAuditWithRequestBuilder(parcelAccountId: parcelAccountId, parcelAccountAudit: parcelAccountAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a parcelAccount
     - PUT /beta/parcelAccount/{parcelAccountId}/audit/{parcelAccountAudit}
     - Adds an audit to an existing parcelAccount.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to add an audit to 
     - parameter parcelAccountAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelAccountAuditWithRequestBuilder(parcelAccountId parcelAccountId: Int32, parcelAccountAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/audit/{parcelAccountAudit}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountAudit}", withString: "\(parcelAccountAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a parcelAccount
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelAccountFile(parcelAccountId parcelAccountId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addParcelAccountFileWithRequestBuilder(parcelAccountId: parcelAccountId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a parcelAccount
     - POST /beta/parcelAccount/{parcelAccountId}/file/{fileName}
     - Adds a file to an existing parcelAccount.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelAccountFileWithRequestBuilder(parcelAccountId parcelAccountId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a parcelAccount by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter parcelAccountId: (path) Id of the parcelAccount to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelAccountFileByURL(body body: RecordFile, parcelAccountId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addParcelAccountFileByURLWithRequestBuilder(body: body, parcelAccountId: parcelAccountId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a parcelAccount by URL.
     - POST /beta/parcelAccount/{parcelAccountId}/file
     - Adds a file to an existing parcelAccount by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter parcelAccountId: (path) Id of the parcelAccount to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelAccountFileByURLWithRequestBuilder(body body: RecordFile, parcelAccountId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/file"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a parcelAccount.
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to add a tag to 
     - parameter parcelAccountTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelAccountTag(parcelAccountId parcelAccountId: Int32, parcelAccountTag: String, completion: ((error: ErrorType?) -> Void)) {
        addParcelAccountTagWithRequestBuilder(parcelAccountId: parcelAccountId, parcelAccountTag: parcelAccountTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a parcelAccount.
     - PUT /beta/parcelAccount/{parcelAccountId}/tag/{parcelAccountTag}
     - Adds a tag to an existing parcelAccount.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to add a tag to 
     - parameter parcelAccountTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelAccountTagWithRequestBuilder(parcelAccountId parcelAccountId: Int32, parcelAccountTag: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/tag/{parcelAccountTag}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountTag}", withString: "\(parcelAccountTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a parcelAccount.
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteParcelAccountFile(parcelAccountId parcelAccountId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteParcelAccountFileWithRequestBuilder(parcelAccountId: parcelAccountId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a parcelAccount.
     - DELETE /beta/parcelAccount/{parcelAccountId}/file/{fileId}
     - Deletes an existing parcelAccount file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteParcelAccountFileWithRequestBuilder(parcelAccountId parcelAccountId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a parcelAccount.
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to remove tag from 
     - parameter parcelAccountTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteParcelAccountTag(parcelAccountId parcelAccountId: Int32, parcelAccountTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteParcelAccountTagWithRequestBuilder(parcelAccountId: parcelAccountId, parcelAccountTag: parcelAccountTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a parcelAccount.
     - DELETE /beta/parcelAccount/{parcelAccountId}/tag/{parcelAccountTag}
     - Deletes an existing parcelAccount tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to remove tag from 
     - parameter parcelAccountTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteParcelAccountTagWithRequestBuilder(parcelAccountId parcelAccountId: Int32, parcelAccountTag: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/tag/{parcelAccountTag}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountTag}", withString: "\(parcelAccountTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a parcelAccount by id
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateParcelAccountById(parcelAccountId parcelAccountId: Int32, completion: ((data: ParcelAccount?, error: ErrorType?) -> Void)) {
        getDuplicateParcelAccountByIdWithRequestBuilder(parcelAccountId: parcelAccountId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a parcelAccount by id
     - GET /beta/parcelAccount/duplicate/{parcelAccountId}
     - Returns a duplicated parcelAccount identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "manifestPartnerId" : "manifestPartnerId",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "name" : "name",
  "client" : 6,
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to be duplicated. 

     - returns: RequestBuilder<ParcelAccount> 
     */
    public class func getDuplicateParcelAccountByIdWithRequestBuilder(parcelAccountId parcelAccountId: Int32) -> RequestBuilder<ParcelAccount> {
        var path = "/beta/parcelAccount/duplicate/{parcelAccountId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ParcelAccount>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search parcelAccounts by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelAccountByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ParcelAccount]?, error: ErrorType?) -> Void)) {
        getParcelAccountByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search parcelAccounts by filter
     - GET /beta/parcelAccount/search
     - Returns the list of parcelAccounts that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "manifestPartnerId" : "manifestPartnerId",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "name" : "name",
  "client" : 6,
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "manifestPartnerId" : "manifestPartnerId",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "name" : "name",
  "client" : 6,
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ParcelAccount]> 
     */
    public class func getParcelAccountByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ParcelAccount]> {
        let path = "/beta/parcelAccount/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ParcelAccount]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a parcelAccount by id
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelAccountById(parcelAccountId parcelAccountId: Int32, completion: ((data: ParcelAccount?, error: ErrorType?) -> Void)) {
        getParcelAccountByIdWithRequestBuilder(parcelAccountId: parcelAccountId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a parcelAccount by id
     - GET /beta/parcelAccount/{parcelAccountId}
     - Returns the parcelAccount identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "manifestPartnerId" : "manifestPartnerId",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "name" : "name",
  "client" : 6,
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to be returned. 

     - returns: RequestBuilder<ParcelAccount> 
     */
    public class func getParcelAccountByIdWithRequestBuilder(parcelAccountId parcelAccountId: Int32) -> RequestBuilder<ParcelAccount> {
        var path = "/beta/parcelAccount/{parcelAccountId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ParcelAccount>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a parcelAccount.
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelAccountFiles(parcelAccountId parcelAccountId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getParcelAccountFilesWithRequestBuilder(parcelAccountId: parcelAccountId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a parcelAccount.
     - GET /beta/parcelAccount/{parcelAccountId}/file
     - Get all existing parcelAccount files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getParcelAccountFilesWithRequestBuilder(parcelAccountId parcelAccountId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/file"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a parcelAccount.
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelAccountTags(parcelAccountId parcelAccountId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getParcelAccountTagsWithRequestBuilder(parcelAccountId: parcelAccountId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a parcelAccount.
     - GET /beta/parcelAccount/{parcelAccountId}/tag
     - Get all existing parcelAccount tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelAccountId: (path) Id of the parcelAccount to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getParcelAccountTagsWithRequestBuilder(parcelAccountId parcelAccountId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/parcelAccount/{parcelAccountId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{parcelAccountId}", withString: "\(parcelAccountId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a parcelAccount custom fields
     
     - parameter body: (body) ParcelAccount to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateParcelAccountCustomFields(body body: ParcelAccount, completion: ((error: ErrorType?) -> Void)) {
        updateParcelAccountCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a parcelAccount custom fields
     - PUT /beta/parcelAccount/customFields
     - Updates an existing parcelAccount custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ParcelAccount to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateParcelAccountCustomFieldsWithRequestBuilder(body body: ParcelAccount) -> RequestBuilder<Void> {
        let path = "/beta/parcelAccount/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
