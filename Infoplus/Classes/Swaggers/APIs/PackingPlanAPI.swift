//
// PackingPlanAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PackingPlanAPI: APIBase {
    /**
     Create a packingPlan
     
     - parameter body: (body) PackingPlan to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlan(body body: PackingPlan, completion: ((data: PackingPlan?, error: ErrorType?) -> Void)) {
        addPackingPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a packingPlan
     - POST /v3.0/packingPlan
     - Inserts a new packingPlan using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter body: (body) PackingPlan to be inserted. 

     - returns: RequestBuilder<PackingPlan> 
     */
    public class func addPackingPlanWithRequestBuilder(body body: PackingPlan) -> RequestBuilder<PackingPlan> {
        let path = "/v3.0/packingPlan"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a packingPlan
     
     - parameter packingPlanId: (path) Id of the packingPlan to add an audit to 
     - parameter packingPlanAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanAudit(packingPlanId packingPlanId: Int32, packingPlanAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanAuditWithRequestBuilder(packingPlanId: packingPlanId, packingPlanAudit: packingPlanAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a packingPlan
     - PUT /v3.0/packingPlan/{packingPlanId}/audit/{packingPlanAudit}
     - Adds an audit to an existing packingPlan.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to add an audit to 
     - parameter packingPlanAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanAuditWithRequestBuilder(packingPlanId packingPlanId: Int32, packingPlanAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/audit/{packingPlanAudit}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingPlanAudit}", withString: "\(packingPlanAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a packingPlan
     
     - parameter packingPlanId: (path) Id of the packingPlan to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanFile(packingPlanId packingPlanId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanFileWithRequestBuilder(packingPlanId: packingPlanId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a packingPlan
     - POST /v3.0/packingPlan/{packingPlanId}/file/{fileName}
     - Adds a file to an existing packingPlan.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanFileWithRequestBuilder(packingPlanId packingPlanId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a packingPlan by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter packingPlanId: (path) Id of the packingPlan to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanFileByURL(body body: RecordFile, packingPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanFileByURLWithRequestBuilder(body: body, packingPlanId: packingPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a packingPlan by URL.
     - POST /v3.0/packingPlan/{packingPlanId}/file
     - Adds a file to an existing packingPlan by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter packingPlanId: (path) Id of the packingPlan to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanFileByURLWithRequestBuilder(body body: RecordFile, packingPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/file"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a packingPlan.
     
     - parameter packingPlanId: (path) Id of the packingPlan to add a tag to 
     - parameter packingPlanTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanTag(packingPlanId packingPlanId: Int32, packingPlanTag: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanTagWithRequestBuilder(packingPlanId: packingPlanId, packingPlanTag: packingPlanTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a packingPlan.
     - PUT /v3.0/packingPlan/{packingPlanId}/tag/{packingPlanTag}
     - Adds a tag to an existing packingPlan.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to add a tag to 
     - parameter packingPlanTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanTagWithRequestBuilder(packingPlanId packingPlanId: Int32, packingPlanTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/tag/{packingPlanTag}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingPlanTag}", withString: "\(packingPlanTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a packingPlan
     
     - parameter packingPlanId: (path) Id of the packingPlan to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingPlan(packingPlanId packingPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePackingPlanWithRequestBuilder(packingPlanId: packingPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a packingPlan
     - DELETE /v3.0/packingPlan/{packingPlanId}
     - Deletes the packingPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingPlanWithRequestBuilder(packingPlanId packingPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a packingPlan.
     
     - parameter packingPlanId: (path) Id of the packingPlan to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingPlanFile(packingPlanId packingPlanId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePackingPlanFileWithRequestBuilder(packingPlanId: packingPlanId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a packingPlan.
     - DELETE /v3.0/packingPlan/{packingPlanId}/file/{fileId}
     - Deletes an existing packingPlan file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingPlanFileWithRequestBuilder(packingPlanId packingPlanId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a packingPlan.
     
     - parameter packingPlanId: (path) Id of the packingPlan to remove tag from 
     - parameter packingPlanTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingPlanTag(packingPlanId packingPlanId: Int32, packingPlanTag: String, completion: ((error: ErrorType?) -> Void)) {
        deletePackingPlanTagWithRequestBuilder(packingPlanId: packingPlanId, packingPlanTag: packingPlanTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a packingPlan.
     - DELETE /v3.0/packingPlan/{packingPlanId}/tag/{packingPlanTag}
     - Deletes an existing packingPlan tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to remove tag from 
     - parameter packingPlanTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingPlanTagWithRequestBuilder(packingPlanId packingPlanId: Int32, packingPlanTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/tag/{packingPlanTag}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingPlanTag}", withString: "\(packingPlanTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a packingPlan by id
     
     - parameter packingPlanId: (path) Id of the packingPlan to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicatePackingPlanById(packingPlanId packingPlanId: Int32, completion: ((data: PackingPlan?, error: ErrorType?) -> Void)) {
        getDuplicatePackingPlanByIdWithRequestBuilder(packingPlanId: packingPlanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a packingPlan by id
     - GET /v3.0/packingPlan/duplicate/{packingPlanId}
     - Returns a duplicated packingPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter packingPlanId: (path) Id of the packingPlan to be duplicated. 

     - returns: RequestBuilder<PackingPlan> 
     */
    public class func getDuplicatePackingPlanByIdWithRequestBuilder(packingPlanId packingPlanId: Int32) -> RequestBuilder<PackingPlan> {
        var path = "/v3.0/packingPlan/duplicate/{packingPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search packingPlans by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [PackingPlan]?, error: ErrorType?) -> Void)) {
        getPackingPlanByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search packingPlans by filter
     - GET /v3.0/packingPlan/search
     - Returns the list of packingPlans that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}, {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[PackingPlan]> 
     */
    public class func getPackingPlanByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[PackingPlan]> {
        let path = "/v3.0/packingPlan/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PackingPlan]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a packingPlan by id
     
     - parameter packingPlanId: (path) Id of the packingPlan to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanById(packingPlanId packingPlanId: Int32, completion: ((data: PackingPlan?, error: ErrorType?) -> Void)) {
        getPackingPlanByIdWithRequestBuilder(packingPlanId: packingPlanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a packingPlan by id
     - GET /v3.0/packingPlan/{packingPlanId}
     - Returns the packingPlan identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "fulfillmentProcessId" : 6,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "status"
}}]
     
     - parameter packingPlanId: (path) Id of the packingPlan to be returned. 

     - returns: RequestBuilder<PackingPlan> 
     */
    public class func getPackingPlanByIdWithRequestBuilder(packingPlanId packingPlanId: Int32) -> RequestBuilder<PackingPlan> {
        var path = "/v3.0/packingPlan/{packingPlanId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingPlan>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a packingPlan.
     
     - parameter packingPlanId: (path) Id of the packingPlan to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanFiles(packingPlanId packingPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPackingPlanFilesWithRequestBuilder(packingPlanId: packingPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a packingPlan.
     - GET /v3.0/packingPlan/{packingPlanId}/file
     - Get all existing packingPlan files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPackingPlanFilesWithRequestBuilder(packingPlanId packingPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/file"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a packingPlan.
     
     - parameter packingPlanId: (path) Id of the packingPlan to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanTags(packingPlanId packingPlanId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPackingPlanTagsWithRequestBuilder(packingPlanId: packingPlanId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a packingPlan.
     - GET /v3.0/packingPlan/{packingPlanId}/tag
     - Get all existing packingPlan tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanId: (path) Id of the packingPlan to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPackingPlanTagsWithRequestBuilder(packingPlanId packingPlanId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/packingPlan/{packingPlanId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanId}", withString: "\(packingPlanId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a packingPlan
     
     - parameter body: (body) PackingPlan to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePackingPlan(body body: PackingPlan, completion: ((error: ErrorType?) -> Void)) {
        updatePackingPlanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a packingPlan
     - PUT /v3.0/packingPlan
     - Updates an existing packingPlan using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) PackingPlan to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updatePackingPlanWithRequestBuilder(body body: PackingPlan) -> RequestBuilder<Void> {
        let path = "/v3.0/packingPlan"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a packingPlan custom fields
     
     - parameter body: (body) PackingPlan to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePackingPlanCustomFields(body body: PackingPlan, completion: ((error: ErrorType?) -> Void)) {
        updatePackingPlanCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a packingPlan custom fields
     - PUT /v3.0/packingPlan/customFields
     - Updates an existing packingPlan custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) PackingPlan to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updatePackingPlanCustomFieldsWithRequestBuilder(body body: PackingPlan) -> RequestBuilder<Void> {
        let path = "/v3.0/packingPlan/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
