//
// ItemCategoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemCategoryAPI: APIBase {
    /**
     Create an itemCategory
     
     - parameter body: (body) ItemCategory to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemCategory(body body: ItemCategory, completion: ((data: ItemCategory?, error: ErrorType?) -> Void)) {
        addItemCategoryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an itemCategory
     - POST /beta/itemCategory
     - Inserts a new itemCategory using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter body: (body) ItemCategory to be inserted. 

     - returns: RequestBuilder<ItemCategory> 
     */
    public class func addItemCategoryWithRequestBuilder(body body: ItemCategory) -> RequestBuilder<ItemCategory> {
        let path = "/beta/itemCategory"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemCategory>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an itemCategory
     
     - parameter itemCategoryId: (path) Id of the itemCategory to add an audit to 
     - parameter itemCategoryAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemCategoryAudit(itemCategoryId itemCategoryId: Int32, itemCategoryAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemCategoryAuditWithRequestBuilder(itemCategoryId: itemCategoryId, itemCategoryAudit: itemCategoryAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an itemCategory
     - PUT /beta/itemCategory/{itemCategoryId}/audit/{itemCategoryAudit}
     - Adds an audit to an existing itemCategory.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemCategoryId: (path) Id of the itemCategory to add an audit to 
     - parameter itemCategoryAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemCategoryAuditWithRequestBuilder(itemCategoryId itemCategoryId: Int32, itemCategoryAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemCategory/{itemCategoryId}/audit/{itemCategoryAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryAudit}", withString: "\(itemCategoryAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an itemCategory.
     
     - parameter itemCategoryId: (path) Id of the itemCategory to add a tag to 
     - parameter itemCategoryTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemCategoryTag(itemCategoryId itemCategoryId: Int32, itemCategoryTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemCategoryTagWithRequestBuilder(itemCategoryId: itemCategoryId, itemCategoryTag: itemCategoryTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an itemCategory.
     - PUT /beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}
     - Adds a tag to an existing itemCategory.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemCategoryId: (path) Id of the itemCategory to add a tag to 
     - parameter itemCategoryTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemCategoryTagWithRequestBuilder(itemCategoryId itemCategoryId: Int32, itemCategoryTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryTag}", withString: "\(itemCategoryTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an itemCategory
     
     - parameter itemCategoryId: (path) Id of the itemCategory to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemCategory(itemCategoryId itemCategoryId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemCategoryWithRequestBuilder(itemCategoryId: itemCategoryId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an itemCategory
     - DELETE /beta/itemCategory/{itemCategoryId}
     - Deletes the itemCategory identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemCategoryId: (path) Id of the itemCategory to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemCategoryWithRequestBuilder(itemCategoryId itemCategoryId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemCategory/{itemCategoryId}"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an itemCategory.
     
     - parameter itemCategoryId: (path) Id of the itemCategory to remove tag from 
     - parameter itemCategoryTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemCategoryTag(itemCategoryId itemCategoryId: Int32, itemCategoryTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemCategoryTagWithRequestBuilder(itemCategoryId: itemCategoryId, itemCategoryTag: itemCategoryTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an itemCategory.
     - DELETE /beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}
     - Deletes an existing itemCategory tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemCategoryId: (path) Id of the itemCategory to remove tag from 
     - parameter itemCategoryTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemCategoryTagWithRequestBuilder(itemCategoryId itemCategoryId: Int32, itemCategoryTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemCategory/{itemCategoryId}/tag/{itemCategoryTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryTag}", withString: "\(itemCategoryTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an itemCategory by id
     
     - parameter itemCategoryId: (path) Id of the itemCategory to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemCategoryById(itemCategoryId itemCategoryId: Int32, completion: ((data: ItemCategory?, error: ErrorType?) -> Void)) {
        getDuplicateItemCategoryByIdWithRequestBuilder(itemCategoryId: itemCategoryId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an itemCategory by id
     - GET /beta/itemCategory/duplicate/{itemCategoryId}
     - Returns a duplicated itemCategory identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter itemCategoryId: (path) Id of the itemCategory to be duplicated. 

     - returns: RequestBuilder<ItemCategory> 
     */
    public class func getDuplicateItemCategoryByIdWithRequestBuilder(itemCategoryId itemCategoryId: Int32) -> RequestBuilder<ItemCategory> {
        var path = "/beta/itemCategory/duplicate/{itemCategoryId}"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemCategory>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search itemCategorys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemCategoryByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ItemCategory]?, error: ErrorType?) -> Void)) {
        getItemCategoryByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search itemCategorys by filter
     - GET /beta/itemCategory/search
     - Returns the list of itemCategorys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}, {
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemCategory]> 
     */
    public class func getItemCategoryByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ItemCategory]> {
        let path = "/beta/itemCategory/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ItemCategory]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an itemCategory by id
     
     - parameter itemCategoryId: (path) Id of the itemCategory to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemCategoryById(itemCategoryId itemCategoryId: Int32, completion: ((data: ItemCategory?, error: ErrorType?) -> Void)) {
        getItemCategoryByIdWithRequestBuilder(itemCategoryId: itemCategoryId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an itemCategory by id
     - GET /beta/itemCategory/{itemCategoryId}
     - Returns the itemCategory identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "id" : "id",
  "lobId" : 0
}}]
     
     - parameter itemCategoryId: (path) Id of the itemCategory to be returned. 

     - returns: RequestBuilder<ItemCategory> 
     */
    public class func getItemCategoryByIdWithRequestBuilder(itemCategoryId itemCategoryId: Int32) -> RequestBuilder<ItemCategory> {
        var path = "/beta/itemCategory/{itemCategoryId}"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemCategory>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an itemCategory.
     
     - parameter itemCategoryId: (path) Id of the itemCategory to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemCategoryTags(itemCategoryId itemCategoryId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemCategoryTagsWithRequestBuilder(itemCategoryId: itemCategoryId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an itemCategory.
     - GET /beta/itemCategory/{itemCategoryId}/tag
     - Get all existing itemCategory tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemCategoryId: (path) Id of the itemCategory to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemCategoryTagsWithRequestBuilder(itemCategoryId itemCategoryId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemCategory/{itemCategoryId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemCategoryId}", withString: "\(itemCategoryId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an itemCategory
     
     - parameter body: (body) ItemCategory to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemCategory(body body: ItemCategory, completion: ((error: ErrorType?) -> Void)) {
        updateItemCategoryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an itemCategory
     - PUT /beta/itemCategory
     - Updates an existing itemCategory using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemCategory to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemCategoryWithRequestBuilder(body body: ItemCategory) -> RequestBuilder<Void> {
        let path = "/beta/itemCategory"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
