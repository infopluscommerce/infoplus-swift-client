//
// PackingDetailAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PackingDetailAPI: APIBase {
    /**
     Add new audit for a packingDetail
     
     - parameter packingDetailId: (path) Id of the packingDetail to add an audit to 
     - parameter packingDetailAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingDetailAudit(packingDetailId packingDetailId: Int32, packingDetailAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingDetailAuditWithRequestBuilder(packingDetailId: packingDetailId, packingDetailAudit: packingDetailAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a packingDetail
     - PUT /beta/packingDetail/{packingDetailId}/audit/{packingDetailAudit}
     - Adds an audit to an existing packingDetail.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to add an audit to 
     - parameter packingDetailAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingDetailAuditWithRequestBuilder(packingDetailId packingDetailId: Int32, packingDetailAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/audit/{packingDetailAudit}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingDetailAudit}", withString: "\(packingDetailAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a packingDetail
     
     - parameter packingDetailId: (path) Id of the packingDetail to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingDetailFile(packingDetailId packingDetailId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingDetailFileWithRequestBuilder(packingDetailId: packingDetailId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a packingDetail
     - POST /beta/packingDetail/{packingDetailId}/file/{fileName}
     - Adds a file to an existing packingDetail.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingDetailFileWithRequestBuilder(packingDetailId packingDetailId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a packingDetail by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter packingDetailId: (path) Id of the packingDetail to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingDetailFileByURL(body body: RecordFile, packingDetailId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addPackingDetailFileByURLWithRequestBuilder(body: body, packingDetailId: packingDetailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a packingDetail by URL.
     - POST /beta/packingDetail/{packingDetailId}/file
     - Adds a file to an existing packingDetail by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter packingDetailId: (path) Id of the packingDetail to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingDetailFileByURLWithRequestBuilder(body body: RecordFile, packingDetailId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/file"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a packingDetail.
     
     - parameter packingDetailId: (path) Id of the packingDetail to add a tag to 
     - parameter packingDetailTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingDetailTag(packingDetailId packingDetailId: Int32, packingDetailTag: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingDetailTagWithRequestBuilder(packingDetailId: packingDetailId, packingDetailTag: packingDetailTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a packingDetail.
     - PUT /beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}
     - Adds a tag to an existing packingDetail.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to add a tag to 
     - parameter packingDetailTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingDetailTagWithRequestBuilder(packingDetailId packingDetailId: Int32, packingDetailTag: String) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingDetailTag}", withString: "\(packingDetailTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a packingDetail.
     
     - parameter packingDetailId: (path) Id of the packingDetail to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingDetailFile(packingDetailId packingDetailId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePackingDetailFileWithRequestBuilder(packingDetailId: packingDetailId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a packingDetail.
     - DELETE /beta/packingDetail/{packingDetailId}/file/{fileId}
     - Deletes an existing packingDetail file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingDetailFileWithRequestBuilder(packingDetailId packingDetailId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a packingDetail.
     
     - parameter packingDetailId: (path) Id of the packingDetail to remove tag from 
     - parameter packingDetailTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingDetailTag(packingDetailId packingDetailId: Int32, packingDetailTag: String, completion: ((error: ErrorType?) -> Void)) {
        deletePackingDetailTagWithRequestBuilder(packingDetailId: packingDetailId, packingDetailTag: packingDetailTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a packingDetail.
     - DELETE /beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}
     - Deletes an existing packingDetail tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to remove tag from 
     - parameter packingDetailTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingDetailTagWithRequestBuilder(packingDetailId packingDetailId: Int32, packingDetailTag: String) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/tag/{packingDetailTag}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingDetailTag}", withString: "\(packingDetailTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a packingDetail by id
     
     - parameter packingDetailId: (path) Id of the packingDetail to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicatePackingDetailById(packingDetailId packingDetailId: Int32, completion: ((data: PackingDetail?, error: ErrorType?) -> Void)) {
        getDuplicatePackingDetailByIdWithRequestBuilder(packingDetailId: packingDetailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a packingDetail by id
     - GET /beta/packingDetail/duplicate/{packingDetailId}
     - Returns a duplicated packingDetail identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "quantity" : 3,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 1.46581298050294517310021547018550336360931396484375,
  "lineItemId" : 9,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 2,
  "palletId" : 5,
  "id" : 0,
  "masterCartonId" : 5,
  "sku" : "sku",
  "itemReceiptId" : 7,
  "palletGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter packingDetailId: (path) Id of the packingDetail to be duplicated. 

     - returns: RequestBuilder<PackingDetail> 
     */
    public class func getDuplicatePackingDetailByIdWithRequestBuilder(packingDetailId packingDetailId: Int32) -> RequestBuilder<PackingDetail> {
        var path = "/beta/packingDetail/duplicate/{packingDetailId}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingDetail>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search packingDetails by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingDetailByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [PackingDetail]?, error: ErrorType?) -> Void)) {
        getPackingDetailByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search packingDetails by filter
     - GET /beta/packingDetail/search
     - Returns the list of packingDetails that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "cartonGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "quantity" : 3,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 1.46581298050294517310021547018550336360931396484375,
  "lineItemId" : 9,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 2,
  "palletId" : 5,
  "id" : 0,
  "masterCartonId" : 5,
  "sku" : "sku",
  "itemReceiptId" : 7,
  "palletGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}, {
  "cartonGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "quantity" : 3,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 1.46581298050294517310021547018550336360931396484375,
  "lineItemId" : 9,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 2,
  "palletId" : 5,
  "id" : 0,
  "masterCartonId" : 5,
  "sku" : "sku",
  "itemReceiptId" : 7,
  "palletGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[PackingDetail]> 
     */
    public class func getPackingDetailByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[PackingDetail]> {
        let path = "/beta/packingDetail/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PackingDetail]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a packingDetail by id
     
     - parameter packingDetailId: (path) Id of the packingDetail to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingDetailById(packingDetailId packingDetailId: Int32, completion: ((data: PackingDetail?, error: ErrorType?) -> Void)) {
        getPackingDetailByIdWithRequestBuilder(packingDetailId: packingDetailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a packingDetail by id
     - GET /beta/packingDetail/{packingDetailId}
     - Returns the packingDetail identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "quantity" : 3,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 1.46581298050294517310021547018550336360931396484375,
  "lineItemId" : 9,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 2,
  "palletId" : 5,
  "id" : 0,
  "masterCartonId" : 5,
  "sku" : "sku",
  "itemReceiptId" : 7,
  "palletGS1128Label" : [ {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  }, {
    "orderNo" : 1.024645700144157789424070870154537260532379150390625,
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "lineItemId" : 1,
    "recordType" : "recordType",
    "customFields" : {
      "key" : "{}"
    },
    "gs1128TemplateId" : 4,
    "cartonId" : 7,
    "masterCartonLoadId" : 6,
    "noOfCopies" : 7,
    "sscc" : "sscc",
    "lineItemUnitNo" : 4,
    "id" : 2,
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "lobId" : 1,
    "palletLoadId" : 1
  } ],
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter packingDetailId: (path) Id of the packingDetail to be returned. 

     - returns: RequestBuilder<PackingDetail> 
     */
    public class func getPackingDetailByIdWithRequestBuilder(packingDetailId packingDetailId: Int32) -> RequestBuilder<PackingDetail> {
        var path = "/beta/packingDetail/{packingDetailId}"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingDetail>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a packingDetail.
     
     - parameter packingDetailId: (path) Id of the packingDetail to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingDetailFiles(packingDetailId packingDetailId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPackingDetailFilesWithRequestBuilder(packingDetailId: packingDetailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a packingDetail.
     - GET /beta/packingDetail/{packingDetailId}/file
     - Get all existing packingDetail files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPackingDetailFilesWithRequestBuilder(packingDetailId packingDetailId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/file"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a packingDetail.
     
     - parameter packingDetailId: (path) Id of the packingDetail to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingDetailTags(packingDetailId packingDetailId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPackingDetailTagsWithRequestBuilder(packingDetailId: packingDetailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a packingDetail.
     - GET /beta/packingDetail/{packingDetailId}/tag
     - Get all existing packingDetail tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingDetailId: (path) Id of the packingDetail to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPackingDetailTagsWithRequestBuilder(packingDetailId packingDetailId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingDetail/{packingDetailId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{packingDetailId}", withString: "\(packingDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a packingDetail custom fields
     
     - parameter body: (body) PackingDetail to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePackingDetailCustomFields(body body: PackingDetail, completion: ((error: ErrorType?) -> Void)) {
        updatePackingDetailCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a packingDetail custom fields
     - PUT /beta/packingDetail/customFields
     - Updates an existing packingDetail custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) PackingDetail to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updatePackingDetailCustomFieldsWithRequestBuilder(body body: PackingDetail) -> RequestBuilder<Void> {
        let path = "/beta/packingDetail/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
