//
// ItemReceiptAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemReceiptAPI: APIBase {
    /**
     
     Add new audit for an itemReceipt
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to add an audit to 
     - parameter itemReceiptAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemReceiptAudit(itemReceiptId itemReceiptId: Int, itemReceiptAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemReceiptAuditWithRequestBuilder(itemReceiptId: itemReceiptId, itemReceiptAudit: itemReceiptAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new audit for an itemReceipt
     
     - PUT /beta/itemReceipt/{itemReceiptId}/audit/{itemReceiptAudit}
     - Adds an audit to an existing itemReceipt.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to add an audit to 
     - parameter itemReceiptAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemReceiptAuditWithRequestBuilder(itemReceiptId itemReceiptId: Int, itemReceiptAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemReceipt/{itemReceiptId}/audit/{itemReceiptAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptId}", withString: "\(itemReceiptId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptAudit}", withString: "\(itemReceiptAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new tags for an itemReceipt.
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to add a tag to 
     - parameter itemReceiptTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemReceiptTag(itemReceiptId itemReceiptId: Int, itemReceiptTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemReceiptTagWithRequestBuilder(itemReceiptId: itemReceiptId, itemReceiptTag: itemReceiptTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new tags for an itemReceipt.
     
     - PUT /beta/itemReceipt/{itemReceiptId}/tag/{itemReceiptTag}
     - Adds a tag to an existing itemReceipt.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to add a tag to 
     - parameter itemReceiptTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemReceiptTagWithRequestBuilder(itemReceiptId itemReceiptId: Int, itemReceiptTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemReceipt/{itemReceiptId}/tag/{itemReceiptTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptId}", withString: "\(itemReceiptId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptTag}", withString: "\(itemReceiptTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a tag for an itemReceipt.
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to remove tag from 
     - parameter itemReceiptTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemReceiptTag(itemReceiptId itemReceiptId: Int, itemReceiptTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemReceiptTagWithRequestBuilder(itemReceiptId: itemReceiptId, itemReceiptTag: itemReceiptTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a tag for an itemReceipt.
     
     - DELETE /beta/itemReceipt/{itemReceiptId}/tag/{itemReceiptTag}
     - Deletes an existing itemReceipt tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to remove tag from 
     - parameter itemReceiptTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemReceiptTagWithRequestBuilder(itemReceiptId itemReceiptId: Int, itemReceiptTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemReceipt/{itemReceiptId}/tag/{itemReceiptTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptId}", withString: "\(itemReceiptId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptTag}", withString: "\(itemReceiptTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated an itemReceipt by id
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemReceiptById(itemReceiptId itemReceiptId: Int, completion: ((data: ItemReceipt?, error: ErrorType?) -> Void)) {
        getDuplicateItemReceiptByIdWithRequestBuilder(itemReceiptId: itemReceiptId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an itemReceipt by id
     
     - GET /beta/itemReceipt/duplicate/{itemReceiptId}
     - Returns a duplicated itemReceipt identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sampleTo" : "aeiou",
  "budgetCode" : "aeiou",
  "interimFact" : 1.3579000000000001069366817318950779736042022705078125,
  "legacyPoNo" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "oddQuantity" : 123,
  "orderQuantity" : 123,
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "revDate" : "aeiou",
  "unitsPerCase" : 123,
  "lineNo" : 123,
  "unitCode" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "pricingPer" : "aeiou",
  "receivedDate" : "2000-01-23T04:56:07.000+0000",
  "mlCost" : 1.3579000000000001069366817318950779736042022705078125,
  "lobId" : 123,
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "chargeFreight" : "aeiou",
  "accountingCode" : "aeiou",
  "taxExempt" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "artBack" : "aeiou",
  "lastAct" : "2000-01-23T04:56:07.000+0000",
  "capitalize" : "aeiou",
  "warehouseId" : 123,
  "maxUnders" : 123,
  "interimQuantity" : 123,
  "receivedQuantity" : 123,
  "receiptNo" : 123,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+0000",
  "poNoId" : 123,
  "dockDate" : "2000-01-23T04:56:07.000+0000",
  "asnLine" : 123,
  "orderDate" : "2000-01-23T04:56:07.000+0000",
  "factCost" : 1.3579000000000001069366817318950779736042022705078125,
  "endQuantity" : 123,
  "maxFreight" : 1.3579000000000001069366817318950779736042022705078125,
  "norcs" : "aeiou",
  "mlVendor" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "aeiou",
  "endFact" : 1.3579000000000001069366817318950779736042022705078125,
  "enteredBy" : "aeiou",
  "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
  "distDate" : "2000-01-23T04:56:07.000+0000",
  "endVal" : 1.3579000000000001069366817318950779736042022705078125,
  "wrapCode" : "aeiou",
  "sfpComplete" : "aeiou",
  "bsVendor" : 123,
  "receivedBy" : "aeiou",
  "unitsPerWrap" : 123,
  "cost" : 1.3579000000000001069366817318950779736042022705078125,
  "interimVal" : 1.3579000000000001069366817318950779736042022705078125,
  "sell" : 1.3579000000000001069366817318950779736042022705078125,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "maxOvers" : 123,
  "productIdTag" : "aeiou",
  "impressions" : 123,
  "sample" : 123,
  "fromProd" : 123,
  "paidFull" : "aeiou",
  "prodLot" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "receivedSfp" : 123,
  "accrual" : "aeiou",
  "freightCost" : 1.3579000000000001069366817318950779736042022705078125,
  "maxOther" : 1.3579000000000001069366817318950779736042022705078125,
  "freezeAction" : "aeiou"
}}]
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to be duplicated. 

     - returns: RequestBuilder<ItemReceipt> 
     */
    public class func getDuplicateItemReceiptByIdWithRequestBuilder(itemReceiptId itemReceiptId: Int) -> RequestBuilder<ItemReceipt> {
        var path = "/beta/itemReceipt/duplicate/{itemReceiptId}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptId}", withString: "\(itemReceiptId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemReceipt>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search itemReceipts by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemReceiptByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ItemReceipt]?, error: ErrorType?) -> Void)) {
        getItemReceiptByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search itemReceipts by filter
     
     - GET /beta/itemReceipt/search
     - Returns the list of itemReceipts that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "sampleTo" : "aeiou",
  "budgetCode" : "aeiou",
  "interimFact" : 1.3579000000000001069366817318950779736042022705078125,
  "legacyPoNo" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "oddQuantity" : 123,
  "orderQuantity" : 123,
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "revDate" : "aeiou",
  "unitsPerCase" : 123,
  "lineNo" : 123,
  "unitCode" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "pricingPer" : "aeiou",
  "receivedDate" : "2000-01-23T04:56:07.000+0000",
  "mlCost" : 1.3579000000000001069366817318950779736042022705078125,
  "lobId" : 123,
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "chargeFreight" : "aeiou",
  "accountingCode" : "aeiou",
  "taxExempt" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "artBack" : "aeiou",
  "lastAct" : "2000-01-23T04:56:07.000+0000",
  "capitalize" : "aeiou",
  "warehouseId" : 123,
  "maxUnders" : 123,
  "interimQuantity" : 123,
  "receivedQuantity" : 123,
  "receiptNo" : 123,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+0000",
  "poNoId" : 123,
  "dockDate" : "2000-01-23T04:56:07.000+0000",
  "asnLine" : 123,
  "orderDate" : "2000-01-23T04:56:07.000+0000",
  "factCost" : 1.3579000000000001069366817318950779736042022705078125,
  "endQuantity" : 123,
  "maxFreight" : 1.3579000000000001069366817318950779736042022705078125,
  "norcs" : "aeiou",
  "mlVendor" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "aeiou",
  "endFact" : 1.3579000000000001069366817318950779736042022705078125,
  "enteredBy" : "aeiou",
  "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
  "distDate" : "2000-01-23T04:56:07.000+0000",
  "endVal" : 1.3579000000000001069366817318950779736042022705078125,
  "wrapCode" : "aeiou",
  "sfpComplete" : "aeiou",
  "bsVendor" : 123,
  "receivedBy" : "aeiou",
  "unitsPerWrap" : 123,
  "cost" : 1.3579000000000001069366817318950779736042022705078125,
  "interimVal" : 1.3579000000000001069366817318950779736042022705078125,
  "sell" : 1.3579000000000001069366817318950779736042022705078125,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "maxOvers" : 123,
  "productIdTag" : "aeiou",
  "impressions" : 123,
  "sample" : 123,
  "fromProd" : 123,
  "paidFull" : "aeiou",
  "prodLot" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "receivedSfp" : 123,
  "accrual" : "aeiou",
  "freightCost" : 1.3579000000000001069366817318950779736042022705078125,
  "maxOther" : 1.3579000000000001069366817318950779736042022705078125,
  "freezeAction" : "aeiou"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemReceipt]> 
     */
    public class func getItemReceiptByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ItemReceipt]> {
        let path = "/beta/itemReceipt/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ItemReceipt]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an itemReceipt by id
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemReceiptById(itemReceiptId itemReceiptId: Int, completion: ((data: ItemReceipt?, error: ErrorType?) -> Void)) {
        getItemReceiptByIdWithRequestBuilder(itemReceiptId: itemReceiptId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an itemReceipt by id
     
     - GET /beta/itemReceipt/{itemReceiptId}
     - Returns the itemReceipt identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "sampleTo" : "aeiou",
  "budgetCode" : "aeiou",
  "interimFact" : 1.3579000000000001069366817318950779736042022705078125,
  "legacyPoNo" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "oddQuantity" : 123,
  "orderQuantity" : 123,
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "revDate" : "aeiou",
  "unitsPerCase" : 123,
  "lineNo" : 123,
  "unitCode" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "pricingPer" : "aeiou",
  "receivedDate" : "2000-01-23T04:56:07.000+0000",
  "mlCost" : 1.3579000000000001069366817318950779736042022705078125,
  "lobId" : 123,
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "chargeFreight" : "aeiou",
  "accountingCode" : "aeiou",
  "taxExempt" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "artBack" : "aeiou",
  "lastAct" : "2000-01-23T04:56:07.000+0000",
  "capitalize" : "aeiou",
  "warehouseId" : 123,
  "maxUnders" : 123,
  "interimQuantity" : 123,
  "receivedQuantity" : 123,
  "receiptNo" : 123,
  "requestedDeliveryDate" : "2000-01-23T04:56:07.000+0000",
  "poNoId" : 123,
  "dockDate" : "2000-01-23T04:56:07.000+0000",
  "asnLine" : 123,
  "orderDate" : "2000-01-23T04:56:07.000+0000",
  "factCost" : 1.3579000000000001069366817318950779736042022705078125,
  "endQuantity" : 123,
  "maxFreight" : 1.3579000000000001069366817318950779736042022705078125,
  "norcs" : "aeiou",
  "mlVendor" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "origin" : "aeiou",
  "endFact" : 1.3579000000000001069366817318950779736042022705078125,
  "enteredBy" : "aeiou",
  "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
  "distDate" : "2000-01-23T04:56:07.000+0000",
  "endVal" : 1.3579000000000001069366817318950779736042022705078125,
  "wrapCode" : "aeiou",
  "sfpComplete" : "aeiou",
  "bsVendor" : 123,
  "receivedBy" : "aeiou",
  "unitsPerWrap" : 123,
  "cost" : 1.3579000000000001069366817318950779736042022705078125,
  "interimVal" : 1.3579000000000001069366817318950779736042022705078125,
  "sell" : 1.3579000000000001069366817318950779736042022705078125,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "maxOvers" : 123,
  "productIdTag" : "aeiou",
  "impressions" : 123,
  "sample" : 123,
  "fromProd" : 123,
  "paidFull" : "aeiou",
  "prodLot" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "receivedSfp" : 123,
  "accrual" : "aeiou",
  "freightCost" : 1.3579000000000001069366817318950779736042022705078125,
  "maxOther" : 1.3579000000000001069366817318950779736042022705078125,
  "freezeAction" : "aeiou"
}}]
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to be returned. 

     - returns: RequestBuilder<ItemReceipt> 
     */
    public class func getItemReceiptByIdWithRequestBuilder(itemReceiptId itemReceiptId: Int) -> RequestBuilder<ItemReceipt> {
        var path = "/beta/itemReceipt/{itemReceiptId}"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptId}", withString: "\(itemReceiptId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemReceipt>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get the tags for an itemReceipt.
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemReceiptTags(itemReceiptId itemReceiptId: Int, completion: ((error: ErrorType?) -> Void)) {
        getItemReceiptTagsWithRequestBuilder(itemReceiptId: itemReceiptId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Get the tags for an itemReceipt.
     
     - GET /beta/itemReceipt/{itemReceiptId}/tag
     - Get all existing itemReceipt tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemReceiptId: (path) Id of the itemReceipt to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemReceiptTagsWithRequestBuilder(itemReceiptId itemReceiptId: Int) -> RequestBuilder<Void> {
        var path = "/beta/itemReceipt/{itemReceiptId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemReceiptId}", withString: "\(itemReceiptId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an itemReceipt
     
     - parameter body: (body) ItemReceipt to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemReceipt(body body: ItemReceipt, completion: ((error: ErrorType?) -> Void)) {
        updateItemReceiptWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an itemReceipt
     
     - PUT /beta/itemReceipt
     - Updates an existing itemReceipt using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemReceipt to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemReceiptWithRequestBuilder(body body: ItemReceipt) -> RequestBuilder<Void> {
        let path = "/beta/itemReceipt"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an itemReceipt custom fields
     
     - parameter body: (body) ItemReceipt to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemReceiptCustomFields(body body: ItemReceipt, completion: ((error: ErrorType?) -> Void)) {
        updateItemReceiptCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an itemReceipt custom fields
     
     - PUT /beta/itemReceipt/customFields
     - Updates an existing itemReceipt custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemReceipt to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemReceiptCustomFieldsWithRequestBuilder(body body: ItemReceipt) -> RequestBuilder<Void> {
        let path = "/beta/itemReceipt/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
