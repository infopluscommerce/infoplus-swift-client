//
// WarehouseAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WarehouseAPI: APIBase {
    /**
     Add new audit for a warehouse
     
     - parameter warehouseId: (path) Id of the warehouse to add an audit to 
     - parameter warehouseAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseAudit(warehouseId warehouseId: Int32, warehouseAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseAuditWithRequestBuilder(warehouseId: warehouseId, warehouseAudit: warehouseAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a warehouse
     - PUT /beta/warehouse/{warehouseId}/audit/{warehouseAudit}
     - Adds an audit to an existing warehouse.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseId: (path) Id of the warehouse to add an audit to 
     - parameter warehouseAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseAuditWithRequestBuilder(warehouseId warehouseId: Int32, warehouseAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouse/{warehouseId}/audit/{warehouseAudit}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{warehouseAudit}", withString: "\(warehouseAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a warehouse
     
     - parameter warehouseId: (path) Id of the warehouse to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseFile(warehouseId warehouseId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseFileWithRequestBuilder(warehouseId: warehouseId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a warehouse
     - POST /beta/warehouse/{warehouseId}/file/{fileName}
     - Adds a file to an existing warehouse.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseId: (path) Id of the warehouse to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseFileWithRequestBuilder(warehouseId warehouseId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouse/{warehouseId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a warehouse.
     
     - parameter warehouseId: (path) Id of the warehouse to add a tag to 
     - parameter warehouseTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseTag(warehouseId warehouseId: Int32, warehouseTag: String, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseTagWithRequestBuilder(warehouseId: warehouseId, warehouseTag: warehouseTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a warehouse.
     - PUT /beta/warehouse/{warehouseId}/tag/{warehouseTag}
     - Adds a tag to an existing warehouse.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseId: (path) Id of the warehouse to add a tag to 
     - parameter warehouseTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseTagWithRequestBuilder(warehouseId warehouseId: Int32, warehouseTag: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouse/{warehouseId}/tag/{warehouseTag}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{warehouseTag}", withString: "\(warehouseTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a warehouse.
     
     - parameter warehouseId: (path) Id of the warehouse to remove tag from 
     - parameter warehouseTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWarehouseTag(warehouseId warehouseId: Int32, warehouseTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWarehouseTagWithRequestBuilder(warehouseId: warehouseId, warehouseTag: warehouseTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a warehouse.
     - DELETE /beta/warehouse/{warehouseId}/tag/{warehouseTag}
     - Deletes an existing warehouse tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseId: (path) Id of the warehouse to remove tag from 
     - parameter warehouseTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWarehouseTagWithRequestBuilder(warehouseId warehouseId: Int32, warehouseTag: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouse/{warehouseId}/tag/{warehouseTag}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{warehouseTag}", withString: "\(warehouseTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a warehouse by id
     
     - parameter warehouseId: (path) Id of the warehouse to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateWarehouseById(warehouseId warehouseId: Int32, completion: ((data: Warehouse?, error: ErrorType?) -> Void)) {
        getDuplicateWarehouseByIdWithRequestBuilder(warehouseId: warehouseId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a warehouse by id
     - GET /beta/warehouse/duplicate/{warehouseId}
     - Returns a duplicated warehouse identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "zip" : "zip",
  "country" : "country",
  "address" : "address",
  "street3" : "street3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "phone" : "phone",
  "lpnPrefix" : "lpnPrefix",
  "name" : "name",
  "client" : 2,
  "company" : "company",
  "street1" : "street1",
  "id" : 3,
  "street2" : "street2",
  "state" : "state",
  "locationBarcodePrefix" : "locationBarcodePrefix",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter warehouseId: (path) Id of the warehouse to be duplicated. 

     - returns: RequestBuilder<Warehouse> 
     */
    public class func getDuplicateWarehouseByIdWithRequestBuilder(warehouseId warehouseId: Int32) -> RequestBuilder<Warehouse> {
        var path = "/beta/warehouse/duplicate/{warehouseId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Warehouse>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search warehouses by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Warehouse]?, error: ErrorType?) -> Void)) {
        getWarehouseByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search warehouses by filter
     - GET /beta/warehouse/search
     - Returns the list of warehouses that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "zip" : "zip",
  "country" : "country",
  "address" : "address",
  "street3" : "street3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "phone" : "phone",
  "lpnPrefix" : "lpnPrefix",
  "name" : "name",
  "client" : 2,
  "company" : "company",
  "street1" : "street1",
  "id" : 3,
  "street2" : "street2",
  "state" : "state",
  "locationBarcodePrefix" : "locationBarcodePrefix",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "zip" : "zip",
  "country" : "country",
  "address" : "address",
  "street3" : "street3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "phone" : "phone",
  "lpnPrefix" : "lpnPrefix",
  "name" : "name",
  "client" : 2,
  "company" : "company",
  "street1" : "street1",
  "id" : 3,
  "street2" : "street2",
  "state" : "state",
  "locationBarcodePrefix" : "locationBarcodePrefix",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Warehouse]> 
     */
    public class func getWarehouseByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Warehouse]> {
        let path = "/beta/warehouse/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Warehouse]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a warehouse by id
     
     - parameter warehouseId: (path) Id of the warehouse to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseById(warehouseId warehouseId: Int32, completion: ((data: Warehouse?, error: ErrorType?) -> Void)) {
        getWarehouseByIdWithRequestBuilder(warehouseId: warehouseId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a warehouse by id
     - GET /beta/warehouse/{warehouseId}
     - Returns the warehouse identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "zip" : "zip",
  "country" : "country",
  "address" : "address",
  "street3" : "street3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "city" : "city",
  "customFields" : {
    "key" : "{}"
  },
  "phone" : "phone",
  "lpnPrefix" : "lpnPrefix",
  "name" : "name",
  "client" : 2,
  "company" : "company",
  "street1" : "street1",
  "id" : 3,
  "street2" : "street2",
  "state" : "state",
  "locationBarcodePrefix" : "locationBarcodePrefix",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter warehouseId: (path) Id of the warehouse to be returned. 

     - returns: RequestBuilder<Warehouse> 
     */
    public class func getWarehouseByIdWithRequestBuilder(warehouseId warehouseId: Int32) -> RequestBuilder<Warehouse> {
        var path = "/beta/warehouse/{warehouseId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Warehouse>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a warehouse.
     
     - parameter warehouseId: (path) Id of the warehouse to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseTags(warehouseId warehouseId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getWarehouseTagsWithRequestBuilder(warehouseId: warehouseId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a warehouse.
     - GET /beta/warehouse/{warehouseId}/tag
     - Get all existing warehouse tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseId: (path) Id of the warehouse to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getWarehouseTagsWithRequestBuilder(warehouseId warehouseId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/warehouse/{warehouseId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a warehouse
     
     - parameter body: (body) Warehouse to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWarehouse(body body: Warehouse, completion: ((error: ErrorType?) -> Void)) {
        updateWarehouseWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a warehouse
     - PUT /beta/warehouse
     - Updates an existing warehouse using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Warehouse to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWarehouseWithRequestBuilder(body body: Warehouse) -> RequestBuilder<Void> {
        let path = "/beta/warehouse"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a warehouse custom fields
     
     - parameter body: (body) Warehouse to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWarehouseCustomFields(body body: Warehouse, completion: ((error: ErrorType?) -> Void)) {
        updateWarehouseCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a warehouse custom fields
     - PUT /beta/warehouse/customFields
     - Updates an existing warehouse custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Warehouse to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWarehouseCustomFieldsWithRequestBuilder(body body: Warehouse) -> RequestBuilder<Void> {
        let path = "/beta/warehouse/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
