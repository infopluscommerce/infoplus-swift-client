//
// WarehouseAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WarehouseAPI: APIBase {
    /**
     
     Search warehouses by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Warehouse]?, error: ErrorType?) -> Void)) {
        getWarehouseByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search warehouses by filter
     
     - GET /v1.0/warehouse/search
     - Returns the list of warehouses that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example=[ {
  "locationBarcodePrefix" : "aeiou",
  "street2" : "aeiou",
  "street1" : "aeiou",
  "zip" : "aeiou",
  "phone" : "aeiou",
  "client" : 123,
  "state" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "lpnPrefix" : "aeiou",
  "city" : "aeiou",
  "country" : "aeiou",
  "id" : 123,
  "address" : "aeiou",
  "name" : "aeiou",
  "company" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "street3" : "aeiou"
} ], contentType=application/json}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Warehouse]> 
     */
    public class func getWarehouseByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Warehouse]> {
        let path = "/v1.0/warehouse/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Warehouse]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a warehouse by id
     
     - parameter warehouseId: (path) Id of the warehouse to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseById(warehouseId warehouseId: Int, completion: ((data: Warehouse?, error: ErrorType?) -> Void)) {
        getWarehouseByIdWithRequestBuilder(warehouseId: warehouseId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a warehouse by id
     
     - GET /v1.0/warehouse/{warehouseId}
     - Returns the warehouse identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "locationBarcodePrefix" : "aeiou",
  "street2" : "aeiou",
  "street1" : "aeiou",
  "zip" : "aeiou",
  "phone" : "aeiou",
  "client" : 123,
  "state" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "lpnPrefix" : "aeiou",
  "city" : "aeiou",
  "country" : "aeiou",
  "id" : 123,
  "address" : "aeiou",
  "name" : "aeiou",
  "company" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "street3" : "aeiou"
}, contentType=application/json}]
     
     - parameter warehouseId: (path) Id of the warehouse to be returned. 

     - returns: RequestBuilder<Warehouse> 
     */
    public class func getWarehouseByIdWithRequestBuilder(warehouseId warehouseId: Int) -> RequestBuilder<Warehouse> {
        var path = "/v1.0/warehouse/{warehouseId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseId}", withString: "\(warehouseId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Warehouse>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a warehouse
     
     - parameter body: (body) Warehouse to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWarehouse(body body: Warehouse, completion: ((error: ErrorType?) -> Void)) {
        updateWarehouseWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a warehouse
     
     - PUT /v1.0/warehouse
     - Updates an existing warehouse using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Warehouse to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWarehouseWithRequestBuilder(body body: Warehouse) -> RequestBuilder<Void> {
        let path = "/v1.0/warehouse"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
