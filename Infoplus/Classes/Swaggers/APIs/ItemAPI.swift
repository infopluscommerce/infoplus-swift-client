//
// ItemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemAPI: APIBase {
    /**
     Create an item
     
     - parameter body: (body) Item to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItem(body body: Item, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        addItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an item
     - POST /beta/item
     - Inserts a new item using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "quantityType" : "quantityType",
  "w1AvailableQuantity" : 5,
  "inFulfillmentProcessQuantity" : 4,
  "w5InFulfillmentProcessQuantity" : 0,
  "lowStockContactId" : 1,
  "w3NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "unallocatableQuantityCases" : 4,
  "w3UnavailableQuantity" : 3,
  "alcoholContent" : 3.093745262666447448651751983561553061008453369140625,
  "shipSolo" : false,
  "orderableQuantity" : 3,
  "hazmat" : "hazmat",
  "orderableQuantityCases" : 8,
  "nextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "height" : 7.05877035158235610623478351044468581676483154296875,
  "w4EstimatedPallets" : 8,
  "inFulfillmentProcessQuantityInnerPacks" : 6,
  "openOrderQuantity" : 7,
  "primaryImage" : "primaryImage",
  "isAlcohol" : false,
  "w3EstimatedCases" : 7,
  "w5OrderableQuantity" : 0,
  "w1EstimatedPallets" : 2,
  "w1StockStatus" : "w1StockStatus",
  "warehouse2Id" : 4,
  "alcoholUPCCode" : "alcoholUPCCode",
  "asnRule" : "asnRule",
  "w5AvailableQuantity" : 2,
  "w4OpenOrderQuantity" : 2,
  "w2StockStatus" : "w2StockStatus",
  "w3OnHandQuantity" : 4,
  "onHandQuantity" : 8,
  "onHandQuantityCases" : 5,
  "seasonalItem" : "seasonalItem",
  "topUp" : false,
  "allocationSort" : "allocationSort",
  "serialCode" : "serialCode",
  "unallocatableQuantityPallets" : 9,
  "maxInterim" : 1,
  "openPOQuantity" : 3,
  "vendorPrice" : 6.87805222012787620400331434211693704128265380859375,
  "estimatedCases" : 8,
  "majorGroupId" : 2,
  "lotControlFlag" : "lotControlFlag",
  "availableQuantity" : 6,
  "openPOQuantityInnerPacks" : 4,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "warehouse3Id" : 1,
  "w3InFulfillmentProcessQuantity" : 1,
  "summaryCodeId" : 3,
  "inFulfillmentProcessQuantityCases" : 7,
  "w1OpenOrderQuantity" : 3,
  "w1EstimatedInnerPacks" : 8,
  "w2OnHandQuantity" : 4,
  "weightPerWrap" : 6.683562403749608193948006373830139636993408203125,
  "w5EstimatedInnerPacks" : 0,
  "vendorId" : 6,
  "w3StockStatus" : "w3StockStatus",
  "buyerId" : 2,
  "secure" : "secure",
  "w5DamagedQuantity" : 5,
  "w5UnavailableQuantity" : 9,
  "barcodeField" : "barcodeField",
  "w2AvailableQuantity" : 0,
  "podRevDate" : "podRevDate",
  "commodityCode" : "commodityCode",
  "pickImage" : "pickImage",
  "orderableQuantityPallets" : 8,
  "itemDescription" : "itemDescription",
  "quantityPerInnerPack" : 8,
  "sector" : "sector",
  "innerPackBarcode" : "innerPackBarcode",
  "lobId" : 4,
  "alcoholType" : "alcoholType",
  "packingSlipDescription" : "packingSlipDescription",
  "w2DaysOnHand" : 4,
  "damagedQuantityCases" : 0,
  "backorder" : "backorder",
  "subGroupId" : 7,
  "overallStockStatus" : "overallStockStatus",
  "w4UnallocatableQuantity" : 8,
  "behaviorType" : "behaviorType",
  "alcoholContainer" : "alcoholContainer",
  "w2InFulfillmentProcessQuantity" : 7,
  "chargeCode" : "chargeCode",
  "w2EstimatedInnerPacks" : 1,
  "allocationField" : "allocationField",
  "w1InFulfillmentProcessQuantity" : 7,
  "w4NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4EstimatedInnerPacks" : 6,
  "w1DamagedQuantity" : 8,
  "pickNo" : "pickNo",
  "w2NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4DamagedQuantity" : 4,
  "w4OnHandQuantity" : 8,
  "damagedQuantityPallets" : 2,
  "unitsPerWrap" : 9,
  "onHandQuantityInnerPacks" : 4,
  "length" : 7.14353804701230643559028976596891880035400390625,
  "accountCodeId" : 6,
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "availableQuantityPallets" : 0,
  "warehouse1Id" : 5,
  "w5OnHandQuantity" : 7,
  "w2UnallocatableQuantity" : 2,
  "w1DaysOnHand" : 3,
  "caseBarcode" : "caseBarcode",
  "w3EstimatedInnerPacks" : 7,
  "alcoholNAMBCACode" : "alcoholNAMBCACode",
  "orderableQuantityInnerPacks" : 7,
  "openPOQuantityPallets" : 4,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "damagedQuantityInnerPacks" : 0,
  "absoluteMax" : "absoluteMax",
  "criticalAmount" : 1,
  "totalDemand" : 3,
  "unavailableQuantityCases" : 3,
  "w2OpenOrderQuantity" : 2,
  "unitCode" : "unitCode",
  "unavailableQuantityInnerPacks" : 0,
  "id" : 0,
  "w5EstimatedCases" : 6,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "w5OpenPOQuantity" : 4,
  "pricingPer" : "pricingPer",
  "w1UnallocatableQuantity" : 7,
  "productCodeId" : 9,
  "w3AvailableQuantity" : 3,
  "unallocatableQuantity" : 7,
  "maxCycle" : 7,
  "w3DamagedQuantity" : 5,
  "upc" : "upc",
  "allocationRule" : "allocationRule",
  "productIdTagSchemeId" : 5,
  "extrinsicNumber2" : 6,
  "extrinsicNumber1" : 3,
  "forwardItemMixingRule" : "forwardItemMixingRule",
  "extrinsicText1" : "extrinsicText1",
  "openOrderQuantityPallets" : 6,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "availableQuantityCases" : 9,
  "overallLeadTime" : 1,
  "unavailableQuantityPallets" : 1,
  "status" : "status",
  "legacyLowLevelContactId" : 5,
  "w2OrderableQuantity" : 0,
  "overallFixedReorderPoint" : 1,
  "outsideVendorId" : 5,
  "w4UnavailableQuantity" : 6,
  "extrinsicDecimal2" : 2.884162126668780246063761296682059764862060546875,
  "w4StockStatus" : "w4StockStatus",
  "damagedQuantity" : 0,
  "wrapCode" : "wrapCode",
  "alcoholCountry" : "alcoholCountry",
  "w5DaysOnHand" : 9,
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 5,
  "alcoholBrand" : "alcoholBrand",
  "unavailableQuantity" : 5,
  "assemblyInstructions" : "assemblyInstructions",
  "w3EstimatedPallets" : 7,
  "inFulfillmentProcessQuantityPallets" : 1,
  "w3OrderableQuantity" : 3,
  "extrinsicDecimal1" : 1.2846590061165319429647979632136411964893341064453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "w4InFulfillmentProcessQuantity" : 3,
  "openOrderQuantityCases" : 4,
  "w3OpenOrderQuantity" : 5,
  "w5StockStatus" : "w5StockStatus",
  "alcoholVintageYear" : "alcoholVintageYear",
  "openPOQuantityCases" : 6,
  "onHandQuantityPallets" : 8,
  "podOrderSuffix" : 9,
  "w1OnHandQuantity" : 3,
  "w1UnavailableQuantity" : 0,
  "w2UnavailableQuantity" : 6,
  "openOrderQuantityInnerPacks" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "width" : 0.885137473901165261480628032586537301540374755859375,
  "w4EstimatedCases" : 2,
  "w5UnallocatableQuantity" : 0,
  "estimatedPallets" : 9,
  "sellPrice" : 6.8468526983526398765889098285697400569915771484375,
  "storageLotMixingRule" : "storageLotMixingRule",
  "w5EstimatedPallets" : 7,
  "w3DaysOnHand" : 9,
  "forwardLotMixingRule" : "forwardLotMixingRule",
  "w1NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4OpenPOQuantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "quantityPerPallet" : 6,
  "warehouse4Id" : 9,
  "storageItemMixingRule" : "storageItemMixingRule",
  "palletBarcode" : "palletBarcode",
  "w5NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholRegion" : "alcoholRegion",
  "w2DamagedQuantity" : 0,
  "alcoholSCCCode" : "alcoholSCCCode",
  "overallDaysOnHand" : 3,
  "w5OpenOrderQuantity" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "w3OpenPOQuantity" : 5,
  "w2EstimatedCases" : 9,
  "receivingCriteriaSchemeId" : 3,
  "warehouseDisplayField" : "warehouseDisplayField",
  "w3UnallocatableQuantity" : 1,
  "itemSerialSchemeId" : 6,
  "w4OrderableQuantity" : 4,
  "availableQuantityInnerPacks" : 4,
  "warehouse5Id" : 0,
  "w1OpenPOQuantity" : 9,
  "vendorSKU" : "vendorSKU",
  "companionCode" : 7,
  "vendorPer" : "vendorPer",
  "unallocatableQuantityInnerPacks" : 9,
  "w1OrderableQuantity" : 5,
  "w4DaysOnHand" : 4,
  "w1EstimatedCases" : 3,
  "w2EstimatedPallets" : 6,
  "w2OpenPOQuantity" : 9,
  "quantityPerCase" : 9,
  "w4AvailableQuantity" : 1,
  "estimatedInnerPacks" : 0,
  "numericSortOrder" : 4
}}]
     
     - parameter body: (body) Item to be inserted. 

     - returns: RequestBuilder<Item> 
     */
    public class func addItemWithRequestBuilder(body body: Item) -> RequestBuilder<Item> {
        let path = "/beta/item"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an item
     
     - parameter itemId: (path) Id of the item to add an audit to 
     - parameter itemAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAudit(itemId itemId: Int32, itemAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemAuditWithRequestBuilder(itemId: itemId, itemAudit: itemAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an item
     - PUT /beta/item/{itemId}/audit/{itemAudit}
     - Adds an audit to an existing item.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to add an audit to 
     - parameter itemAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemAuditWithRequestBuilder(itemId itemId: Int32, itemAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/audit/{itemAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemAudit}", withString: "\(itemAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an item
     
     - parameter itemId: (path) Id of the item to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemFile(itemId itemId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addItemFileWithRequestBuilder(itemId: itemId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an item
     - POST /beta/item/{itemId}/file/{fileName}
     - Adds a file to an existing item.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemFileWithRequestBuilder(itemId itemId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an item.
     
     - parameter itemId: (path) Id of the item to add a tag to 
     - parameter itemTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemTag(itemId itemId: Int32, itemTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemTagWithRequestBuilder(itemId: itemId, itemTag: itemTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an item.
     - PUT /beta/item/{itemId}/tag/{itemTag}
     - Adds a tag to an existing item.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to add a tag to 
     - parameter itemTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemTagWithRequestBuilder(itemId itemId: Int32, itemTag: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/tag/{itemTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemTag}", withString: "\(itemTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an item
     
     - parameter itemId: (path) Id of the item to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItem(itemId itemId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an item
     - DELETE /beta/item/{itemId}
     - Deletes the item identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemWithRequestBuilder(itemId itemId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an item.
     
     - parameter itemId: (path) Id of the item to remove tag from 
     - parameter itemTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemTag(itemId itemId: Int32, itemTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemTagWithRequestBuilder(itemId: itemId, itemTag: itemTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an item.
     - DELETE /beta/item/{itemId}/tag/{itemTag}
     - Deletes an existing item tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to remove tag from 
     - parameter itemTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemTagWithRequestBuilder(itemId itemId: Int32, itemTag: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/tag/{itemTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemTag}", withString: "\(itemTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an item by SKU
     
     - parameter lobId: (query) lobId of the item to be returned. 
     - parameter sku: (query) sku of the item to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBySKU(lobId lobId: Int32, sku: String, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        getBySKUWithRequestBuilder(lobId: lobId, sku: sku).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an item by SKU
     - GET /beta/item/getBySKU
     - Returns the item identified by the specified parameters.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "quantityType" : "quantityType",
  "w1AvailableQuantity" : 5,
  "inFulfillmentProcessQuantity" : 4,
  "w5InFulfillmentProcessQuantity" : 0,
  "lowStockContactId" : 1,
  "w3NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "unallocatableQuantityCases" : 4,
  "w3UnavailableQuantity" : 3,
  "alcoholContent" : 3.093745262666447448651751983561553061008453369140625,
  "shipSolo" : false,
  "orderableQuantity" : 3,
  "hazmat" : "hazmat",
  "orderableQuantityCases" : 8,
  "nextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "height" : 7.05877035158235610623478351044468581676483154296875,
  "w4EstimatedPallets" : 8,
  "inFulfillmentProcessQuantityInnerPacks" : 6,
  "openOrderQuantity" : 7,
  "primaryImage" : "primaryImage",
  "isAlcohol" : false,
  "w3EstimatedCases" : 7,
  "w5OrderableQuantity" : 0,
  "w1EstimatedPallets" : 2,
  "w1StockStatus" : "w1StockStatus",
  "warehouse2Id" : 4,
  "alcoholUPCCode" : "alcoholUPCCode",
  "asnRule" : "asnRule",
  "w5AvailableQuantity" : 2,
  "w4OpenOrderQuantity" : 2,
  "w2StockStatus" : "w2StockStatus",
  "w3OnHandQuantity" : 4,
  "onHandQuantity" : 8,
  "onHandQuantityCases" : 5,
  "seasonalItem" : "seasonalItem",
  "topUp" : false,
  "allocationSort" : "allocationSort",
  "serialCode" : "serialCode",
  "unallocatableQuantityPallets" : 9,
  "maxInterim" : 1,
  "openPOQuantity" : 3,
  "vendorPrice" : 6.87805222012787620400331434211693704128265380859375,
  "estimatedCases" : 8,
  "majorGroupId" : 2,
  "lotControlFlag" : "lotControlFlag",
  "availableQuantity" : 6,
  "openPOQuantityInnerPacks" : 4,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "warehouse3Id" : 1,
  "w3InFulfillmentProcessQuantity" : 1,
  "summaryCodeId" : 3,
  "inFulfillmentProcessQuantityCases" : 7,
  "w1OpenOrderQuantity" : 3,
  "w1EstimatedInnerPacks" : 8,
  "w2OnHandQuantity" : 4,
  "weightPerWrap" : 6.683562403749608193948006373830139636993408203125,
  "w5EstimatedInnerPacks" : 0,
  "vendorId" : 6,
  "w3StockStatus" : "w3StockStatus",
  "buyerId" : 2,
  "secure" : "secure",
  "w5DamagedQuantity" : 5,
  "w5UnavailableQuantity" : 9,
  "barcodeField" : "barcodeField",
  "w2AvailableQuantity" : 0,
  "podRevDate" : "podRevDate",
  "commodityCode" : "commodityCode",
  "pickImage" : "pickImage",
  "orderableQuantityPallets" : 8,
  "itemDescription" : "itemDescription",
  "quantityPerInnerPack" : 8,
  "sector" : "sector",
  "innerPackBarcode" : "innerPackBarcode",
  "lobId" : 4,
  "alcoholType" : "alcoholType",
  "packingSlipDescription" : "packingSlipDescription",
  "w2DaysOnHand" : 4,
  "damagedQuantityCases" : 0,
  "backorder" : "backorder",
  "subGroupId" : 7,
  "overallStockStatus" : "overallStockStatus",
  "w4UnallocatableQuantity" : 8,
  "behaviorType" : "behaviorType",
  "alcoholContainer" : "alcoholContainer",
  "w2InFulfillmentProcessQuantity" : 7,
  "chargeCode" : "chargeCode",
  "w2EstimatedInnerPacks" : 1,
  "allocationField" : "allocationField",
  "w1InFulfillmentProcessQuantity" : 7,
  "w4NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4EstimatedInnerPacks" : 6,
  "w1DamagedQuantity" : 8,
  "pickNo" : "pickNo",
  "w2NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4DamagedQuantity" : 4,
  "w4OnHandQuantity" : 8,
  "damagedQuantityPallets" : 2,
  "unitsPerWrap" : 9,
  "onHandQuantityInnerPacks" : 4,
  "length" : 7.14353804701230643559028976596891880035400390625,
  "accountCodeId" : 6,
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "availableQuantityPallets" : 0,
  "warehouse1Id" : 5,
  "w5OnHandQuantity" : 7,
  "w2UnallocatableQuantity" : 2,
  "w1DaysOnHand" : 3,
  "caseBarcode" : "caseBarcode",
  "w3EstimatedInnerPacks" : 7,
  "alcoholNAMBCACode" : "alcoholNAMBCACode",
  "orderableQuantityInnerPacks" : 7,
  "openPOQuantityPallets" : 4,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "damagedQuantityInnerPacks" : 0,
  "absoluteMax" : "absoluteMax",
  "criticalAmount" : 1,
  "totalDemand" : 3,
  "unavailableQuantityCases" : 3,
  "w2OpenOrderQuantity" : 2,
  "unitCode" : "unitCode",
  "unavailableQuantityInnerPacks" : 0,
  "id" : 0,
  "w5EstimatedCases" : 6,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "w5OpenPOQuantity" : 4,
  "pricingPer" : "pricingPer",
  "w1UnallocatableQuantity" : 7,
  "productCodeId" : 9,
  "w3AvailableQuantity" : 3,
  "unallocatableQuantity" : 7,
  "maxCycle" : 7,
  "w3DamagedQuantity" : 5,
  "upc" : "upc",
  "allocationRule" : "allocationRule",
  "productIdTagSchemeId" : 5,
  "extrinsicNumber2" : 6,
  "extrinsicNumber1" : 3,
  "forwardItemMixingRule" : "forwardItemMixingRule",
  "extrinsicText1" : "extrinsicText1",
  "openOrderQuantityPallets" : 6,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "availableQuantityCases" : 9,
  "overallLeadTime" : 1,
  "unavailableQuantityPallets" : 1,
  "status" : "status",
  "legacyLowLevelContactId" : 5,
  "w2OrderableQuantity" : 0,
  "overallFixedReorderPoint" : 1,
  "outsideVendorId" : 5,
  "w4UnavailableQuantity" : 6,
  "extrinsicDecimal2" : 2.884162126668780246063761296682059764862060546875,
  "w4StockStatus" : "w4StockStatus",
  "damagedQuantity" : 0,
  "wrapCode" : "wrapCode",
  "alcoholCountry" : "alcoholCountry",
  "w5DaysOnHand" : 9,
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 5,
  "alcoholBrand" : "alcoholBrand",
  "unavailableQuantity" : 5,
  "assemblyInstructions" : "assemblyInstructions",
  "w3EstimatedPallets" : 7,
  "inFulfillmentProcessQuantityPallets" : 1,
  "w3OrderableQuantity" : 3,
  "extrinsicDecimal1" : 1.2846590061165319429647979632136411964893341064453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "w4InFulfillmentProcessQuantity" : 3,
  "openOrderQuantityCases" : 4,
  "w3OpenOrderQuantity" : 5,
  "w5StockStatus" : "w5StockStatus",
  "alcoholVintageYear" : "alcoholVintageYear",
  "openPOQuantityCases" : 6,
  "onHandQuantityPallets" : 8,
  "podOrderSuffix" : 9,
  "w1OnHandQuantity" : 3,
  "w1UnavailableQuantity" : 0,
  "w2UnavailableQuantity" : 6,
  "openOrderQuantityInnerPacks" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "width" : 0.885137473901165261480628032586537301540374755859375,
  "w4EstimatedCases" : 2,
  "w5UnallocatableQuantity" : 0,
  "estimatedPallets" : 9,
  "sellPrice" : 6.8468526983526398765889098285697400569915771484375,
  "storageLotMixingRule" : "storageLotMixingRule",
  "w5EstimatedPallets" : 7,
  "w3DaysOnHand" : 9,
  "forwardLotMixingRule" : "forwardLotMixingRule",
  "w1NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4OpenPOQuantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "quantityPerPallet" : 6,
  "warehouse4Id" : 9,
  "storageItemMixingRule" : "storageItemMixingRule",
  "palletBarcode" : "palletBarcode",
  "w5NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholRegion" : "alcoholRegion",
  "w2DamagedQuantity" : 0,
  "alcoholSCCCode" : "alcoholSCCCode",
  "overallDaysOnHand" : 3,
  "w5OpenOrderQuantity" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "w3OpenPOQuantity" : 5,
  "w2EstimatedCases" : 9,
  "receivingCriteriaSchemeId" : 3,
  "warehouseDisplayField" : "warehouseDisplayField",
  "w3UnallocatableQuantity" : 1,
  "itemSerialSchemeId" : 6,
  "w4OrderableQuantity" : 4,
  "availableQuantityInnerPacks" : 4,
  "warehouse5Id" : 0,
  "w1OpenPOQuantity" : 9,
  "vendorSKU" : "vendorSKU",
  "companionCode" : 7,
  "vendorPer" : "vendorPer",
  "unallocatableQuantityInnerPacks" : 9,
  "w1OrderableQuantity" : 5,
  "w4DaysOnHand" : 4,
  "w1EstimatedCases" : 3,
  "w2EstimatedPallets" : 6,
  "w2OpenPOQuantity" : 9,
  "quantityPerCase" : 9,
  "w4AvailableQuantity" : 1,
  "estimatedInnerPacks" : 0,
  "numericSortOrder" : 4
}}]
     
     - parameter lobId: (query) lobId of the item to be returned. 
     - parameter sku: (query) sku of the item to be returned. 

     - returns: RequestBuilder<Item> 
     */
    public class func getBySKUWithRequestBuilder(lobId lobId: Int32, sku: String) -> RequestBuilder<Item> {
        let path = "/beta/item/getBySKU"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "lobId": lobId.encodeToJSON(),
            "sku": sku
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a duplicated an item by id
     
     - parameter itemId: (path) Id of the item to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemById(itemId itemId: Int32, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        getDuplicateItemByIdWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an item by id
     - GET /beta/item/duplicate/{itemId}
     - Returns a duplicated item identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "quantityType" : "quantityType",
  "w1AvailableQuantity" : 5,
  "inFulfillmentProcessQuantity" : 4,
  "w5InFulfillmentProcessQuantity" : 0,
  "lowStockContactId" : 1,
  "w3NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "unallocatableQuantityCases" : 4,
  "w3UnavailableQuantity" : 3,
  "alcoholContent" : 3.093745262666447448651751983561553061008453369140625,
  "shipSolo" : false,
  "orderableQuantity" : 3,
  "hazmat" : "hazmat",
  "orderableQuantityCases" : 8,
  "nextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "height" : 7.05877035158235610623478351044468581676483154296875,
  "w4EstimatedPallets" : 8,
  "inFulfillmentProcessQuantityInnerPacks" : 6,
  "openOrderQuantity" : 7,
  "primaryImage" : "primaryImage",
  "isAlcohol" : false,
  "w3EstimatedCases" : 7,
  "w5OrderableQuantity" : 0,
  "w1EstimatedPallets" : 2,
  "w1StockStatus" : "w1StockStatus",
  "warehouse2Id" : 4,
  "alcoholUPCCode" : "alcoholUPCCode",
  "asnRule" : "asnRule",
  "w5AvailableQuantity" : 2,
  "w4OpenOrderQuantity" : 2,
  "w2StockStatus" : "w2StockStatus",
  "w3OnHandQuantity" : 4,
  "onHandQuantity" : 8,
  "onHandQuantityCases" : 5,
  "seasonalItem" : "seasonalItem",
  "topUp" : false,
  "allocationSort" : "allocationSort",
  "serialCode" : "serialCode",
  "unallocatableQuantityPallets" : 9,
  "maxInterim" : 1,
  "openPOQuantity" : 3,
  "vendorPrice" : 6.87805222012787620400331434211693704128265380859375,
  "estimatedCases" : 8,
  "majorGroupId" : 2,
  "lotControlFlag" : "lotControlFlag",
  "availableQuantity" : 6,
  "openPOQuantityInnerPacks" : 4,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "warehouse3Id" : 1,
  "w3InFulfillmentProcessQuantity" : 1,
  "summaryCodeId" : 3,
  "inFulfillmentProcessQuantityCases" : 7,
  "w1OpenOrderQuantity" : 3,
  "w1EstimatedInnerPacks" : 8,
  "w2OnHandQuantity" : 4,
  "weightPerWrap" : 6.683562403749608193948006373830139636993408203125,
  "w5EstimatedInnerPacks" : 0,
  "vendorId" : 6,
  "w3StockStatus" : "w3StockStatus",
  "buyerId" : 2,
  "secure" : "secure",
  "w5DamagedQuantity" : 5,
  "w5UnavailableQuantity" : 9,
  "barcodeField" : "barcodeField",
  "w2AvailableQuantity" : 0,
  "podRevDate" : "podRevDate",
  "commodityCode" : "commodityCode",
  "pickImage" : "pickImage",
  "orderableQuantityPallets" : 8,
  "itemDescription" : "itemDescription",
  "quantityPerInnerPack" : 8,
  "sector" : "sector",
  "innerPackBarcode" : "innerPackBarcode",
  "lobId" : 4,
  "alcoholType" : "alcoholType",
  "packingSlipDescription" : "packingSlipDescription",
  "w2DaysOnHand" : 4,
  "damagedQuantityCases" : 0,
  "backorder" : "backorder",
  "subGroupId" : 7,
  "overallStockStatus" : "overallStockStatus",
  "w4UnallocatableQuantity" : 8,
  "behaviorType" : "behaviorType",
  "alcoholContainer" : "alcoholContainer",
  "w2InFulfillmentProcessQuantity" : 7,
  "chargeCode" : "chargeCode",
  "w2EstimatedInnerPacks" : 1,
  "allocationField" : "allocationField",
  "w1InFulfillmentProcessQuantity" : 7,
  "w4NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4EstimatedInnerPacks" : 6,
  "w1DamagedQuantity" : 8,
  "pickNo" : "pickNo",
  "w2NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4DamagedQuantity" : 4,
  "w4OnHandQuantity" : 8,
  "damagedQuantityPallets" : 2,
  "unitsPerWrap" : 9,
  "onHandQuantityInnerPacks" : 4,
  "length" : 7.14353804701230643559028976596891880035400390625,
  "accountCodeId" : 6,
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "availableQuantityPallets" : 0,
  "warehouse1Id" : 5,
  "w5OnHandQuantity" : 7,
  "w2UnallocatableQuantity" : 2,
  "w1DaysOnHand" : 3,
  "caseBarcode" : "caseBarcode",
  "w3EstimatedInnerPacks" : 7,
  "alcoholNAMBCACode" : "alcoholNAMBCACode",
  "orderableQuantityInnerPacks" : 7,
  "openPOQuantityPallets" : 4,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "damagedQuantityInnerPacks" : 0,
  "absoluteMax" : "absoluteMax",
  "criticalAmount" : 1,
  "totalDemand" : 3,
  "unavailableQuantityCases" : 3,
  "w2OpenOrderQuantity" : 2,
  "unitCode" : "unitCode",
  "unavailableQuantityInnerPacks" : 0,
  "id" : 0,
  "w5EstimatedCases" : 6,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "w5OpenPOQuantity" : 4,
  "pricingPer" : "pricingPer",
  "w1UnallocatableQuantity" : 7,
  "productCodeId" : 9,
  "w3AvailableQuantity" : 3,
  "unallocatableQuantity" : 7,
  "maxCycle" : 7,
  "w3DamagedQuantity" : 5,
  "upc" : "upc",
  "allocationRule" : "allocationRule",
  "productIdTagSchemeId" : 5,
  "extrinsicNumber2" : 6,
  "extrinsicNumber1" : 3,
  "forwardItemMixingRule" : "forwardItemMixingRule",
  "extrinsicText1" : "extrinsicText1",
  "openOrderQuantityPallets" : 6,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "availableQuantityCases" : 9,
  "overallLeadTime" : 1,
  "unavailableQuantityPallets" : 1,
  "status" : "status",
  "legacyLowLevelContactId" : 5,
  "w2OrderableQuantity" : 0,
  "overallFixedReorderPoint" : 1,
  "outsideVendorId" : 5,
  "w4UnavailableQuantity" : 6,
  "extrinsicDecimal2" : 2.884162126668780246063761296682059764862060546875,
  "w4StockStatus" : "w4StockStatus",
  "damagedQuantity" : 0,
  "wrapCode" : "wrapCode",
  "alcoholCountry" : "alcoholCountry",
  "w5DaysOnHand" : 9,
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 5,
  "alcoholBrand" : "alcoholBrand",
  "unavailableQuantity" : 5,
  "assemblyInstructions" : "assemblyInstructions",
  "w3EstimatedPallets" : 7,
  "inFulfillmentProcessQuantityPallets" : 1,
  "w3OrderableQuantity" : 3,
  "extrinsicDecimal1" : 1.2846590061165319429647979632136411964893341064453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "w4InFulfillmentProcessQuantity" : 3,
  "openOrderQuantityCases" : 4,
  "w3OpenOrderQuantity" : 5,
  "w5StockStatus" : "w5StockStatus",
  "alcoholVintageYear" : "alcoholVintageYear",
  "openPOQuantityCases" : 6,
  "onHandQuantityPallets" : 8,
  "podOrderSuffix" : 9,
  "w1OnHandQuantity" : 3,
  "w1UnavailableQuantity" : 0,
  "w2UnavailableQuantity" : 6,
  "openOrderQuantityInnerPacks" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "width" : 0.885137473901165261480628032586537301540374755859375,
  "w4EstimatedCases" : 2,
  "w5UnallocatableQuantity" : 0,
  "estimatedPallets" : 9,
  "sellPrice" : 6.8468526983526398765889098285697400569915771484375,
  "storageLotMixingRule" : "storageLotMixingRule",
  "w5EstimatedPallets" : 7,
  "w3DaysOnHand" : 9,
  "forwardLotMixingRule" : "forwardLotMixingRule",
  "w1NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4OpenPOQuantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "quantityPerPallet" : 6,
  "warehouse4Id" : 9,
  "storageItemMixingRule" : "storageItemMixingRule",
  "palletBarcode" : "palletBarcode",
  "w5NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholRegion" : "alcoholRegion",
  "w2DamagedQuantity" : 0,
  "alcoholSCCCode" : "alcoholSCCCode",
  "overallDaysOnHand" : 3,
  "w5OpenOrderQuantity" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "w3OpenPOQuantity" : 5,
  "w2EstimatedCases" : 9,
  "receivingCriteriaSchemeId" : 3,
  "warehouseDisplayField" : "warehouseDisplayField",
  "w3UnallocatableQuantity" : 1,
  "itemSerialSchemeId" : 6,
  "w4OrderableQuantity" : 4,
  "availableQuantityInnerPacks" : 4,
  "warehouse5Id" : 0,
  "w1OpenPOQuantity" : 9,
  "vendorSKU" : "vendorSKU",
  "companionCode" : 7,
  "vendorPer" : "vendorPer",
  "unallocatableQuantityInnerPacks" : 9,
  "w1OrderableQuantity" : 5,
  "w4DaysOnHand" : 4,
  "w1EstimatedCases" : 3,
  "w2EstimatedPallets" : 6,
  "w2OpenPOQuantity" : 9,
  "quantityPerCase" : 9,
  "w4AvailableQuantity" : 1,
  "estimatedInnerPacks" : 0,
  "numericSortOrder" : 4
}}]
     
     - parameter itemId: (path) Id of the item to be duplicated. 

     - returns: RequestBuilder<Item> 
     */
    public class func getDuplicateItemByIdWithRequestBuilder(itemId itemId: Int32) -> RequestBuilder<Item> {
        var path = "/beta/item/duplicate/{itemId}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search items by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Item]?, error: ErrorType?) -> Void)) {
        getItemByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search items by filter
     - GET /beta/item/search
     - Returns the list of items that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "quantityType" : "quantityType",
  "w1AvailableQuantity" : 5,
  "inFulfillmentProcessQuantity" : 4,
  "w5InFulfillmentProcessQuantity" : 0,
  "lowStockContactId" : 1,
  "w3NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "unallocatableQuantityCases" : 4,
  "w3UnavailableQuantity" : 3,
  "alcoholContent" : 3.093745262666447448651751983561553061008453369140625,
  "shipSolo" : false,
  "orderableQuantity" : 3,
  "hazmat" : "hazmat",
  "orderableQuantityCases" : 8,
  "nextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "height" : 7.05877035158235610623478351044468581676483154296875,
  "w4EstimatedPallets" : 8,
  "inFulfillmentProcessQuantityInnerPacks" : 6,
  "openOrderQuantity" : 7,
  "primaryImage" : "primaryImage",
  "isAlcohol" : false,
  "w3EstimatedCases" : 7,
  "w5OrderableQuantity" : 0,
  "w1EstimatedPallets" : 2,
  "w1StockStatus" : "w1StockStatus",
  "warehouse2Id" : 4,
  "alcoholUPCCode" : "alcoholUPCCode",
  "asnRule" : "asnRule",
  "w5AvailableQuantity" : 2,
  "w4OpenOrderQuantity" : 2,
  "w2StockStatus" : "w2StockStatus",
  "w3OnHandQuantity" : 4,
  "onHandQuantity" : 8,
  "onHandQuantityCases" : 5,
  "seasonalItem" : "seasonalItem",
  "topUp" : false,
  "allocationSort" : "allocationSort",
  "serialCode" : "serialCode",
  "unallocatableQuantityPallets" : 9,
  "maxInterim" : 1,
  "openPOQuantity" : 3,
  "vendorPrice" : 6.87805222012787620400331434211693704128265380859375,
  "estimatedCases" : 8,
  "majorGroupId" : 2,
  "lotControlFlag" : "lotControlFlag",
  "availableQuantity" : 6,
  "openPOQuantityInnerPacks" : 4,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "warehouse3Id" : 1,
  "w3InFulfillmentProcessQuantity" : 1,
  "summaryCodeId" : 3,
  "inFulfillmentProcessQuantityCases" : 7,
  "w1OpenOrderQuantity" : 3,
  "w1EstimatedInnerPacks" : 8,
  "w2OnHandQuantity" : 4,
  "weightPerWrap" : 6.683562403749608193948006373830139636993408203125,
  "w5EstimatedInnerPacks" : 0,
  "vendorId" : 6,
  "w3StockStatus" : "w3StockStatus",
  "buyerId" : 2,
  "secure" : "secure",
  "w5DamagedQuantity" : 5,
  "w5UnavailableQuantity" : 9,
  "barcodeField" : "barcodeField",
  "w2AvailableQuantity" : 0,
  "podRevDate" : "podRevDate",
  "commodityCode" : "commodityCode",
  "pickImage" : "pickImage",
  "orderableQuantityPallets" : 8,
  "itemDescription" : "itemDescription",
  "quantityPerInnerPack" : 8,
  "sector" : "sector",
  "innerPackBarcode" : "innerPackBarcode",
  "lobId" : 4,
  "alcoholType" : "alcoholType",
  "packingSlipDescription" : "packingSlipDescription",
  "w2DaysOnHand" : 4,
  "damagedQuantityCases" : 0,
  "backorder" : "backorder",
  "subGroupId" : 7,
  "overallStockStatus" : "overallStockStatus",
  "w4UnallocatableQuantity" : 8,
  "behaviorType" : "behaviorType",
  "alcoholContainer" : "alcoholContainer",
  "w2InFulfillmentProcessQuantity" : 7,
  "chargeCode" : "chargeCode",
  "w2EstimatedInnerPacks" : 1,
  "allocationField" : "allocationField",
  "w1InFulfillmentProcessQuantity" : 7,
  "w4NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4EstimatedInnerPacks" : 6,
  "w1DamagedQuantity" : 8,
  "pickNo" : "pickNo",
  "w2NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4DamagedQuantity" : 4,
  "w4OnHandQuantity" : 8,
  "damagedQuantityPallets" : 2,
  "unitsPerWrap" : 9,
  "onHandQuantityInnerPacks" : 4,
  "length" : 7.14353804701230643559028976596891880035400390625,
  "accountCodeId" : 6,
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "availableQuantityPallets" : 0,
  "warehouse1Id" : 5,
  "w5OnHandQuantity" : 7,
  "w2UnallocatableQuantity" : 2,
  "w1DaysOnHand" : 3,
  "caseBarcode" : "caseBarcode",
  "w3EstimatedInnerPacks" : 7,
  "alcoholNAMBCACode" : "alcoholNAMBCACode",
  "orderableQuantityInnerPacks" : 7,
  "openPOQuantityPallets" : 4,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "damagedQuantityInnerPacks" : 0,
  "absoluteMax" : "absoluteMax",
  "criticalAmount" : 1,
  "totalDemand" : 3,
  "unavailableQuantityCases" : 3,
  "w2OpenOrderQuantity" : 2,
  "unitCode" : "unitCode",
  "unavailableQuantityInnerPacks" : 0,
  "id" : 0,
  "w5EstimatedCases" : 6,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "w5OpenPOQuantity" : 4,
  "pricingPer" : "pricingPer",
  "w1UnallocatableQuantity" : 7,
  "productCodeId" : 9,
  "w3AvailableQuantity" : 3,
  "unallocatableQuantity" : 7,
  "maxCycle" : 7,
  "w3DamagedQuantity" : 5,
  "upc" : "upc",
  "allocationRule" : "allocationRule",
  "productIdTagSchemeId" : 5,
  "extrinsicNumber2" : 6,
  "extrinsicNumber1" : 3,
  "forwardItemMixingRule" : "forwardItemMixingRule",
  "extrinsicText1" : "extrinsicText1",
  "openOrderQuantityPallets" : 6,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "availableQuantityCases" : 9,
  "overallLeadTime" : 1,
  "unavailableQuantityPallets" : 1,
  "status" : "status",
  "legacyLowLevelContactId" : 5,
  "w2OrderableQuantity" : 0,
  "overallFixedReorderPoint" : 1,
  "outsideVendorId" : 5,
  "w4UnavailableQuantity" : 6,
  "extrinsicDecimal2" : 2.884162126668780246063761296682059764862060546875,
  "w4StockStatus" : "w4StockStatus",
  "damagedQuantity" : 0,
  "wrapCode" : "wrapCode",
  "alcoholCountry" : "alcoholCountry",
  "w5DaysOnHand" : 9,
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 5,
  "alcoholBrand" : "alcoholBrand",
  "unavailableQuantity" : 5,
  "assemblyInstructions" : "assemblyInstructions",
  "w3EstimatedPallets" : 7,
  "inFulfillmentProcessQuantityPallets" : 1,
  "w3OrderableQuantity" : 3,
  "extrinsicDecimal1" : 1.2846590061165319429647979632136411964893341064453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "w4InFulfillmentProcessQuantity" : 3,
  "openOrderQuantityCases" : 4,
  "w3OpenOrderQuantity" : 5,
  "w5StockStatus" : "w5StockStatus",
  "alcoholVintageYear" : "alcoholVintageYear",
  "openPOQuantityCases" : 6,
  "onHandQuantityPallets" : 8,
  "podOrderSuffix" : 9,
  "w1OnHandQuantity" : 3,
  "w1UnavailableQuantity" : 0,
  "w2UnavailableQuantity" : 6,
  "openOrderQuantityInnerPacks" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "width" : 0.885137473901165261480628032586537301540374755859375,
  "w4EstimatedCases" : 2,
  "w5UnallocatableQuantity" : 0,
  "estimatedPallets" : 9,
  "sellPrice" : 6.8468526983526398765889098285697400569915771484375,
  "storageLotMixingRule" : "storageLotMixingRule",
  "w5EstimatedPallets" : 7,
  "w3DaysOnHand" : 9,
  "forwardLotMixingRule" : "forwardLotMixingRule",
  "w1NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4OpenPOQuantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "quantityPerPallet" : 6,
  "warehouse4Id" : 9,
  "storageItemMixingRule" : "storageItemMixingRule",
  "palletBarcode" : "palletBarcode",
  "w5NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholRegion" : "alcoholRegion",
  "w2DamagedQuantity" : 0,
  "alcoholSCCCode" : "alcoholSCCCode",
  "overallDaysOnHand" : 3,
  "w5OpenOrderQuantity" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "w3OpenPOQuantity" : 5,
  "w2EstimatedCases" : 9,
  "receivingCriteriaSchemeId" : 3,
  "warehouseDisplayField" : "warehouseDisplayField",
  "w3UnallocatableQuantity" : 1,
  "itemSerialSchemeId" : 6,
  "w4OrderableQuantity" : 4,
  "availableQuantityInnerPacks" : 4,
  "warehouse5Id" : 0,
  "w1OpenPOQuantity" : 9,
  "vendorSKU" : "vendorSKU",
  "companionCode" : 7,
  "vendorPer" : "vendorPer",
  "unallocatableQuantityInnerPacks" : 9,
  "w1OrderableQuantity" : 5,
  "w4DaysOnHand" : 4,
  "w1EstimatedCases" : 3,
  "w2EstimatedPallets" : 6,
  "w2OpenPOQuantity" : 9,
  "quantityPerCase" : 9,
  "w4AvailableQuantity" : 1,
  "estimatedInnerPacks" : 0,
  "numericSortOrder" : 4
}, {
  "quantityType" : "quantityType",
  "w1AvailableQuantity" : 5,
  "inFulfillmentProcessQuantity" : 4,
  "w5InFulfillmentProcessQuantity" : 0,
  "lowStockContactId" : 1,
  "w3NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "unallocatableQuantityCases" : 4,
  "w3UnavailableQuantity" : 3,
  "alcoholContent" : 3.093745262666447448651751983561553061008453369140625,
  "shipSolo" : false,
  "orderableQuantity" : 3,
  "hazmat" : "hazmat",
  "orderableQuantityCases" : 8,
  "nextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "height" : 7.05877035158235610623478351044468581676483154296875,
  "w4EstimatedPallets" : 8,
  "inFulfillmentProcessQuantityInnerPacks" : 6,
  "openOrderQuantity" : 7,
  "primaryImage" : "primaryImage",
  "isAlcohol" : false,
  "w3EstimatedCases" : 7,
  "w5OrderableQuantity" : 0,
  "w1EstimatedPallets" : 2,
  "w1StockStatus" : "w1StockStatus",
  "warehouse2Id" : 4,
  "alcoholUPCCode" : "alcoholUPCCode",
  "asnRule" : "asnRule",
  "w5AvailableQuantity" : 2,
  "w4OpenOrderQuantity" : 2,
  "w2StockStatus" : "w2StockStatus",
  "w3OnHandQuantity" : 4,
  "onHandQuantity" : 8,
  "onHandQuantityCases" : 5,
  "seasonalItem" : "seasonalItem",
  "topUp" : false,
  "allocationSort" : "allocationSort",
  "serialCode" : "serialCode",
  "unallocatableQuantityPallets" : 9,
  "maxInterim" : 1,
  "openPOQuantity" : 3,
  "vendorPrice" : 6.87805222012787620400331434211693704128265380859375,
  "estimatedCases" : 8,
  "majorGroupId" : 2,
  "lotControlFlag" : "lotControlFlag",
  "availableQuantity" : 6,
  "openPOQuantityInnerPacks" : 4,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "warehouse3Id" : 1,
  "w3InFulfillmentProcessQuantity" : 1,
  "summaryCodeId" : 3,
  "inFulfillmentProcessQuantityCases" : 7,
  "w1OpenOrderQuantity" : 3,
  "w1EstimatedInnerPacks" : 8,
  "w2OnHandQuantity" : 4,
  "weightPerWrap" : 6.683562403749608193948006373830139636993408203125,
  "w5EstimatedInnerPacks" : 0,
  "vendorId" : 6,
  "w3StockStatus" : "w3StockStatus",
  "buyerId" : 2,
  "secure" : "secure",
  "w5DamagedQuantity" : 5,
  "w5UnavailableQuantity" : 9,
  "barcodeField" : "barcodeField",
  "w2AvailableQuantity" : 0,
  "podRevDate" : "podRevDate",
  "commodityCode" : "commodityCode",
  "pickImage" : "pickImage",
  "orderableQuantityPallets" : 8,
  "itemDescription" : "itemDescription",
  "quantityPerInnerPack" : 8,
  "sector" : "sector",
  "innerPackBarcode" : "innerPackBarcode",
  "lobId" : 4,
  "alcoholType" : "alcoholType",
  "packingSlipDescription" : "packingSlipDescription",
  "w2DaysOnHand" : 4,
  "damagedQuantityCases" : 0,
  "backorder" : "backorder",
  "subGroupId" : 7,
  "overallStockStatus" : "overallStockStatus",
  "w4UnallocatableQuantity" : 8,
  "behaviorType" : "behaviorType",
  "alcoholContainer" : "alcoholContainer",
  "w2InFulfillmentProcessQuantity" : 7,
  "chargeCode" : "chargeCode",
  "w2EstimatedInnerPacks" : 1,
  "allocationField" : "allocationField",
  "w1InFulfillmentProcessQuantity" : 7,
  "w4NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4EstimatedInnerPacks" : 6,
  "w1DamagedQuantity" : 8,
  "pickNo" : "pickNo",
  "w2NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4DamagedQuantity" : 4,
  "w4OnHandQuantity" : 8,
  "damagedQuantityPallets" : 2,
  "unitsPerWrap" : 9,
  "onHandQuantityInnerPacks" : 4,
  "length" : 7.14353804701230643559028976596891880035400390625,
  "accountCodeId" : 6,
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "availableQuantityPallets" : 0,
  "warehouse1Id" : 5,
  "w5OnHandQuantity" : 7,
  "w2UnallocatableQuantity" : 2,
  "w1DaysOnHand" : 3,
  "caseBarcode" : "caseBarcode",
  "w3EstimatedInnerPacks" : 7,
  "alcoholNAMBCACode" : "alcoholNAMBCACode",
  "orderableQuantityInnerPacks" : 7,
  "openPOQuantityPallets" : 4,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "damagedQuantityInnerPacks" : 0,
  "absoluteMax" : "absoluteMax",
  "criticalAmount" : 1,
  "totalDemand" : 3,
  "unavailableQuantityCases" : 3,
  "w2OpenOrderQuantity" : 2,
  "unitCode" : "unitCode",
  "unavailableQuantityInnerPacks" : 0,
  "id" : 0,
  "w5EstimatedCases" : 6,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "w5OpenPOQuantity" : 4,
  "pricingPer" : "pricingPer",
  "w1UnallocatableQuantity" : 7,
  "productCodeId" : 9,
  "w3AvailableQuantity" : 3,
  "unallocatableQuantity" : 7,
  "maxCycle" : 7,
  "w3DamagedQuantity" : 5,
  "upc" : "upc",
  "allocationRule" : "allocationRule",
  "productIdTagSchemeId" : 5,
  "extrinsicNumber2" : 6,
  "extrinsicNumber1" : 3,
  "forwardItemMixingRule" : "forwardItemMixingRule",
  "extrinsicText1" : "extrinsicText1",
  "openOrderQuantityPallets" : 6,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "availableQuantityCases" : 9,
  "overallLeadTime" : 1,
  "unavailableQuantityPallets" : 1,
  "status" : "status",
  "legacyLowLevelContactId" : 5,
  "w2OrderableQuantity" : 0,
  "overallFixedReorderPoint" : 1,
  "outsideVendorId" : 5,
  "w4UnavailableQuantity" : 6,
  "extrinsicDecimal2" : 2.884162126668780246063761296682059764862060546875,
  "w4StockStatus" : "w4StockStatus",
  "damagedQuantity" : 0,
  "wrapCode" : "wrapCode",
  "alcoholCountry" : "alcoholCountry",
  "w5DaysOnHand" : 9,
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 5,
  "alcoholBrand" : "alcoholBrand",
  "unavailableQuantity" : 5,
  "assemblyInstructions" : "assemblyInstructions",
  "w3EstimatedPallets" : 7,
  "inFulfillmentProcessQuantityPallets" : 1,
  "w3OrderableQuantity" : 3,
  "extrinsicDecimal1" : 1.2846590061165319429647979632136411964893341064453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "w4InFulfillmentProcessQuantity" : 3,
  "openOrderQuantityCases" : 4,
  "w3OpenOrderQuantity" : 5,
  "w5StockStatus" : "w5StockStatus",
  "alcoholVintageYear" : "alcoholVintageYear",
  "openPOQuantityCases" : 6,
  "onHandQuantityPallets" : 8,
  "podOrderSuffix" : 9,
  "w1OnHandQuantity" : 3,
  "w1UnavailableQuantity" : 0,
  "w2UnavailableQuantity" : 6,
  "openOrderQuantityInnerPacks" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "width" : 0.885137473901165261480628032586537301540374755859375,
  "w4EstimatedCases" : 2,
  "w5UnallocatableQuantity" : 0,
  "estimatedPallets" : 9,
  "sellPrice" : 6.8468526983526398765889098285697400569915771484375,
  "storageLotMixingRule" : "storageLotMixingRule",
  "w5EstimatedPallets" : 7,
  "w3DaysOnHand" : 9,
  "forwardLotMixingRule" : "forwardLotMixingRule",
  "w1NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4OpenPOQuantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "quantityPerPallet" : 6,
  "warehouse4Id" : 9,
  "storageItemMixingRule" : "storageItemMixingRule",
  "palletBarcode" : "palletBarcode",
  "w5NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholRegion" : "alcoholRegion",
  "w2DamagedQuantity" : 0,
  "alcoholSCCCode" : "alcoholSCCCode",
  "overallDaysOnHand" : 3,
  "w5OpenOrderQuantity" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "w3OpenPOQuantity" : 5,
  "w2EstimatedCases" : 9,
  "receivingCriteriaSchemeId" : 3,
  "warehouseDisplayField" : "warehouseDisplayField",
  "w3UnallocatableQuantity" : 1,
  "itemSerialSchemeId" : 6,
  "w4OrderableQuantity" : 4,
  "availableQuantityInnerPacks" : 4,
  "warehouse5Id" : 0,
  "w1OpenPOQuantity" : 9,
  "vendorSKU" : "vendorSKU",
  "companionCode" : 7,
  "vendorPer" : "vendorPer",
  "unallocatableQuantityInnerPacks" : 9,
  "w1OrderableQuantity" : 5,
  "w4DaysOnHand" : 4,
  "w1EstimatedCases" : 3,
  "w2EstimatedPallets" : 6,
  "w2OpenPOQuantity" : 9,
  "quantityPerCase" : 9,
  "w4AvailableQuantity" : 1,
  "estimatedInnerPacks" : 0,
  "numericSortOrder" : 4
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Item]> 
     */
    public class func getItemByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Item]> {
        let path = "/beta/item/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Item]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an item by id
     
     - parameter itemId: (path) Id of the item to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemById(itemId itemId: Int32, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        getItemByIdWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an item by id
     - GET /beta/item/{itemId}
     - Returns the item identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "quantityType" : "quantityType",
  "w1AvailableQuantity" : 5,
  "inFulfillmentProcessQuantity" : 4,
  "w5InFulfillmentProcessQuantity" : 0,
  "lowStockContactId" : 1,
  "w3NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "unallocatableQuantityCases" : 4,
  "w3UnavailableQuantity" : 3,
  "alcoholContent" : 3.093745262666447448651751983561553061008453369140625,
  "shipSolo" : false,
  "orderableQuantity" : 3,
  "hazmat" : "hazmat",
  "orderableQuantityCases" : 8,
  "nextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "height" : 7.05877035158235610623478351044468581676483154296875,
  "w4EstimatedPallets" : 8,
  "inFulfillmentProcessQuantityInnerPacks" : 6,
  "openOrderQuantity" : 7,
  "primaryImage" : "primaryImage",
  "isAlcohol" : false,
  "w3EstimatedCases" : 7,
  "w5OrderableQuantity" : 0,
  "w1EstimatedPallets" : 2,
  "w1StockStatus" : "w1StockStatus",
  "warehouse2Id" : 4,
  "alcoholUPCCode" : "alcoholUPCCode",
  "asnRule" : "asnRule",
  "w5AvailableQuantity" : 2,
  "w4OpenOrderQuantity" : 2,
  "w2StockStatus" : "w2StockStatus",
  "w3OnHandQuantity" : 4,
  "onHandQuantity" : 8,
  "onHandQuantityCases" : 5,
  "seasonalItem" : "seasonalItem",
  "topUp" : false,
  "allocationSort" : "allocationSort",
  "serialCode" : "serialCode",
  "unallocatableQuantityPallets" : 9,
  "maxInterim" : 1,
  "openPOQuantity" : 3,
  "vendorPrice" : 6.87805222012787620400331434211693704128265380859375,
  "estimatedCases" : 8,
  "majorGroupId" : 2,
  "lotControlFlag" : "lotControlFlag",
  "availableQuantity" : 6,
  "openPOQuantityInnerPacks" : 4,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+00:00",
  "warehouse3Id" : 1,
  "w3InFulfillmentProcessQuantity" : 1,
  "summaryCodeId" : 3,
  "inFulfillmentProcessQuantityCases" : 7,
  "w1OpenOrderQuantity" : 3,
  "w1EstimatedInnerPacks" : 8,
  "w2OnHandQuantity" : 4,
  "weightPerWrap" : 6.683562403749608193948006373830139636993408203125,
  "w5EstimatedInnerPacks" : 0,
  "vendorId" : 6,
  "w3StockStatus" : "w3StockStatus",
  "buyerId" : 2,
  "secure" : "secure",
  "w5DamagedQuantity" : 5,
  "w5UnavailableQuantity" : 9,
  "barcodeField" : "barcodeField",
  "w2AvailableQuantity" : 0,
  "podRevDate" : "podRevDate",
  "commodityCode" : "commodityCode",
  "pickImage" : "pickImage",
  "orderableQuantityPallets" : 8,
  "itemDescription" : "itemDescription",
  "quantityPerInnerPack" : 8,
  "sector" : "sector",
  "innerPackBarcode" : "innerPackBarcode",
  "lobId" : 4,
  "alcoholType" : "alcoholType",
  "packingSlipDescription" : "packingSlipDescription",
  "w2DaysOnHand" : 4,
  "damagedQuantityCases" : 0,
  "backorder" : "backorder",
  "subGroupId" : 7,
  "overallStockStatus" : "overallStockStatus",
  "w4UnallocatableQuantity" : 8,
  "behaviorType" : "behaviorType",
  "alcoholContainer" : "alcoholContainer",
  "w2InFulfillmentProcessQuantity" : 7,
  "chargeCode" : "chargeCode",
  "w2EstimatedInnerPacks" : 1,
  "allocationField" : "allocationField",
  "w1InFulfillmentProcessQuantity" : 7,
  "w4NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4EstimatedInnerPacks" : 6,
  "w1DamagedQuantity" : 8,
  "pickNo" : "pickNo",
  "w2NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4DamagedQuantity" : 4,
  "w4OnHandQuantity" : 8,
  "damagedQuantityPallets" : 2,
  "unitsPerWrap" : 9,
  "onHandQuantityInnerPacks" : 4,
  "length" : 7.14353804701230643559028976596891880035400390625,
  "accountCodeId" : 6,
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "availableQuantityPallets" : 0,
  "warehouse1Id" : 5,
  "w5OnHandQuantity" : 7,
  "w2UnallocatableQuantity" : 2,
  "w1DaysOnHand" : 3,
  "caseBarcode" : "caseBarcode",
  "w3EstimatedInnerPacks" : 7,
  "alcoholNAMBCACode" : "alcoholNAMBCACode",
  "orderableQuantityInnerPacks" : 7,
  "openPOQuantityPallets" : 4,
  "voidDate" : "2000-01-23T04:56:07.000+00:00",
  "damagedQuantityInnerPacks" : 0,
  "absoluteMax" : "absoluteMax",
  "criticalAmount" : 1,
  "totalDemand" : 3,
  "unavailableQuantityCases" : 3,
  "w2OpenOrderQuantity" : 2,
  "unitCode" : "unitCode",
  "unavailableQuantityInnerPacks" : 0,
  "id" : 0,
  "w5EstimatedCases" : 6,
  "sku" : "sku",
  "alcoholState" : "alcoholState",
  "w5OpenPOQuantity" : 4,
  "pricingPer" : "pricingPer",
  "w1UnallocatableQuantity" : 7,
  "productCodeId" : 9,
  "w3AvailableQuantity" : 3,
  "unallocatableQuantity" : 7,
  "maxCycle" : 7,
  "w3DamagedQuantity" : 5,
  "upc" : "upc",
  "allocationRule" : "allocationRule",
  "productIdTagSchemeId" : 5,
  "extrinsicNumber2" : 6,
  "extrinsicNumber1" : 3,
  "forwardItemMixingRule" : "forwardItemMixingRule",
  "extrinsicText1" : "extrinsicText1",
  "openOrderQuantityPallets" : 6,
  "extrinsicText3" : "extrinsicText3",
  "extrinsicText2" : "extrinsicText2",
  "availableQuantityCases" : 9,
  "overallLeadTime" : 1,
  "unavailableQuantityPallets" : 1,
  "status" : "status",
  "legacyLowLevelContactId" : 5,
  "w2OrderableQuantity" : 0,
  "overallFixedReorderPoint" : 1,
  "outsideVendorId" : 5,
  "w4UnavailableQuantity" : 6,
  "extrinsicDecimal2" : 2.884162126668780246063761296682059764862060546875,
  "w4StockStatus" : "w4StockStatus",
  "damagedQuantity" : 0,
  "wrapCode" : "wrapCode",
  "alcoholCountry" : "alcoholCountry",
  "w5DaysOnHand" : 9,
  "additionalDescription" : "additionalDescription",
  "lowStockCodeId" : 5,
  "alcoholBrand" : "alcoholBrand",
  "unavailableQuantity" : 5,
  "assemblyInstructions" : "assemblyInstructions",
  "w3EstimatedPallets" : 7,
  "inFulfillmentProcessQuantityPallets" : 1,
  "w3OrderableQuantity" : 3,
  "extrinsicDecimal1" : 1.2846590061165319429647979632136411964893341064453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "w4InFulfillmentProcessQuantity" : 3,
  "openOrderQuantityCases" : 4,
  "w3OpenOrderQuantity" : 5,
  "w5StockStatus" : "w5StockStatus",
  "alcoholVintageYear" : "alcoholVintageYear",
  "openPOQuantityCases" : 6,
  "onHandQuantityPallets" : 8,
  "podOrderSuffix" : 9,
  "w1OnHandQuantity" : 3,
  "w1UnavailableQuantity" : 0,
  "w2UnavailableQuantity" : 6,
  "openOrderQuantityInnerPacks" : 1,
  "requiresProductionLot" : "requiresProductionLot",
  "casebreakEnabled" : "casebreakEnabled",
  "width" : 0.885137473901165261480628032586537301540374755859375,
  "w4EstimatedCases" : 2,
  "w5UnallocatableQuantity" : 0,
  "estimatedPallets" : 9,
  "sellPrice" : 6.8468526983526398765889098285697400569915771484375,
  "storageLotMixingRule" : "storageLotMixingRule",
  "w5EstimatedPallets" : 7,
  "w3DaysOnHand" : 9,
  "forwardLotMixingRule" : "forwardLotMixingRule",
  "w1NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "w4OpenPOQuantity" : 9,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "quantityPerPallet" : 6,
  "warehouse4Id" : 9,
  "storageItemMixingRule" : "storageItemMixingRule",
  "palletBarcode" : "palletBarcode",
  "w5NextRequestedDeliveryDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholRegion" : "alcoholRegion",
  "w2DamagedQuantity" : 0,
  "alcoholSCCCode" : "alcoholSCCCode",
  "overallDaysOnHand" : 3,
  "w5OpenOrderQuantity" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "w3OpenPOQuantity" : 5,
  "w2EstimatedCases" : 9,
  "receivingCriteriaSchemeId" : 3,
  "warehouseDisplayField" : "warehouseDisplayField",
  "w3UnallocatableQuantity" : 1,
  "itemSerialSchemeId" : 6,
  "w4OrderableQuantity" : 4,
  "availableQuantityInnerPacks" : 4,
  "warehouse5Id" : 0,
  "w1OpenPOQuantity" : 9,
  "vendorSKU" : "vendorSKU",
  "companionCode" : 7,
  "vendorPer" : "vendorPer",
  "unallocatableQuantityInnerPacks" : 9,
  "w1OrderableQuantity" : 5,
  "w4DaysOnHand" : 4,
  "w1EstimatedCases" : 3,
  "w2EstimatedPallets" : 6,
  "w2OpenPOQuantity" : 9,
  "quantityPerCase" : 9,
  "w4AvailableQuantity" : 1,
  "estimatedInnerPacks" : 0,
  "numericSortOrder" : 4
}}]
     
     - parameter itemId: (path) Id of the item to be returned. 

     - returns: RequestBuilder<Item> 
     */
    public class func getItemByIdWithRequestBuilder(itemId itemId: Int32) -> RequestBuilder<Item> {
        var path = "/beta/item/{itemId}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an item.
     
     - parameter itemId: (path) Id of the item to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemTags(itemId itemId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemTagsWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an item.
     - GET /beta/item/{itemId}/tag
     - Get all existing item tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemTagsWithRequestBuilder(itemId itemId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an item
     
     - parameter body: (body) Item to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItem(body body: Item, completion: ((error: ErrorType?) -> Void)) {
        updateItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an item
     - PUT /beta/item
     - Updates an existing item using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Item to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemWithRequestBuilder(body body: Item) -> RequestBuilder<Void> {
        let path = "/beta/item"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an item custom fields
     
     - parameter body: (body) Item to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemCustomFields(body body: Item, completion: ((error: ErrorType?) -> Void)) {
        updateItemCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an item custom fields
     - PUT /beta/item/customFields
     - Updates an existing item custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Item to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemCustomFieldsWithRequestBuilder(body body: Item) -> RequestBuilder<Void> {
        let path = "/beta/item/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
