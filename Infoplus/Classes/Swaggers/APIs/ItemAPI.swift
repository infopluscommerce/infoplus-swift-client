//
// ItemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemAPI: APIBase {
    /**
     
     Create an item
     
     - parameter body: (body) Item to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItem(body body: Item, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        addItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an item
     
     - POST /beta/item
     - Inserts a new item using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "inFulfillmentProcessQuantity" : 123,
  "alcoholNAMBCACode" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "lowStockContactId" : 123,
  "absoluteMax" : "aeiou",
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "shipSolo" : true,
  "orderableQuantity" : 123,
  "unitCode" : "aeiou",
  "hazmat" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "pricingPer" : "aeiou",
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "productCodeId" : 123,
  "openOrderQuantity" : 123,
  "isAlcohol" : true,
  "unallocatableQuantity" : 123,
  "maxCycle" : 123,
  "upc" : "aeiou",
  "allocationRule" : "aeiou",
  "productIdTagSchemeId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "forwardItemMixingRule" : "aeiou",
  "extrinsicText1" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "onHandQuantity" : 123,
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "legacyLowLevelContactId" : 123,
  "overallFixedReorderPoint" : 123,
  "seasonalItem" : "aeiou",
  "topUp" : true,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "damagedQuantity" : 123,
  "wrapCode" : "aeiou",
  "alcoholCountry" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "openPOQuantity" : 123,
  "unavailableQuantity" : 123,
  "vendorPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "majorGroupId" : 123,
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "availableQuantity" : 123,
  "podOrderSuffix" : 123,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+0000",
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "summaryCodeId" : 123,
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "sellPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "storageLotMixingRule" : "aeiou",
  "buyerId" : 123,
  "secure" : "aeiou",
  "forwardLotMixingRule" : "aeiou",
  "barcodeField" : "aeiou",
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "lobId" : 123,
  "alcoholType" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "compCode" : 123,
  "storageItemMixingRule" : "aeiou",
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "subGroupId" : 123,
  "overallStockStatus" : "aeiou",
  "alcoholRegion" : "aeiou",
  "alcoholContainer" : "aeiou",
  "chargeCode" : "aeiou",
  "alcoholSCCCode" : "aeiou",
  "overallDaysOnHand" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "pickNo" : "aeiou",
  "warehouseDisplayField" : "aeiou",
  "unitsPerWrap" : 123,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "accountCodeId" : 123,
  "alcoholUNIMERCCode" : "aeiou",
  "vendorSKU" : "aeiou",
  "vendorPer" : "aeiou",
  "numericSortOrder" : 123
}}]
     
     - parameter body: (body) Item to be inserted. 

     - returns: RequestBuilder<Item> 
     */
    public class func addItemWithRequestBuilder(body body: Item) -> RequestBuilder<Item> {
        let path = "/beta/item"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new audit for an item
     
     - parameter itemId: (path) Id of the item to add an audit to 
     - parameter itemAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemAudit(itemId itemId: Int, itemAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemAuditWithRequestBuilder(itemId: itemId, itemAudit: itemAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new audit for an item
     
     - PUT /beta/item/{itemId}/audit/{itemAudit}
     - Adds an audit to an existing item.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to add an audit to 
     - parameter itemAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemAuditWithRequestBuilder(itemId itemId: Int, itemAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/audit/{itemAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemAudit}", withString: "\(itemAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new tags for an item.
     
     - parameter itemId: (path) Id of the item to add a tag to 
     - parameter itemTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemTag(itemId itemId: Int, itemTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemTagWithRequestBuilder(itemId: itemId, itemTag: itemTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new tags for an item.
     
     - PUT /beta/item/{itemId}/tag/{itemTag}
     - Adds a tag to an existing item.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to add a tag to 
     - parameter itemTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemTagWithRequestBuilder(itemId itemId: Int, itemTag: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/tag/{itemTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemTag}", withString: "\(itemTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an item
     
     - parameter itemId: (path) Id of the item to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItem(itemId itemId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteItemWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an item
     
     - DELETE /beta/item/{itemId}
     - Deletes the item identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemWithRequestBuilder(itemId itemId: Int) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a tag for an item.
     
     - parameter itemId: (path) Id of the item to remove tag from 
     - parameter itemTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemTag(itemId itemId: Int, itemTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemTagWithRequestBuilder(itemId: itemId, itemTag: itemTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a tag for an item.
     
     - DELETE /beta/item/{itemId}/tag/{itemTag}
     - Deletes an existing item tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to remove tag from 
     - parameter itemTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemTagWithRequestBuilder(itemId itemId: Int, itemTag: String) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/tag/{itemTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemTag}", withString: "\(itemTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get an item by SKU
     
     - parameter lobId: (query) lobId of the item to be returned. 
     - parameter sku: (query) sku of the item to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBySKU(lobId lobId: Int, sku: String, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        getBySKUWithRequestBuilder(lobId: lobId, sku: sku).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an item by SKU
     
     - GET /beta/item/getBySKU
     - Returns the item identified by the specified parameters.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "inFulfillmentProcessQuantity" : 123,
  "alcoholNAMBCACode" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "lowStockContactId" : 123,
  "absoluteMax" : "aeiou",
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "shipSolo" : true,
  "orderableQuantity" : 123,
  "unitCode" : "aeiou",
  "hazmat" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "pricingPer" : "aeiou",
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "productCodeId" : 123,
  "openOrderQuantity" : 123,
  "isAlcohol" : true,
  "unallocatableQuantity" : 123,
  "maxCycle" : 123,
  "upc" : "aeiou",
  "allocationRule" : "aeiou",
  "productIdTagSchemeId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "forwardItemMixingRule" : "aeiou",
  "extrinsicText1" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "onHandQuantity" : 123,
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "legacyLowLevelContactId" : 123,
  "overallFixedReorderPoint" : 123,
  "seasonalItem" : "aeiou",
  "topUp" : true,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "damagedQuantity" : 123,
  "wrapCode" : "aeiou",
  "alcoholCountry" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "openPOQuantity" : 123,
  "unavailableQuantity" : 123,
  "vendorPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "majorGroupId" : 123,
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "availableQuantity" : 123,
  "podOrderSuffix" : 123,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+0000",
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "summaryCodeId" : 123,
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "sellPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "storageLotMixingRule" : "aeiou",
  "buyerId" : 123,
  "secure" : "aeiou",
  "forwardLotMixingRule" : "aeiou",
  "barcodeField" : "aeiou",
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "lobId" : 123,
  "alcoholType" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "compCode" : 123,
  "storageItemMixingRule" : "aeiou",
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "subGroupId" : 123,
  "overallStockStatus" : "aeiou",
  "alcoholRegion" : "aeiou",
  "alcoholContainer" : "aeiou",
  "chargeCode" : "aeiou",
  "alcoholSCCCode" : "aeiou",
  "overallDaysOnHand" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "pickNo" : "aeiou",
  "warehouseDisplayField" : "aeiou",
  "unitsPerWrap" : 123,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "accountCodeId" : 123,
  "alcoholUNIMERCCode" : "aeiou",
  "vendorSKU" : "aeiou",
  "vendorPer" : "aeiou",
  "numericSortOrder" : 123
}}]
     
     - parameter lobId: (query) lobId of the item to be returned. 
     - parameter sku: (query) sku of the item to be returned. 

     - returns: RequestBuilder<Item> 
     */
    public class func getBySKUWithRequestBuilder(lobId lobId: Int, sku: String) -> RequestBuilder<Item> {
        let path = "/beta/item/getBySKU"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "lobId": lobId,
            "sku": sku
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a duplicated an item by id
     
     - parameter itemId: (path) Id of the item to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemById(itemId itemId: Int, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        getDuplicateItemByIdWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an item by id
     
     - GET /beta/item/duplicate/{itemId}
     - Returns a duplicated item identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "inFulfillmentProcessQuantity" : 123,
  "alcoholNAMBCACode" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "lowStockContactId" : 123,
  "absoluteMax" : "aeiou",
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "shipSolo" : true,
  "orderableQuantity" : 123,
  "unitCode" : "aeiou",
  "hazmat" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "pricingPer" : "aeiou",
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "productCodeId" : 123,
  "openOrderQuantity" : 123,
  "isAlcohol" : true,
  "unallocatableQuantity" : 123,
  "maxCycle" : 123,
  "upc" : "aeiou",
  "allocationRule" : "aeiou",
  "productIdTagSchemeId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "forwardItemMixingRule" : "aeiou",
  "extrinsicText1" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "onHandQuantity" : 123,
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "legacyLowLevelContactId" : 123,
  "overallFixedReorderPoint" : 123,
  "seasonalItem" : "aeiou",
  "topUp" : true,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "damagedQuantity" : 123,
  "wrapCode" : "aeiou",
  "alcoholCountry" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "openPOQuantity" : 123,
  "unavailableQuantity" : 123,
  "vendorPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "majorGroupId" : 123,
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "availableQuantity" : 123,
  "podOrderSuffix" : 123,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+0000",
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "summaryCodeId" : 123,
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "sellPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "storageLotMixingRule" : "aeiou",
  "buyerId" : 123,
  "secure" : "aeiou",
  "forwardLotMixingRule" : "aeiou",
  "barcodeField" : "aeiou",
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "lobId" : 123,
  "alcoholType" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "compCode" : 123,
  "storageItemMixingRule" : "aeiou",
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "subGroupId" : 123,
  "overallStockStatus" : "aeiou",
  "alcoholRegion" : "aeiou",
  "alcoholContainer" : "aeiou",
  "chargeCode" : "aeiou",
  "alcoholSCCCode" : "aeiou",
  "overallDaysOnHand" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "pickNo" : "aeiou",
  "warehouseDisplayField" : "aeiou",
  "unitsPerWrap" : 123,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "accountCodeId" : 123,
  "alcoholUNIMERCCode" : "aeiou",
  "vendorSKU" : "aeiou",
  "vendorPer" : "aeiou",
  "numericSortOrder" : 123
}}]
     
     - parameter itemId: (path) Id of the item to be duplicated. 

     - returns: RequestBuilder<Item> 
     */
    public class func getDuplicateItemByIdWithRequestBuilder(itemId itemId: Int) -> RequestBuilder<Item> {
        var path = "/beta/item/duplicate/{itemId}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search items by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Item]?, error: ErrorType?) -> Void)) {
        getItemByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search items by filter
     
     - GET /beta/item/search
     - Returns the list of items that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "inFulfillmentProcessQuantity" : 123,
  "alcoholNAMBCACode" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "lowStockContactId" : 123,
  "absoluteMax" : "aeiou",
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "shipSolo" : true,
  "orderableQuantity" : 123,
  "unitCode" : "aeiou",
  "hazmat" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "pricingPer" : "aeiou",
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "productCodeId" : 123,
  "openOrderQuantity" : 123,
  "isAlcohol" : true,
  "unallocatableQuantity" : 123,
  "maxCycle" : 123,
  "upc" : "aeiou",
  "allocationRule" : "aeiou",
  "productIdTagSchemeId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "forwardItemMixingRule" : "aeiou",
  "extrinsicText1" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "onHandQuantity" : 123,
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "legacyLowLevelContactId" : 123,
  "overallFixedReorderPoint" : 123,
  "seasonalItem" : "aeiou",
  "topUp" : true,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "damagedQuantity" : 123,
  "wrapCode" : "aeiou",
  "alcoholCountry" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "openPOQuantity" : 123,
  "unavailableQuantity" : 123,
  "vendorPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "majorGroupId" : 123,
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "availableQuantity" : 123,
  "podOrderSuffix" : 123,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+0000",
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "summaryCodeId" : 123,
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "sellPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "storageLotMixingRule" : "aeiou",
  "buyerId" : 123,
  "secure" : "aeiou",
  "forwardLotMixingRule" : "aeiou",
  "barcodeField" : "aeiou",
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "lobId" : 123,
  "alcoholType" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "compCode" : 123,
  "storageItemMixingRule" : "aeiou",
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "subGroupId" : 123,
  "overallStockStatus" : "aeiou",
  "alcoholRegion" : "aeiou",
  "alcoholContainer" : "aeiou",
  "chargeCode" : "aeiou",
  "alcoholSCCCode" : "aeiou",
  "overallDaysOnHand" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "pickNo" : "aeiou",
  "warehouseDisplayField" : "aeiou",
  "unitsPerWrap" : 123,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "accountCodeId" : 123,
  "alcoholUNIMERCCode" : "aeiou",
  "vendorSKU" : "aeiou",
  "vendorPer" : "aeiou",
  "numericSortOrder" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Item]> 
     */
    public class func getItemByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Item]> {
        let path = "/beta/item/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Item]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an item by id
     
     - parameter itemId: (path) Id of the item to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemById(itemId itemId: Int, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        getItemByIdWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an item by id
     
     - GET /beta/item/{itemId}
     - Returns the item identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "inFulfillmentProcessQuantity" : 123,
  "alcoholNAMBCACode" : "aeiou",
  "voidDate" : "2000-01-23T04:56:07.000+0000",
  "lowStockContactId" : 123,
  "absoluteMax" : "aeiou",
  "criticalAmount" : 123,
  "alcoholContent" : 1.3579000000000001069366817318950779736042022705078125,
  "shipSolo" : true,
  "orderableQuantity" : 123,
  "unitCode" : "aeiou",
  "hazmat" : "aeiou",
  "id" : 123,
  "sku" : "aeiou",
  "alcoholState" : "aeiou",
  "pricingPer" : "aeiou",
  "height" : 1.3579000000000001069366817318950779736042022705078125,
  "productCodeId" : 123,
  "openOrderQuantity" : 123,
  "isAlcohol" : true,
  "unallocatableQuantity" : 123,
  "maxCycle" : 123,
  "upc" : "aeiou",
  "allocationRule" : "aeiou",
  "productIdTagSchemeId" : 123,
  "extrinsicNumber2" : 123,
  "extrinsicNumber1" : 123,
  "forwardItemMixingRule" : "aeiou",
  "extrinsicText1" : "aeiou",
  "extrinsicText3" : "aeiou",
  "extrinsicText2" : "aeiou",
  "alcoholUPCCode" : "aeiou",
  "onHandQuantity" : 123,
  "overallLeadTime" : 123,
  "status" : "aeiou",
  "legacyLowLevelContactId" : 123,
  "overallFixedReorderPoint" : 123,
  "seasonalItem" : "aeiou",
  "topUp" : true,
  "serialCode" : "aeiou",
  "extrinsicDecimal2" : 1.3579000000000001069366817318950779736042022705078125,
  "maxInterim" : 123,
  "damagedQuantity" : 123,
  "wrapCode" : "aeiou",
  "alcoholCountry" : "aeiou",
  "additionalDescription" : "aeiou",
  "lowStockCodeId" : 123,
  "alcoholBrand" : "aeiou",
  "openPOQuantity" : 123,
  "unavailableQuantity" : 123,
  "vendorPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "majorGroupId" : 123,
  "lotControlFlag" : "aeiou",
  "extrinsicDecimal1" : 1.3579000000000001069366817318950779736042022705078125,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "alcoholVintageYear" : "aeiou",
  "availableQuantity" : 123,
  "podOrderSuffix" : 123,
  "inventoryUpdateTimestamp" : "2000-01-23T04:56:07.000+0000",
  "requiresProductionLot" : "aeiou",
  "casebreakEnabled" : "aeiou",
  "width" : 1.3579000000000001069366817318950779736042022705078125,
  "summaryCodeId" : 123,
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "vendorId" : 123,
  "sellPrice" : 1.3579000000000001069366817318950779736042022705078125,
  "storageLotMixingRule" : "aeiou",
  "buyerId" : 123,
  "secure" : "aeiou",
  "forwardLotMixingRule" : "aeiou",
  "barcodeField" : "aeiou",
  "podRevDate" : "aeiou",
  "commodityCode" : "aeiou",
  "itemDescription" : "aeiou",
  "sector" : "aeiou",
  "lobId" : 123,
  "alcoholType" : "aeiou",
  "packingSlipDescription" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "compCode" : 123,
  "storageItemMixingRule" : "aeiou",
  "backorder" : "aeiou",
  "outsideVendor" : 123,
  "subGroupId" : 123,
  "overallStockStatus" : "aeiou",
  "alcoholRegion" : "aeiou",
  "alcoholContainer" : "aeiou",
  "chargeCode" : "aeiou",
  "alcoholSCCCode" : "aeiou",
  "overallDaysOnHand" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "pickNo" : "aeiou",
  "warehouseDisplayField" : "aeiou",
  "unitsPerWrap" : 123,
  "length" : 1.3579000000000001069366817318950779736042022705078125,
  "accountCodeId" : 123,
  "alcoholUNIMERCCode" : "aeiou",
  "vendorSKU" : "aeiou",
  "vendorPer" : "aeiou",
  "numericSortOrder" : 123
}}]
     
     - parameter itemId: (path) Id of the item to be returned. 

     - returns: RequestBuilder<Item> 
     */
    public class func getItemByIdWithRequestBuilder(itemId itemId: Int) -> RequestBuilder<Item> {
        var path = "/beta/item/{itemId}"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Item>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get the tags for an item.
     
     - parameter itemId: (path) Id of the item to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemTags(itemId itemId: Int, completion: ((error: ErrorType?) -> Void)) {
        getItemTagsWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Get the tags for an item.
     
     - GET /beta/item/{itemId}/tag
     - Get all existing item tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemId: (path) Id of the item to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemTagsWithRequestBuilder(itemId itemId: Int) -> RequestBuilder<Void> {
        var path = "/beta/item/{itemId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemId}", withString: "\(itemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an item
     
     - parameter body: (body) Item to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItem(body body: Item, completion: ((error: ErrorType?) -> Void)) {
        updateItemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an item
     
     - PUT /beta/item
     - Updates an existing item using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Item to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemWithRequestBuilder(body body: Item) -> RequestBuilder<Void> {
        let path = "/beta/item"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an item custom fields
     
     - parameter body: (body) Item to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemCustomFields(body body: Item, completion: ((error: ErrorType?) -> Void)) {
        updateItemCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an item custom fields
     
     - PUT /beta/item/customFields
     - Updates an existing item custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Item to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemCustomFieldsWithRequestBuilder(body body: Item) -> RequestBuilder<Void> {
        let path = "/beta/item/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
