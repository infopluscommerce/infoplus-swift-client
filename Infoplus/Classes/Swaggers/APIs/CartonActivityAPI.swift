//
// CartonActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartonActivityAPI: APIBase {
    /**
     Create a cartonActivity
     
     - parameter body: (body) CartonActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonActivity(body body: CartonActivity, completion: ((data: CartonActivity?, error: ErrorType?) -> Void)) {
        addCartonActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a cartonActivity
     - POST /beta/cartonActivity
     - Inserts a new cartonActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "estimatedZone" : "estimatedZone",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 6,
  "omsCustomerId" : 6,
  "shipToStreet" : "shipToStreet",
  "parcelAccountNo" : "parcelAccountNo",
  "division" : 6,
  "orderStatusName" : "orderStatusName",
  "billToZip" : "billToZip",
  "shipToEmail" : "shipToEmail",
  "id" : 0,
  "billToStreet" : "billToStreet",
  "cartonModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "dim1In" : 9.301444243932575517419536481611430644989013671875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 5,
  "billToAttention" : "billToAttention",
  "subtotal" : 7.14353804701230643559028976596891880035400390625,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 3.093745262666447448651751983561553061008453369140625,
  "freight" : 3.557195227068097320710649000830017030239105224609375,
  "cartonCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "billToCompany" : "billToCompany",
  "taxOnFreight" : 0.885137473901165261480628032586537301540374755859375,
  "shipToCompany" : "shipToCompany",
  "warehouseName" : "warehouseName",
  "numberOfCartons" : 2,
  "cartonNo" : 5,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.51918095101838179772357761976309120655059814453125,
  "numberOfPallets" : 2,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 6.96511769763884558415156789124011993408203125,
  "shipCode" : "shipCode",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "trackingNo" : "trackingNo",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 4.6523964329332461176136348512955009937286376953125,
  "priorityCode" : 5,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "packingSlipTemplateId" : 3,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 3,
  "orderConfirmationEmailTemplateId" : 5,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 9,
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 0.10263654006109401706225980888120830059051513671875,
  "manifestId" : 4,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 6,
  "orderSourceId" : 9,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "totalPaid" : 3.35319334701124294184637619764544069766998291015625,
  "orderSourceName" : "orderSourceName",
  "tax" : 7.05877035158235610623478351044468581676483154296875,
  "dim3In" : 2.027123023002321833274663731572218239307403564453125,
  "shipped" : false,
  "groupOrderId" : 7.4577447736837658709418974467553198337554931640625,
  "orderInvoiceTemplateId" : 0,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "billToPhone" : "billToPhone",
  "serviceTypeName" : "serviceTypeName",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "numberOfLineItems" : 6,
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "orderEstimatedWeightLbs" : 1.2846590061165319429647979632136411964893341064453125,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 3,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 8,
  "carrierServiceId" : 7,
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 5.94489560761401580890606055618263781070709228515625,
  "serviceTypeId" : "serviceTypeId",
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 6.70401929795003592715829654480330646038055419921875,
  "orderLoadProgramId" : 8,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "billingOption" : "billingOption",
  "dim2In" : 3.61607674925191080461672754609026014804840087890625,
  "omsOrderNo" : 9,
  "thirdPartyParcelAccountId" : 7,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 4
}}]
     
     - parameter body: (body) CartonActivity to be inserted. 

     - returns: RequestBuilder<CartonActivity> 
     */
    public class func addCartonActivityWithRequestBuilder(body body: CartonActivity) -> RequestBuilder<CartonActivity> {
        let path = "/beta/cartonActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CartonActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a cartonActivity
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to add an audit to 
     - parameter cartonActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonActivityAudit(cartonActivityId cartonActivityId: Int32, cartonActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addCartonActivityAuditWithRequestBuilder(cartonActivityId: cartonActivityId, cartonActivityAudit: cartonActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a cartonActivity
     - PUT /beta/cartonActivity/{cartonActivityId}/audit/{cartonActivityAudit}
     - Adds an audit to an existing cartonActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to add an audit to 
     - parameter cartonActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonActivityAuditWithRequestBuilder(cartonActivityId cartonActivityId: Int32, cartonActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonActivity/{cartonActivityId}/audit/{cartonActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityAudit}", withString: "\(cartonActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a cartonActivity
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonActivityFile(cartonActivityId cartonActivityId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addCartonActivityFileWithRequestBuilder(cartonActivityId: cartonActivityId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a cartonActivity
     - POST /beta/cartonActivity/{cartonActivityId}/file/{fileName}
     - Adds a file to an existing cartonActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonActivityFileWithRequestBuilder(cartonActivityId cartonActivityId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonActivity/{cartonActivityId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a cartonActivity.
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to add a tag to 
     - parameter cartonActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCartonActivityTag(cartonActivityId cartonActivityId: Int32, cartonActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addCartonActivityTagWithRequestBuilder(cartonActivityId: cartonActivityId, cartonActivityTag: cartonActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a cartonActivity.
     - PUT /beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}
     - Adds a tag to an existing cartonActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to add a tag to 
     - parameter cartonActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addCartonActivityTagWithRequestBuilder(cartonActivityId cartonActivityId: Int32, cartonActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityTag}", withString: "\(cartonActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a cartonActivity
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCartonActivity(cartonActivityId cartonActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonActivityWithRequestBuilder(cartonActivityId: cartonActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a cartonActivity
     - DELETE /beta/cartonActivity/{cartonActivityId}
     - Deletes the cartonActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonActivityWithRequestBuilder(cartonActivityId cartonActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonActivity/{cartonActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a cartonActivity.
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to remove tag from 
     - parameter cartonActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCartonActivityTag(cartonActivityId cartonActivityId: Int32, cartonActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonActivityTagWithRequestBuilder(cartonActivityId: cartonActivityId, cartonActivityTag: cartonActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a cartonActivity.
     - DELETE /beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}
     - Deletes an existing cartonActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to remove tag from 
     - parameter cartonActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonActivityTagWithRequestBuilder(cartonActivityId cartonActivityId: Int32, cartonActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/cartonActivity/{cartonActivityId}/tag/{cartonActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityTag}", withString: "\(cartonActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search cartonActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonActivityByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [CartonActivity]?, error: ErrorType?) -> Void)) {
        getCartonActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search cartonActivitys by filter
     - GET /beta/cartonActivity/search
     - Returns the list of cartonActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "estimatedZone" : "estimatedZone",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 6,
  "omsCustomerId" : 6,
  "shipToStreet" : "shipToStreet",
  "parcelAccountNo" : "parcelAccountNo",
  "division" : 6,
  "orderStatusName" : "orderStatusName",
  "billToZip" : "billToZip",
  "shipToEmail" : "shipToEmail",
  "id" : 0,
  "billToStreet" : "billToStreet",
  "cartonModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "dim1In" : 9.301444243932575517419536481611430644989013671875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 5,
  "billToAttention" : "billToAttention",
  "subtotal" : 7.14353804701230643559028976596891880035400390625,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 3.093745262666447448651751983561553061008453369140625,
  "freight" : 3.557195227068097320710649000830017030239105224609375,
  "cartonCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "billToCompany" : "billToCompany",
  "taxOnFreight" : 0.885137473901165261480628032586537301540374755859375,
  "shipToCompany" : "shipToCompany",
  "warehouseName" : "warehouseName",
  "numberOfCartons" : 2,
  "cartonNo" : 5,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.51918095101838179772357761976309120655059814453125,
  "numberOfPallets" : 2,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 6.96511769763884558415156789124011993408203125,
  "shipCode" : "shipCode",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "trackingNo" : "trackingNo",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 4.6523964329332461176136348512955009937286376953125,
  "priorityCode" : 5,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "packingSlipTemplateId" : 3,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 3,
  "orderConfirmationEmailTemplateId" : 5,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 9,
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 0.10263654006109401706225980888120830059051513671875,
  "manifestId" : 4,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 6,
  "orderSourceId" : 9,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "totalPaid" : 3.35319334701124294184637619764544069766998291015625,
  "orderSourceName" : "orderSourceName",
  "tax" : 7.05877035158235610623478351044468581676483154296875,
  "dim3In" : 2.027123023002321833274663731572218239307403564453125,
  "shipped" : false,
  "groupOrderId" : 7.4577447736837658709418974467553198337554931640625,
  "orderInvoiceTemplateId" : 0,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "billToPhone" : "billToPhone",
  "serviceTypeName" : "serviceTypeName",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "numberOfLineItems" : 6,
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "orderEstimatedWeightLbs" : 1.2846590061165319429647979632136411964893341064453125,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 3,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 8,
  "carrierServiceId" : 7,
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 5.94489560761401580890606055618263781070709228515625,
  "serviceTypeId" : "serviceTypeId",
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 6.70401929795003592715829654480330646038055419921875,
  "orderLoadProgramId" : 8,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "billingOption" : "billingOption",
  "dim2In" : 3.61607674925191080461672754609026014804840087890625,
  "omsOrderNo" : 9,
  "thirdPartyParcelAccountId" : 7,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 4
}, {
  "estimatedZone" : "estimatedZone",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 6,
  "omsCustomerId" : 6,
  "shipToStreet" : "shipToStreet",
  "parcelAccountNo" : "parcelAccountNo",
  "division" : 6,
  "orderStatusName" : "orderStatusName",
  "billToZip" : "billToZip",
  "shipToEmail" : "shipToEmail",
  "id" : 0,
  "billToStreet" : "billToStreet",
  "cartonModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "dim1In" : 9.301444243932575517419536481611430644989013671875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 5,
  "billToAttention" : "billToAttention",
  "subtotal" : 7.14353804701230643559028976596891880035400390625,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 3.093745262666447448651751983561553061008453369140625,
  "freight" : 3.557195227068097320710649000830017030239105224609375,
  "cartonCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "billToCompany" : "billToCompany",
  "taxOnFreight" : 0.885137473901165261480628032586537301540374755859375,
  "shipToCompany" : "shipToCompany",
  "warehouseName" : "warehouseName",
  "numberOfCartons" : 2,
  "cartonNo" : 5,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.51918095101838179772357761976309120655059814453125,
  "numberOfPallets" : 2,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 6.96511769763884558415156789124011993408203125,
  "shipCode" : "shipCode",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "trackingNo" : "trackingNo",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 4.6523964329332461176136348512955009937286376953125,
  "priorityCode" : 5,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "packingSlipTemplateId" : 3,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 3,
  "orderConfirmationEmailTemplateId" : 5,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 9,
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 0.10263654006109401706225980888120830059051513671875,
  "manifestId" : 4,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 6,
  "orderSourceId" : 9,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "totalPaid" : 3.35319334701124294184637619764544069766998291015625,
  "orderSourceName" : "orderSourceName",
  "tax" : 7.05877035158235610623478351044468581676483154296875,
  "dim3In" : 2.027123023002321833274663731572218239307403564453125,
  "shipped" : false,
  "groupOrderId" : 7.4577447736837658709418974467553198337554931640625,
  "orderInvoiceTemplateId" : 0,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "billToPhone" : "billToPhone",
  "serviceTypeName" : "serviceTypeName",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "numberOfLineItems" : 6,
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "orderEstimatedWeightLbs" : 1.2846590061165319429647979632136411964893341064453125,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 3,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 8,
  "carrierServiceId" : 7,
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 5.94489560761401580890606055618263781070709228515625,
  "serviceTypeId" : "serviceTypeId",
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 6.70401929795003592715829654480330646038055419921875,
  "orderLoadProgramId" : 8,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "billingOption" : "billingOption",
  "dim2In" : 3.61607674925191080461672754609026014804840087890625,
  "omsOrderNo" : 9,
  "thirdPartyParcelAccountId" : 7,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 4
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[CartonActivity]> 
     */
    public class func getCartonActivityByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[CartonActivity]> {
        let path = "/beta/cartonActivity/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[CartonActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a cartonActivity by id
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonActivityById(cartonActivityId cartonActivityId: Int32, completion: ((data: CartonActivity?, error: ErrorType?) -> Void)) {
        getCartonActivityByIdWithRequestBuilder(cartonActivityId: cartonActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a cartonActivity by id
     - GET /beta/cartonActivity/{cartonActivityId}
     - Returns the cartonActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "estimatedZone" : "estimatedZone",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 6,
  "omsCustomerId" : 6,
  "shipToStreet" : "shipToStreet",
  "parcelAccountNo" : "parcelAccountNo",
  "division" : 6,
  "orderStatusName" : "orderStatusName",
  "billToZip" : "billToZip",
  "shipToEmail" : "shipToEmail",
  "id" : 0,
  "billToStreet" : "billToStreet",
  "cartonModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "dim1In" : 9.301444243932575517419536481611430644989013671875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 5,
  "billToAttention" : "billToAttention",
  "subtotal" : 7.14353804701230643559028976596891880035400390625,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 3.093745262666447448651751983561553061008453369140625,
  "freight" : 3.557195227068097320710649000830017030239105224609375,
  "cartonCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "billToCompany" : "billToCompany",
  "taxOnFreight" : 0.885137473901165261480628032586537301540374755859375,
  "shipToCompany" : "shipToCompany",
  "warehouseName" : "warehouseName",
  "numberOfCartons" : 2,
  "cartonNo" : 5,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.51918095101838179772357761976309120655059814453125,
  "numberOfPallets" : 2,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 6.96511769763884558415156789124011993408203125,
  "shipCode" : "shipCode",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "trackingNo" : "trackingNo",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 4.6523964329332461176136348512955009937286376953125,
  "priorityCode" : 5,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "packingSlipTemplateId" : 3,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 3,
  "orderConfirmationEmailTemplateId" : 5,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 9,
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 0.10263654006109401706225980888120830059051513671875,
  "manifestId" : 4,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 6,
  "orderSourceId" : 9,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "totalPaid" : 3.35319334701124294184637619764544069766998291015625,
  "orderSourceName" : "orderSourceName",
  "tax" : 7.05877035158235610623478351044468581676483154296875,
  "dim3In" : 2.027123023002321833274663731572218239307403564453125,
  "shipped" : false,
  "groupOrderId" : 7.4577447736837658709418974467553198337554931640625,
  "orderInvoiceTemplateId" : 0,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "billToPhone" : "billToPhone",
  "serviceTypeName" : "serviceTypeName",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "numberOfLineItems" : 6,
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "orderEstimatedWeightLbs" : 1.2846590061165319429647979632136411964893341064453125,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 3,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 8,
  "carrierServiceId" : 7,
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 5.94489560761401580890606055618263781070709228515625,
  "serviceTypeId" : "serviceTypeId",
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 6.70401929795003592715829654480330646038055419921875,
  "orderLoadProgramId" : 8,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "billingOption" : "billingOption",
  "dim2In" : 3.61607674925191080461672754609026014804840087890625,
  "omsOrderNo" : 9,
  "thirdPartyParcelAccountId" : 7,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 4
}}]
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to be returned. 

     - returns: RequestBuilder<CartonActivity> 
     */
    public class func getCartonActivityByIdWithRequestBuilder(cartonActivityId cartonActivityId: Int32) -> RequestBuilder<CartonActivity> {
        var path = "/beta/cartonActivity/{cartonActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CartonActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a cartonActivity.
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonActivityTags(cartonActivityId cartonActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getCartonActivityTagsWithRequestBuilder(cartonActivityId: cartonActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a cartonActivity.
     - GET /beta/cartonActivity/{cartonActivityId}/tag
     - Get all existing cartonActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getCartonActivityTagsWithRequestBuilder(cartonActivityId cartonActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/cartonActivity/{cartonActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a cartonActivity by id
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateCartonActivityById(cartonActivityId cartonActivityId: Int32, completion: ((data: CartonActivity?, error: ErrorType?) -> Void)) {
        getDuplicateCartonActivityByIdWithRequestBuilder(cartonActivityId: cartonActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a cartonActivity by id
     - GET /beta/cartonActivity/duplicate/{cartonActivityId}
     - Returns a duplicated cartonActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "estimatedZone" : "estimatedZone",
  "priceLevel" : "priceLevel",
  "integrationPartnerId" : 6,
  "omsCustomerId" : 6,
  "shipToStreet" : "shipToStreet",
  "parcelAccountNo" : "parcelAccountNo",
  "division" : 6,
  "orderStatusName" : "orderStatusName",
  "billToZip" : "billToZip",
  "shipToEmail" : "shipToEmail",
  "id" : 0,
  "billToStreet" : "billToStreet",
  "cartonModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToState" : "shipToState",
  "branchId" : "branchId",
  "giftMessage" : "giftMessage",
  "costCenter" : "costCenter",
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "reqTypeName" : "reqTypeName",
  "orderMessage" : "orderMessage",
  "dim1In" : 9.301444243932575517419536481611430644989013671875,
  "firstShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shippingSystemName" : "shippingSystemName",
  "warehouseId" : 5,
  "billToAttention" : "billToAttention",
  "subtotal" : 7.14353804701230643559028976596891880035400390625,
  "integrationPartnerName" : "integrationPartnerName",
  "status" : "status",
  "alternateUsage" : "alternateUsage",
  "authorizationAmount" : 3.093745262666447448651751983561553061008453369140625,
  "freight" : 3.557195227068097320710649000830017030239105224609375,
  "cartonCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "billToCompany" : "billToCompany",
  "taxOnFreight" : 0.885137473901165261480628032586537301540374755859375,
  "shipToCompany" : "shipToCompany",
  "warehouseName" : "warehouseName",
  "numberOfCartons" : 2,
  "cartonNo" : 5,
  "shipToZip" : "shipToZip",
  "customerPONo" : "customerPONo",
  "lastShipDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToAttention" : "shipToAttention",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "distributionCharges" : 6.51918095101838179772357761976309120655059814453125,
  "numberOfPallets" : 2,
  "legacyRestrictionType" : "legacyRestrictionType",
  "shipToPhone" : "shipToPhone",
  "needByDate" : "2000-01-23T04:56:07.000+00:00",
  "orderWeightLbs" : 6.96511769763884558415156789124011993408203125,
  "shipCode" : "shipCode",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "orderModifyDate" : "2000-01-23T04:56:07.000+00:00",
  "authorizedBy" : "authorizedBy",
  "trackingNo" : "trackingNo",
  "holdCode" : "holdCode",
  "deliverOnDate" : "2000-01-23T04:56:07.000+00:00",
  "totalDiscount" : 4.6523964329332461176136348512955009937286376953125,
  "priorityCode" : 5,
  "completionStatus" : "completionStatus",
  "mediaCode" : "mediaCode",
  "customerOrderNo" : "customerOrderNo",
  "packingSlipTemplateId" : 3,
  "estimatedNumberOfPicks" : 7,
  "branchCustomerType" : "branchCustomerType",
  "totalQty" : 3,
  "orderConfirmationEmailTemplateId" : 5,
  "billToState" : "billToState",
  "fulfillmentProcessId" : 1,
  "billToCity" : "billToCity",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "shipToCity" : "shipToCity",
  "orderReason" : 9,
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "carrierName" : "carrierName",
  "leadPackageId" : "leadPackageId",
  "shipBy" : "2000-01-23T04:56:07.000+00:00",
  "shippingCharge" : 0.10263654006109401706225980888120830059051513671875,
  "manifestId" : 4,
  "distributionChannel" : "distributionChannel",
  "externalShippingSystemId" : 4,
  "lobId" : 6,
  "orderSourceId" : 9,
  "shipToStreet2" : "shipToStreet2",
  "batchNo" : "batchNo",
  "orderNo" : 1.46581298050294517310021547018550336360931396484375,
  "shipToStreet3" : "shipToStreet3",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "billToEmail" : "billToEmail",
  "totalPaid" : 3.35319334701124294184637619764544069766998291015625,
  "orderSourceName" : "orderSourceName",
  "tax" : 7.05877035158235610623478351044468581676483154296875,
  "dim3In" : 2.027123023002321833274663731572218239307403564453125,
  "shipped" : false,
  "groupOrderId" : 7.4577447736837658709418974467553198337554931640625,
  "orderInvoiceTemplateId" : 0,
  "billToCountry" : "billToCountry",
  "branchSector" : "branchSector",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "billToPhone" : "billToPhone",
  "serviceTypeName" : "serviceTypeName",
  "orderDate" : "2000-01-23T04:56:07.000+00:00",
  "numberOfLineItems" : 6,
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "orderEstimatedWeightLbs" : 1.2846590061165319429647979632136411964893341064453125,
  "priceMode" : "priceMode",
  "customFields" : {
    "key" : "{}"
  },
  "orderLoadProgramName" : "orderLoadProgramName",
  "stopBackOrders" : "stopBackOrders",
  "shipmentConfirmationEmailTemplateId" : 3,
  "orderStatus" : "orderStatus",
  "parcelAccountId" : 8,
  "carrierServiceId" : 7,
  "enteredBy" : "enteredBy",
  "orderShipDate" : "2000-01-23T04:56:07.000+00:00",
  "branchArea" : "branchArea",
  "orderCreateDate" : "2000-01-23T04:56:07.000+00:00",
  "shipVia" : "shipVia",
  "total" : 5.94489560761401580890606055618263781070709228515625,
  "serviceTypeId" : "serviceTypeId",
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "shipToCountry" : "shipToCountry",
  "balanceDue" : 6.70401929795003592715829654480330646038055419921875,
  "orderLoadProgramId" : 8,
  "alcoholOrderType" : "alcoholOrderType",
  "billToStreet2" : "billToStreet2",
  "billToStreet3" : "billToStreet3",
  "billingOption" : "billingOption",
  "dim2In" : 3.61607674925191080461672754609026014804840087890625,
  "omsOrderNo" : 9,
  "thirdPartyParcelAccountId" : 7,
  "distributionChannelName" : "distributionChannelName",
  "orderCode" : "orderCode",
  "carrierId" : 4
}}]
     
     - parameter cartonActivityId: (path) Id of the cartonActivity to be duplicated. 

     - returns: RequestBuilder<CartonActivity> 
     */
    public class func getDuplicateCartonActivityByIdWithRequestBuilder(cartonActivityId cartonActivityId: Int32) -> RequestBuilder<CartonActivity> {
        var path = "/beta/cartonActivity/duplicate/{cartonActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonActivityId}", withString: "\(cartonActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CartonActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a cartonActivity
     
     - parameter body: (body) CartonActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCartonActivity(body body: CartonActivity, completion: ((error: ErrorType?) -> Void)) {
        updateCartonActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a cartonActivity
     - PUT /beta/cartonActivity
     - Updates an existing cartonActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) CartonActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCartonActivityWithRequestBuilder(body body: CartonActivity) -> RequestBuilder<Void> {
        let path = "/beta/cartonActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
