//
// InventoryStorageActivityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class InventoryStorageActivityAPI: APIBase {
    /**
     Create an inventoryStorageActivity
     
     - parameter body: (body) InventoryStorageActivity to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addInventoryStorageActivity(body body: InventoryStorageActivity, completion: ((data: InventoryStorageActivity?, error: ErrorType?) -> Void)) {
        addInventoryStorageActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an inventoryStorageActivity
     - POST /beta/inventoryStorageActivity
     - Inserts a new inventoryStorageActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "warehouseLocationPriorityCode" : 3,
  "warehouseLocationFootprintHeight" : 9,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "alcoholTypeId" : 0,
  "estimatedPallets" : 3,
  "inventoryValue" : 2.027123023002321833274663731572218239307403564453125,
  "warehouseLocationOriginId" : 6,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 6,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 3,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 4.6523964329332461176136348512955009937286376953125,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 0,
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 5,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 9,
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 3,
  "alcoholContainerId" : 8,
  "importedRecordId" : 6,
  "itemId" : 5,
  "itemMajorGroup" : 1,
  "chargeRate" : 7.04836565559697003635619694250635802745819091796875,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "itemCubicFeet" : 5.94489560761401580890606055618263781070709228515625,
  "isMixedReceipts" : false,
  "itemSummaryCode" : 6,
  "warehouseLocationBehaviorTypeId" : 1,
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 1,
  "warehouseLocationLevel" : 8,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 7,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 1,
  "warehouseLocationOnline" : false,
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 9,
  "receiptCaseWeight" : 6.51918095101838179772357761976309120655059814453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "inventoryAgeDays" : 4,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 2,
  "address" : "address",
  "warehouseLocationCubicFeet" : 6.683562403749608193948006373830139636993408203125,
  "receiptQuantityPerInnerPack" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 7,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 7,
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "warehouseLocationFootprintId" : 4,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 7,
  "itemSubGroup" : 2,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter body: (body) InventoryStorageActivity to be inserted. 

     - returns: RequestBuilder<InventoryStorageActivity> 
     */
    public class func addInventoryStorageActivityWithRequestBuilder(body body: InventoryStorageActivity) -> RequestBuilder<InventoryStorageActivity> {
        let path = "/beta/inventoryStorageActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InventoryStorageActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an inventoryStorageActivity
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to add an audit to 
     - parameter inventoryStorageActivityAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addInventoryStorageActivityAudit(inventoryStorageActivityId inventoryStorageActivityId: Int32, inventoryStorageActivityAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addInventoryStorageActivityAuditWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId, inventoryStorageActivityAudit: inventoryStorageActivityAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an inventoryStorageActivity
     - PUT /beta/inventoryStorageActivity/{inventoryStorageActivityId}/audit/{inventoryStorageActivityAudit}
     - Adds an audit to an existing inventoryStorageActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to add an audit to 
     - parameter inventoryStorageActivityAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addInventoryStorageActivityAuditWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32, inventoryStorageActivityAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/audit/{inventoryStorageActivityAudit}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityAudit}", withString: "\(inventoryStorageActivityAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an inventoryStorageActivity
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addInventoryStorageActivityFile(inventoryStorageActivityId inventoryStorageActivityId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addInventoryStorageActivityFileWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an inventoryStorageActivity
     - POST /beta/inventoryStorageActivity/{inventoryStorageActivityId}/file/{fileName}
     - Adds a file to an existing inventoryStorageActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addInventoryStorageActivityFileWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an inventoryStorageActivity.
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to add a tag to 
     - parameter inventoryStorageActivityTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addInventoryStorageActivityTag(inventoryStorageActivityId inventoryStorageActivityId: Int32, inventoryStorageActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        addInventoryStorageActivityTagWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId, inventoryStorageActivityTag: inventoryStorageActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an inventoryStorageActivity.
     - PUT /beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag/{inventoryStorageActivityTag}
     - Adds a tag to an existing inventoryStorageActivity.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to add a tag to 
     - parameter inventoryStorageActivityTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addInventoryStorageActivityTagWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32, inventoryStorageActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag/{inventoryStorageActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityTag}", withString: "\(inventoryStorageActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an inventoryStorageActivity
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteInventoryStorageActivity(inventoryStorageActivityId inventoryStorageActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteInventoryStorageActivityWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an inventoryStorageActivity
     - DELETE /beta/inventoryStorageActivity/{inventoryStorageActivityId}
     - Deletes the inventoryStorageActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteInventoryStorageActivityWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an inventoryStorageActivity.
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to remove tag from 
     - parameter inventoryStorageActivityTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteInventoryStorageActivityTag(inventoryStorageActivityId inventoryStorageActivityId: Int32, inventoryStorageActivityTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteInventoryStorageActivityTagWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId, inventoryStorageActivityTag: inventoryStorageActivityTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an inventoryStorageActivity.
     - DELETE /beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag/{inventoryStorageActivityTag}
     - Deletes an existing inventoryStorageActivity tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to remove tag from 
     - parameter inventoryStorageActivityTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteInventoryStorageActivityTagWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32, inventoryStorageActivityTag: String) -> RequestBuilder<Void> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag/{inventoryStorageActivityTag}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityTag}", withString: "\(inventoryStorageActivityTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an inventoryStorageActivity by id
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateInventoryStorageActivityById(inventoryStorageActivityId inventoryStorageActivityId: Int32, completion: ((data: InventoryStorageActivity?, error: ErrorType?) -> Void)) {
        getDuplicateInventoryStorageActivityByIdWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an inventoryStorageActivity by id
     - GET /beta/inventoryStorageActivity/duplicate/{inventoryStorageActivityId}
     - Returns a duplicated inventoryStorageActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "warehouseLocationPriorityCode" : 3,
  "warehouseLocationFootprintHeight" : 9,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "alcoholTypeId" : 0,
  "estimatedPallets" : 3,
  "inventoryValue" : 2.027123023002321833274663731572218239307403564453125,
  "warehouseLocationOriginId" : 6,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 6,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 3,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 4.6523964329332461176136348512955009937286376953125,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 0,
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 5,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 9,
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 3,
  "alcoholContainerId" : 8,
  "importedRecordId" : 6,
  "itemId" : 5,
  "itemMajorGroup" : 1,
  "chargeRate" : 7.04836565559697003635619694250635802745819091796875,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "itemCubicFeet" : 5.94489560761401580890606055618263781070709228515625,
  "isMixedReceipts" : false,
  "itemSummaryCode" : 6,
  "warehouseLocationBehaviorTypeId" : 1,
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 1,
  "warehouseLocationLevel" : 8,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 7,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 1,
  "warehouseLocationOnline" : false,
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 9,
  "receiptCaseWeight" : 6.51918095101838179772357761976309120655059814453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "inventoryAgeDays" : 4,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 2,
  "address" : "address",
  "warehouseLocationCubicFeet" : 6.683562403749608193948006373830139636993408203125,
  "receiptQuantityPerInnerPack" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 7,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 7,
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "warehouseLocationFootprintId" : 4,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 7,
  "itemSubGroup" : 2,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to be duplicated. 

     - returns: RequestBuilder<InventoryStorageActivity> 
     */
    public class func getDuplicateInventoryStorageActivityByIdWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32) -> RequestBuilder<InventoryStorageActivity> {
        var path = "/beta/inventoryStorageActivity/duplicate/{inventoryStorageActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InventoryStorageActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search inventoryStorageActivitys by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventoryStorageActivityByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [InventoryStorageActivity]?, error: ErrorType?) -> Void)) {
        getInventoryStorageActivityByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search inventoryStorageActivitys by filter
     - GET /beta/inventoryStorageActivity/search
     - Returns the list of inventoryStorageActivitys that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "warehouseLocationPriorityCode" : 3,
  "warehouseLocationFootprintHeight" : 9,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "alcoholTypeId" : 0,
  "estimatedPallets" : 3,
  "inventoryValue" : 2.027123023002321833274663731572218239307403564453125,
  "warehouseLocationOriginId" : 6,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 6,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 3,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 4.6523964329332461176136348512955009937286376953125,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 0,
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 5,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 9,
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 3,
  "alcoholContainerId" : 8,
  "importedRecordId" : 6,
  "itemId" : 5,
  "itemMajorGroup" : 1,
  "chargeRate" : 7.04836565559697003635619694250635802745819091796875,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "itemCubicFeet" : 5.94489560761401580890606055618263781070709228515625,
  "isMixedReceipts" : false,
  "itemSummaryCode" : 6,
  "warehouseLocationBehaviorTypeId" : 1,
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 1,
  "warehouseLocationLevel" : 8,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 7,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 1,
  "warehouseLocationOnline" : false,
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 9,
  "receiptCaseWeight" : 6.51918095101838179772357761976309120655059814453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "inventoryAgeDays" : 4,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 2,
  "address" : "address",
  "warehouseLocationCubicFeet" : 6.683562403749608193948006373830139636993408203125,
  "receiptQuantityPerInnerPack" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 7,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 7,
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "warehouseLocationFootprintId" : 4,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 7,
  "itemSubGroup" : 2,
  "itemMajorGroupName" : "itemMajorGroupName"
}, {
  "warehouseLocationPriorityCode" : 3,
  "warehouseLocationFootprintHeight" : 9,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "alcoholTypeId" : 0,
  "estimatedPallets" : 3,
  "inventoryValue" : 2.027123023002321833274663731572218239307403564453125,
  "warehouseLocationOriginId" : 6,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 6,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 3,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 4.6523964329332461176136348512955009937286376953125,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 0,
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 5,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 9,
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 3,
  "alcoholContainerId" : 8,
  "importedRecordId" : 6,
  "itemId" : 5,
  "itemMajorGroup" : 1,
  "chargeRate" : 7.04836565559697003635619694250635802745819091796875,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "itemCubicFeet" : 5.94489560761401580890606055618263781070709228515625,
  "isMixedReceipts" : false,
  "itemSummaryCode" : 6,
  "warehouseLocationBehaviorTypeId" : 1,
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 1,
  "warehouseLocationLevel" : 8,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 7,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 1,
  "warehouseLocationOnline" : false,
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 9,
  "receiptCaseWeight" : 6.51918095101838179772357761976309120655059814453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "inventoryAgeDays" : 4,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 2,
  "address" : "address",
  "warehouseLocationCubicFeet" : 6.683562403749608193948006373830139636993408203125,
  "receiptQuantityPerInnerPack" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 7,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 7,
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "warehouseLocationFootprintId" : 4,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 7,
  "itemSubGroup" : 2,
  "itemMajorGroupName" : "itemMajorGroupName"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[InventoryStorageActivity]> 
     */
    public class func getInventoryStorageActivityByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[InventoryStorageActivity]> {
        let path = "/beta/inventoryStorageActivity/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[InventoryStorageActivity]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an inventoryStorageActivity by id
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventoryStorageActivityById(inventoryStorageActivityId inventoryStorageActivityId: Int32, completion: ((data: InventoryStorageActivity?, error: ErrorType?) -> Void)) {
        getInventoryStorageActivityByIdWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an inventoryStorageActivity by id
     - GET /beta/inventoryStorageActivity/{inventoryStorageActivityId}
     - Returns the inventoryStorageActivity identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "warehouseLocationPriorityCode" : 3,
  "warehouseLocationFootprintHeight" : 9,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "alcoholTypeId" : 0,
  "estimatedPallets" : 3,
  "inventoryValue" : 2.027123023002321833274663731572218239307403564453125,
  "warehouseLocationOriginId" : 6,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 6,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 3,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 4.6523964329332461176136348512955009937286376953125,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 0,
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 6,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 5,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 9,
  "itemSubGroupName" : "itemSubGroupName",
  "alcoholCountryId" : 3,
  "alcoholContainerId" : 8,
  "importedRecordId" : 6,
  "itemId" : 5,
  "itemMajorGroup" : 1,
  "chargeRate" : 7.04836565559697003635619694250635802745819091796875,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 7,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "itemCubicFeet" : 5.94489560761401580890606055618263781070709228515625,
  "isMixedReceipts" : false,
  "itemSummaryCode" : 6,
  "warehouseLocationBehaviorTypeId" : 1,
  "alcoholRegion" : "alcoholRegion",
  "extendedCharge" : 5.5332583970349862312332334113307297229766845703125,
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 1,
  "warehouseLocationLevel" : 8,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 7,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 1,
  "warehouseLocationOnline" : false,
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 9,
  "receiptCaseWeight" : 6.51918095101838179772357761976309120655059814453125,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "inventoryAgeDays" : 4,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 2,
  "address" : "address",
  "warehouseLocationCubicFeet" : 6.683562403749608193948006373830139636993408203125,
  "receiptQuantityPerInnerPack" : 3,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 7,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 7,
  "billingQuantity" : 3.05761002410493443193217899533919990062713623046875,
  "warehouseLocationFootprintId" : 4,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 7,
  "itemSubGroup" : 2,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to be returned. 

     - returns: RequestBuilder<InventoryStorageActivity> 
     */
    public class func getInventoryStorageActivityByIdWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32) -> RequestBuilder<InventoryStorageActivity> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InventoryStorageActivity>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an inventoryStorageActivity.
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventoryStorageActivityTags(inventoryStorageActivityId inventoryStorageActivityId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getInventoryStorageActivityTagsWithRequestBuilder(inventoryStorageActivityId: inventoryStorageActivityId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an inventoryStorageActivity.
     - GET /beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag
     - Get all existing inventoryStorageActivity tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventoryStorageActivityId: (path) Id of the inventoryStorageActivity to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getInventoryStorageActivityTagsWithRequestBuilder(inventoryStorageActivityId inventoryStorageActivityId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/inventoryStorageActivity/{inventoryStorageActivityId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{inventoryStorageActivityId}", withString: "\(inventoryStorageActivityId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an inventoryStorageActivity
     
     - parameter body: (body) InventoryStorageActivity to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateInventoryStorageActivity(body body: InventoryStorageActivity, completion: ((error: ErrorType?) -> Void)) {
        updateInventoryStorageActivityWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an inventoryStorageActivity
     - PUT /beta/inventoryStorageActivity
     - Updates an existing inventoryStorageActivity using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) InventoryStorageActivity to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateInventoryStorageActivityWithRequestBuilder(body body: InventoryStorageActivity) -> RequestBuilder<Void> {
        let path = "/beta/inventoryStorageActivity"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
