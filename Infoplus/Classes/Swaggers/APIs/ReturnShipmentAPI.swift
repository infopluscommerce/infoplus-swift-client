//
// ReturnShipmentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ReturnShipmentAPI: APIBase {
    /**
     Add new audit for a returnShipment
     
     - parameter returnShipmentId: (path) Id of the returnShipment to add an audit to 
     - parameter returnShipmentAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addReturnShipmentAudit(returnShipmentId returnShipmentId: Int32, returnShipmentAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addReturnShipmentAuditWithRequestBuilder(returnShipmentId: returnShipmentId, returnShipmentAudit: returnShipmentAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a returnShipment
     - PUT /beta/returnShipment/{returnShipmentId}/audit/{returnShipmentAudit}
     - Adds an audit to an existing returnShipment.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to add an audit to 
     - parameter returnShipmentAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addReturnShipmentAuditWithRequestBuilder(returnShipmentId returnShipmentId: Int32, returnShipmentAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/audit/{returnShipmentAudit}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentAudit}", withString: "\(returnShipmentAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a returnShipment
     
     - parameter returnShipmentId: (path) Id of the returnShipment to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addReturnShipmentFile(returnShipmentId returnShipmentId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addReturnShipmentFileWithRequestBuilder(returnShipmentId: returnShipmentId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a returnShipment
     - POST /beta/returnShipment/{returnShipmentId}/file/{fileName}
     - Adds a file to an existing returnShipment.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addReturnShipmentFileWithRequestBuilder(returnShipmentId returnShipmentId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a returnShipment by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter returnShipmentId: (path) Id of the returnShipment to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addReturnShipmentFileByURL(body body: RecordFile, returnShipmentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addReturnShipmentFileByURLWithRequestBuilder(body: body, returnShipmentId: returnShipmentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a returnShipment by URL.
     - POST /beta/returnShipment/{returnShipmentId}/file
     - Adds a file to an existing returnShipment by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter returnShipmentId: (path) Id of the returnShipment to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addReturnShipmentFileByURLWithRequestBuilder(body body: RecordFile, returnShipmentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a returnShipment.
     
     - parameter returnShipmentId: (path) Id of the returnShipment to add a tag to 
     - parameter returnShipmentTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addReturnShipmentTag(returnShipmentId returnShipmentId: Int32, returnShipmentTag: String, completion: ((error: ErrorType?) -> Void)) {
        addReturnShipmentTagWithRequestBuilder(returnShipmentId: returnShipmentId, returnShipmentTag: returnShipmentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a returnShipment.
     - PUT /beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}
     - Adds a tag to an existing returnShipment.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to add a tag to 
     - parameter returnShipmentTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addReturnShipmentTagWithRequestBuilder(returnShipmentId returnShipmentId: Int32, returnShipmentTag: String) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentTag}", withString: "\(returnShipmentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a returnShipment.
     
     - parameter returnShipmentId: (path) Id of the returnShipment to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteReturnShipmentFile(returnShipmentId returnShipmentId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteReturnShipmentFileWithRequestBuilder(returnShipmentId: returnShipmentId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a returnShipment.
     - DELETE /beta/returnShipment/{returnShipmentId}/file/{fileId}
     - Deletes an existing returnShipment file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteReturnShipmentFileWithRequestBuilder(returnShipmentId returnShipmentId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a returnShipment.
     
     - parameter returnShipmentId: (path) Id of the returnShipment to remove tag from 
     - parameter returnShipmentTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteReturnShipmentTag(returnShipmentId returnShipmentId: Int32, returnShipmentTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteReturnShipmentTagWithRequestBuilder(returnShipmentId: returnShipmentId, returnShipmentTag: returnShipmentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a returnShipment.
     - DELETE /beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}
     - Deletes an existing returnShipment tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to remove tag from 
     - parameter returnShipmentTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteReturnShipmentTagWithRequestBuilder(returnShipmentId returnShipmentId: Int32, returnShipmentTag: String) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/tag/{returnShipmentTag}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentTag}", withString: "\(returnShipmentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a returnShipment by id
     
     - parameter returnShipmentId: (path) Id of the returnShipment to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateReturnShipmentById(returnShipmentId returnShipmentId: Int32, completion: ((data: ReturnShipment?, error: ErrorType?) -> Void)) {
        getDuplicateReturnShipmentByIdWithRequestBuilder(returnShipmentId: returnShipmentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a returnShipment by id
     - GET /beta/returnShipment/duplicate/{returnShipmentId}
     - Returns a duplicated returnShipment identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "cartonTypeId" : 4,
  "estimatedZone" : "estimatedZone",
  "customFields" : {
    "key" : "{}"
  },
  "carrierCompany" : "carrierCompany",
  "cartonId" : 1,
  "carrierServiceId" : 9,
  "numberOfCartons" : 7,
  "shipmentType" : "shipmentType",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 2,
  "parcelAccountNo" : "parcelAccountNo",
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "id" : 0,
  "externalShippingSystemId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "orderNo" : 5.962133916683182377482808078639209270477294921875,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "casebreak" : false,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "dim3In" : 4.1456080298839363962315474054776132106781005859375,
  "dim1In" : 3.61607674925191080461672754609026014804840087890625,
  "billingOption" : "billingOption",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "dim2In" : 2.027123023002321833274663731572218239307403564453125,
  "omsOrderNo" : 9,
  "carrier" : 9,
  "shipped" : false,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "loadId" : 5,
  "trackingNo" : "trackingNo",
  "warehouseId" : 6,
  "shipmentId" : "shipmentId",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "deliveryMessage" : "deliveryMessage",
  "orderNoList" : [ 5.63737665663332876420099637471139430999755859375, 5.63737665663332876420099637471139430999755859375 ],
  "status" : "status"
}}]
     
     - parameter returnShipmentId: (path) Id of the returnShipment to be duplicated. 

     - returns: RequestBuilder<ReturnShipment> 
     */
    public class func getDuplicateReturnShipmentByIdWithRequestBuilder(returnShipmentId returnShipmentId: Int32) -> RequestBuilder<ReturnShipment> {
        var path = "/beta/returnShipment/duplicate/{returnShipmentId}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ReturnShipment>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search returnShipments by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getReturnShipmentByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ReturnShipment]?, error: ErrorType?) -> Void)) {
        getReturnShipmentByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search returnShipments by filter
     - GET /beta/returnShipment/search
     - Returns the list of returnShipments that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "cartonTypeId" : 4,
  "estimatedZone" : "estimatedZone",
  "customFields" : {
    "key" : "{}"
  },
  "carrierCompany" : "carrierCompany",
  "cartonId" : 1,
  "carrierServiceId" : 9,
  "numberOfCartons" : 7,
  "shipmentType" : "shipmentType",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 2,
  "parcelAccountNo" : "parcelAccountNo",
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "id" : 0,
  "externalShippingSystemId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "orderNo" : 5.962133916683182377482808078639209270477294921875,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "casebreak" : false,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "dim3In" : 4.1456080298839363962315474054776132106781005859375,
  "dim1In" : 3.61607674925191080461672754609026014804840087890625,
  "billingOption" : "billingOption",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "dim2In" : 2.027123023002321833274663731572218239307403564453125,
  "omsOrderNo" : 9,
  "carrier" : 9,
  "shipped" : false,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "loadId" : 5,
  "trackingNo" : "trackingNo",
  "warehouseId" : 6,
  "shipmentId" : "shipmentId",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "deliveryMessage" : "deliveryMessage",
  "orderNoList" : [ 5.63737665663332876420099637471139430999755859375, 5.63737665663332876420099637471139430999755859375 ],
  "status" : "status"
}, {
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "cartonTypeId" : 4,
  "estimatedZone" : "estimatedZone",
  "customFields" : {
    "key" : "{}"
  },
  "carrierCompany" : "carrierCompany",
  "cartonId" : 1,
  "carrierServiceId" : 9,
  "numberOfCartons" : 7,
  "shipmentType" : "shipmentType",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 2,
  "parcelAccountNo" : "parcelAccountNo",
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "id" : 0,
  "externalShippingSystemId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "orderNo" : 5.962133916683182377482808078639209270477294921875,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "casebreak" : false,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "dim3In" : 4.1456080298839363962315474054776132106781005859375,
  "dim1In" : 3.61607674925191080461672754609026014804840087890625,
  "billingOption" : "billingOption",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "dim2In" : 2.027123023002321833274663731572218239307403564453125,
  "omsOrderNo" : 9,
  "carrier" : 9,
  "shipped" : false,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "loadId" : 5,
  "trackingNo" : "trackingNo",
  "warehouseId" : 6,
  "shipmentId" : "shipmentId",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "deliveryMessage" : "deliveryMessage",
  "orderNoList" : [ 5.63737665663332876420099637471139430999755859375, 5.63737665663332876420099637471139430999755859375 ],
  "status" : "status"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ReturnShipment]> 
     */
    public class func getReturnShipmentByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ReturnShipment]> {
        let path = "/beta/returnShipment/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ReturnShipment]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a returnShipment by id
     
     - parameter returnShipmentId: (path) Id of the returnShipment to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getReturnShipmentById(returnShipmentId returnShipmentId: Int32, completion: ((data: ReturnShipment?, error: ErrorType?) -> Void)) {
        getReturnShipmentByIdWithRequestBuilder(returnShipmentId: returnShipmentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a returnShipment by id
     - GET /beta/returnShipment/{returnShipmentId}
     - Returns the returnShipment identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "retailFreightAmount" : 6.8468526983526398765889098285697400569915771484375,
  "cartonTypeId" : 4,
  "estimatedZone" : "estimatedZone",
  "customFields" : {
    "key" : "{}"
  },
  "carrierCompany" : "carrierCompany",
  "cartonId" : 1,
  "carrierServiceId" : 9,
  "numberOfCartons" : 7,
  "shipmentType" : "shipmentType",
  "deliveredDate" : "2000-01-23T04:56:07.000+00:00",
  "cartonNo" : 2,
  "parcelAccountNo" : "parcelAccountNo",
  "thirdPartyParcelAccountNo" : "thirdPartyParcelAccountNo",
  "licensePlateNumber" : "licensePlateNumber",
  "id" : 0,
  "externalShippingSystemId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "weightLbs" : 7.3862819483858839220147274318151175975799560546875,
  "orderNo" : 5.962133916683182377482808078639209270477294921875,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "casebreak" : false,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "dim3In" : 4.1456080298839363962315474054776132106781005859375,
  "dim1In" : 3.61607674925191080461672754609026014804840087890625,
  "billingOption" : "billingOption",
  "chargedFreightAmount" : 1.024645700144157789424070870154537260532379150390625,
  "dim2In" : 2.027123023002321833274663731572218239307403564453125,
  "omsOrderNo" : 9,
  "carrier" : 9,
  "shipped" : false,
  "residential" : false,
  "dimWeight" : 1.231513536777255612975068288506008684635162353515625,
  "loadId" : 5,
  "trackingNo" : "trackingNo",
  "warehouseId" : 6,
  "shipmentId" : "shipmentId",
  "publishedFreightAmount" : 1.489415909854170383397331534069962799549102783203125,
  "deliveryMessage" : "deliveryMessage",
  "orderNoList" : [ 5.63737665663332876420099637471139430999755859375, 5.63737665663332876420099637471139430999755859375 ],
  "status" : "status"
}}]
     
     - parameter returnShipmentId: (path) Id of the returnShipment to be returned. 

     - returns: RequestBuilder<ReturnShipment> 
     */
    public class func getReturnShipmentByIdWithRequestBuilder(returnShipmentId returnShipmentId: Int32) -> RequestBuilder<ReturnShipment> {
        var path = "/beta/returnShipment/{returnShipmentId}"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ReturnShipment>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a returnShipment.
     
     - parameter returnShipmentId: (path) Id of the returnShipment to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getReturnShipmentFiles(returnShipmentId returnShipmentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getReturnShipmentFilesWithRequestBuilder(returnShipmentId: returnShipmentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a returnShipment.
     - GET /beta/returnShipment/{returnShipmentId}/file
     - Get all existing returnShipment files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getReturnShipmentFilesWithRequestBuilder(returnShipmentId returnShipmentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a returnShipment.
     
     - parameter returnShipmentId: (path) Id of the returnShipment to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getReturnShipmentTags(returnShipmentId returnShipmentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getReturnShipmentTagsWithRequestBuilder(returnShipmentId: returnShipmentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a returnShipment.
     - GET /beta/returnShipment/{returnShipmentId}/tag
     - Get all existing returnShipment tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter returnShipmentId: (path) Id of the returnShipment to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getReturnShipmentTagsWithRequestBuilder(returnShipmentId returnShipmentId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/returnShipment/{returnShipmentId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{returnShipmentId}", withString: "\(returnShipmentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a returnShipment custom fields
     
     - parameter body: (body) ReturnShipment to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateReturnShipmentCustomFields(body body: ReturnShipment, completion: ((error: ErrorType?) -> Void)) {
        updateReturnShipmentCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a returnShipment custom fields
     - PUT /beta/returnShipment/customFields
     - Updates an existing returnShipment custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ReturnShipment to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateReturnShipmentCustomFieldsWithRequestBuilder(body body: ReturnShipment) -> RequestBuilder<Void> {
        let path = "/beta/returnShipment/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
