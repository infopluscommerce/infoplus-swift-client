//
// LocationAddressSchemeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class LocationAddressSchemeAPI: APIBase {
    /**
     
     Create a locationAddressScheme
     
     - parameter body: (body) LocationAddressScheme to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addLocationAddressScheme(body body: LocationAddressScheme, completion: ((data: LocationAddressScheme?, error: ErrorType?) -> Void)) {
        addLocationAddressSchemeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a locationAddressScheme
     
     - POST /v2.0/locationAddressScheme
     - Inserts a new locationAddressScheme using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "formatString" : "aeiou",
  "clientId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "locationNamingScheme" : "aeiou",
  "bayNumberZeroPadded" : true,
  "customFields" : {
    "key" : "{}"
  },
  "aisleNumberZeroPadded" : true,
  "locationNumberZeroPadded" : true,
  "levelNumberZeroPadded" : true,
  "levelNumberMinimumNumberOfDigits" : 123,
  "bayNumberMinimumNumberOfDigits" : 123,
  "name" : "aeiou",
  "levelNamingScheme" : "aeiou",
  "bayNamingScheme" : "aeiou",
  "id" : 123,
  "aisleNamingScheme" : "aeiou",
  "locationNumberMinimumNumberOfDigits" : 123,
  "aisleNumberMinimumNumberOfDigits" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) LocationAddressScheme to be inserted. 

     - returns: RequestBuilder<LocationAddressScheme> 
     */
    public class func addLocationAddressSchemeWithRequestBuilder(body body: LocationAddressScheme) -> RequestBuilder<LocationAddressScheme> {
        let path = "/v2.0/locationAddressScheme"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<LocationAddressScheme>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a locationAddressScheme
     
     - parameter locationAddressSchemeId: (path) Id of the locationAddressScheme to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteLocationAddressScheme(locationAddressSchemeId locationAddressSchemeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteLocationAddressSchemeWithRequestBuilder(locationAddressSchemeId: locationAddressSchemeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a locationAddressScheme
     
     - DELETE /v2.0/locationAddressScheme/{locationAddressSchemeId}
     - Deletes the locationAddressScheme identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter locationAddressSchemeId: (path) Id of the locationAddressScheme to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteLocationAddressSchemeWithRequestBuilder(locationAddressSchemeId locationAddressSchemeId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/locationAddressScheme/{locationAddressSchemeId}"
        path = path.stringByReplacingOccurrencesOfString("{locationAddressSchemeId}", withString: "\(locationAddressSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a locationAddressScheme by id
     
     - parameter locationAddressSchemeId: (path) Id of the locationAddressScheme to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateLocationAddressSchemeById(locationAddressSchemeId locationAddressSchemeId: Int, completion: ((data: LocationAddressScheme?, error: ErrorType?) -> Void)) {
        getDuplicateLocationAddressSchemeByIdWithRequestBuilder(locationAddressSchemeId: locationAddressSchemeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a locationAddressScheme by id
     
     - GET /v2.0/locationAddressScheme/duplicate/{locationAddressSchemeId}
     - Returns a duplicated locationAddressScheme identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "formatString" : "aeiou",
  "clientId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "locationNamingScheme" : "aeiou",
  "bayNumberZeroPadded" : true,
  "customFields" : {
    "key" : "{}"
  },
  "aisleNumberZeroPadded" : true,
  "locationNumberZeroPadded" : true,
  "levelNumberZeroPadded" : true,
  "levelNumberMinimumNumberOfDigits" : 123,
  "bayNumberMinimumNumberOfDigits" : 123,
  "name" : "aeiou",
  "levelNamingScheme" : "aeiou",
  "bayNamingScheme" : "aeiou",
  "id" : 123,
  "aisleNamingScheme" : "aeiou",
  "locationNumberMinimumNumberOfDigits" : 123,
  "aisleNumberMinimumNumberOfDigits" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter locationAddressSchemeId: (path) Id of the locationAddressScheme to be duplicated. 

     - returns: RequestBuilder<LocationAddressScheme> 
     */
    public class func getDuplicateLocationAddressSchemeByIdWithRequestBuilder(locationAddressSchemeId locationAddressSchemeId: Int) -> RequestBuilder<LocationAddressScheme> {
        var path = "/v2.0/locationAddressScheme/duplicate/{locationAddressSchemeId}"
        path = path.stringByReplacingOccurrencesOfString("{locationAddressSchemeId}", withString: "\(locationAddressSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LocationAddressScheme>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search locationAddressSchemes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLocationAddressSchemeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [LocationAddressScheme]?, error: ErrorType?) -> Void)) {
        getLocationAddressSchemeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search locationAddressSchemes by filter
     
     - GET /v2.0/locationAddressScheme/search
     - Returns the list of locationAddressSchemes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "formatString" : "aeiou",
  "clientId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "locationNamingScheme" : "aeiou",
  "bayNumberZeroPadded" : true,
  "customFields" : {
    "key" : "{}"
  },
  "aisleNumberZeroPadded" : true,
  "locationNumberZeroPadded" : true,
  "levelNumberZeroPadded" : true,
  "levelNumberMinimumNumberOfDigits" : 123,
  "bayNumberMinimumNumberOfDigits" : 123,
  "name" : "aeiou",
  "levelNamingScheme" : "aeiou",
  "bayNamingScheme" : "aeiou",
  "id" : 123,
  "aisleNamingScheme" : "aeiou",
  "locationNumberMinimumNumberOfDigits" : 123,
  "aisleNumberMinimumNumberOfDigits" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[LocationAddressScheme]> 
     */
    public class func getLocationAddressSchemeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[LocationAddressScheme]> {
        let path = "/v2.0/locationAddressScheme/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[LocationAddressScheme]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a locationAddressScheme by id
     
     - parameter locationAddressSchemeId: (path) Id of the locationAddressScheme to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLocationAddressSchemeById(locationAddressSchemeId locationAddressSchemeId: Int, completion: ((data: LocationAddressScheme?, error: ErrorType?) -> Void)) {
        getLocationAddressSchemeByIdWithRequestBuilder(locationAddressSchemeId: locationAddressSchemeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a locationAddressScheme by id
     
     - GET /v2.0/locationAddressScheme/{locationAddressSchemeId}
     - Returns the locationAddressScheme identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "formatString" : "aeiou",
  "clientId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "locationNamingScheme" : "aeiou",
  "bayNumberZeroPadded" : true,
  "customFields" : {
    "key" : "{}"
  },
  "aisleNumberZeroPadded" : true,
  "locationNumberZeroPadded" : true,
  "levelNumberZeroPadded" : true,
  "levelNumberMinimumNumberOfDigits" : 123,
  "bayNumberMinimumNumberOfDigits" : 123,
  "name" : "aeiou",
  "levelNamingScheme" : "aeiou",
  "bayNamingScheme" : "aeiou",
  "id" : 123,
  "aisleNamingScheme" : "aeiou",
  "locationNumberMinimumNumberOfDigits" : 123,
  "aisleNumberMinimumNumberOfDigits" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter locationAddressSchemeId: (path) Id of the locationAddressScheme to be returned. 

     - returns: RequestBuilder<LocationAddressScheme> 
     */
    public class func getLocationAddressSchemeByIdWithRequestBuilder(locationAddressSchemeId locationAddressSchemeId: Int) -> RequestBuilder<LocationAddressScheme> {
        var path = "/v2.0/locationAddressScheme/{locationAddressSchemeId}"
        path = path.stringByReplacingOccurrencesOfString("{locationAddressSchemeId}", withString: "\(locationAddressSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<LocationAddressScheme>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a locationAddressScheme
     
     - parameter body: (body) LocationAddressScheme to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateLocationAddressScheme(body body: LocationAddressScheme, completion: ((error: ErrorType?) -> Void)) {
        updateLocationAddressSchemeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a locationAddressScheme
     
     - PUT /v2.0/locationAddressScheme
     - Updates an existing locationAddressScheme using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) LocationAddressScheme to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateLocationAddressSchemeWithRequestBuilder(body body: LocationAddressScheme) -> RequestBuilder<Void> {
        let path = "/v2.0/locationAddressScheme"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a locationAddressScheme custom fields
     
     - parameter body: (body) LocationAddressScheme to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateLocationAddressSchemeCustomFields(body body: LocationAddressScheme, completion: ((error: ErrorType?) -> Void)) {
        updateLocationAddressSchemeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a locationAddressScheme custom fields
     
     - PUT /v2.0/locationAddressScheme/customFields
     - Updates an existing locationAddressScheme custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) LocationAddressScheme to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateLocationAddressSchemeCustomFieldsWithRequestBuilder(body body: LocationAddressScheme) -> RequestBuilder<Void> {
        let path = "/v2.0/locationAddressScheme/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
