//
// ExternalShippingSystemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ExternalShippingSystemAPI: APIBase {
    /**
     
     Create an externalShippingSystem
     
     - parameter body: (body) ExternalShippingSystem to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addExternalShippingSystem(body body: ExternalShippingSystem, completion: ((data: ExternalShippingSystem?, error: ErrorType?) -> Void)) {
        addExternalShippingSystemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an externalShippingSystem
     
     - POST /v2.0/externalShippingSystem
     - Inserts a new externalShippingSystem using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "systemType" : "aeiou",
  "apiSecret" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) ExternalShippingSystem to be inserted. 

     - returns: RequestBuilder<ExternalShippingSystem> 
     */
    public class func addExternalShippingSystemWithRequestBuilder(body body: ExternalShippingSystem) -> RequestBuilder<ExternalShippingSystem> {
        let path = "/v2.0/externalShippingSystem"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ExternalShippingSystem>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an externalShippingSystem
     
     - parameter externalShippingSystemId: (path) Id of the externalShippingSystem to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteExternalShippingSystem(externalShippingSystemId externalShippingSystemId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteExternalShippingSystemWithRequestBuilder(externalShippingSystemId: externalShippingSystemId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an externalShippingSystem
     
     - DELETE /v2.0/externalShippingSystem/{externalShippingSystemId}
     - Deletes the externalShippingSystem identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter externalShippingSystemId: (path) Id of the externalShippingSystem to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteExternalShippingSystemWithRequestBuilder(externalShippingSystemId externalShippingSystemId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/externalShippingSystem/{externalShippingSystemId}"
        path = path.stringByReplacingOccurrencesOfString("{externalShippingSystemId}", withString: "\(externalShippingSystemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated an externalShippingSystem by id
     
     - parameter externalShippingSystemId: (path) Id of the externalShippingSystem to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateExternalShippingSystemById(externalShippingSystemId externalShippingSystemId: Int, completion: ((data: ExternalShippingSystem?, error: ErrorType?) -> Void)) {
        getDuplicateExternalShippingSystemByIdWithRequestBuilder(externalShippingSystemId: externalShippingSystemId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an externalShippingSystem by id
     
     - GET /v2.0/externalShippingSystem/duplicate/{externalShippingSystemId}
     - Returns a duplicated externalShippingSystem identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "systemType" : "aeiou",
  "apiSecret" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalShippingSystemId: (path) Id of the externalShippingSystem to be duplicated. 

     - returns: RequestBuilder<ExternalShippingSystem> 
     */
    public class func getDuplicateExternalShippingSystemByIdWithRequestBuilder(externalShippingSystemId externalShippingSystemId: Int) -> RequestBuilder<ExternalShippingSystem> {
        var path = "/v2.0/externalShippingSystem/duplicate/{externalShippingSystemId}"
        path = path.stringByReplacingOccurrencesOfString("{externalShippingSystemId}", withString: "\(externalShippingSystemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ExternalShippingSystem>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search externalShippingSystems by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExternalShippingSystemByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ExternalShippingSystem]?, error: ErrorType?) -> Void)) {
        getExternalShippingSystemByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search externalShippingSystems by filter
     
     - GET /v2.0/externalShippingSystem/search
     - Returns the list of externalShippingSystems that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "apiKey" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "systemType" : "aeiou",
  "apiSecret" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ExternalShippingSystem]> 
     */
    public class func getExternalShippingSystemByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ExternalShippingSystem]> {
        let path = "/v2.0/externalShippingSystem/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ExternalShippingSystem]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an externalShippingSystem by id
     
     - parameter externalShippingSystemId: (path) Id of the externalShippingSystem to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExternalShippingSystemById(externalShippingSystemId externalShippingSystemId: Int, completion: ((data: ExternalShippingSystem?, error: ErrorType?) -> Void)) {
        getExternalShippingSystemByIdWithRequestBuilder(externalShippingSystemId: externalShippingSystemId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an externalShippingSystem by id
     
     - GET /v2.0/externalShippingSystem/{externalShippingSystemId}
     - Returns the externalShippingSystem identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "systemType" : "aeiou",
  "apiSecret" : "aeiou",
  "id" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalShippingSystemId: (path) Id of the externalShippingSystem to be returned. 

     - returns: RequestBuilder<ExternalShippingSystem> 
     */
    public class func getExternalShippingSystemByIdWithRequestBuilder(externalShippingSystemId externalShippingSystemId: Int) -> RequestBuilder<ExternalShippingSystem> {
        var path = "/v2.0/externalShippingSystem/{externalShippingSystemId}"
        path = path.stringByReplacingOccurrencesOfString("{externalShippingSystemId}", withString: "\(externalShippingSystemId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ExternalShippingSystem>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an externalShippingSystem
     
     - parameter body: (body) ExternalShippingSystem to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateExternalShippingSystem(body body: ExternalShippingSystem, completion: ((error: ErrorType?) -> Void)) {
        updateExternalShippingSystemWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an externalShippingSystem
     
     - PUT /v2.0/externalShippingSystem
     - Updates an existing externalShippingSystem using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ExternalShippingSystem to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateExternalShippingSystemWithRequestBuilder(body body: ExternalShippingSystem) -> RequestBuilder<Void> {
        let path = "/v2.0/externalShippingSystem"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an externalShippingSystem custom fields
     
     - parameter body: (body) ExternalShippingSystem to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateExternalShippingSystemCustomFields(body body: ExternalShippingSystem, completion: ((error: ErrorType?) -> Void)) {
        updateExternalShippingSystemCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an externalShippingSystem custom fields
     
     - PUT /v2.0/externalShippingSystem/customFields
     - Updates an existing externalShippingSystem custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ExternalShippingSystem to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateExternalShippingSystemCustomFieldsWithRequestBuilder(body body: ExternalShippingSystem) -> RequestBuilder<Void> {
        let path = "/v2.0/externalShippingSystem/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
