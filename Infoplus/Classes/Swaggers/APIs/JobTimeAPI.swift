//
// JobTimeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class JobTimeAPI: APIBase {
    /**
     
     Create a jobTime
     
     - parameter body: (body) JobTime to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobTime(body body: JobTime, completion: ((data: JobTime?, error: ErrorType?) -> Void)) {
        addJobTimeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a jobTime
     
     - POST /v2.0/jobTime
     - Inserts a new jobTime using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "secondDuration" : 123,
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "userId" : 123,
  "jobTypeId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter body: (body) JobTime to be inserted. 

     - returns: RequestBuilder<JobTime> 
     */
    public class func addJobTimeWithRequestBuilder(body body: JobTime) -> RequestBuilder<JobTime> {
        let path = "/v2.0/jobTime"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<JobTime>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a jobTime
     
     - parameter jobTimeId: (path) Id of the jobTime to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobTime(jobTimeId jobTimeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteJobTimeWithRequestBuilder(jobTimeId: jobTimeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a jobTime
     
     - DELETE /v2.0/jobTime/{jobTimeId}
     - Deletes the jobTime identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTimeId: (path) Id of the jobTime to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobTimeWithRequestBuilder(jobTimeId jobTimeId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/jobTime/{jobTimeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTimeId}", withString: "\(jobTimeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a jobTime by id
     
     - parameter jobTimeId: (path) Id of the jobTime to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateJobTimeById(jobTimeId jobTimeId: Int, completion: ((data: JobTime?, error: ErrorType?) -> Void)) {
        getDuplicateJobTimeByIdWithRequestBuilder(jobTimeId: jobTimeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a jobTime by id
     
     - GET /v2.0/jobTime/duplicate/{jobTimeId}
     - Returns a duplicated jobTime identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "secondDuration" : 123,
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "userId" : 123,
  "jobTypeId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter jobTimeId: (path) Id of the jobTime to be duplicated. 

     - returns: RequestBuilder<JobTime> 
     */
    public class func getDuplicateJobTimeByIdWithRequestBuilder(jobTimeId jobTimeId: Int) -> RequestBuilder<JobTime> {
        var path = "/v2.0/jobTime/duplicate/{jobTimeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTimeId}", withString: "\(jobTimeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<JobTime>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search jobTimes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobTimeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [JobTime]?, error: ErrorType?) -> Void)) {
        getJobTimeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search jobTimes by filter
     
     - GET /v2.0/jobTime/search
     - Returns the list of jobTimes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "secondDuration" : 123,
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "userId" : 123,
  "jobTypeId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[JobTime]> 
     */
    public class func getJobTimeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[JobTime]> {
        let path = "/v2.0/jobTime/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[JobTime]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a jobTime by id
     
     - parameter jobTimeId: (path) Id of the jobTime to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobTimeById(jobTimeId jobTimeId: Int, completion: ((data: JobTime?, error: ErrorType?) -> Void)) {
        getJobTimeByIdWithRequestBuilder(jobTimeId: jobTimeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a jobTime by id
     
     - GET /v2.0/jobTime/{jobTimeId}
     - Returns the jobTime identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "secondDuration" : 123,
  "date" : "2000-01-23T04:56:07.000+0000",
  "note" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "userId" : 123,
  "jobTypeId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "lobId" : 123
}}]
     
     - parameter jobTimeId: (path) Id of the jobTime to be returned. 

     - returns: RequestBuilder<JobTime> 
     */
    public class func getJobTimeByIdWithRequestBuilder(jobTimeId jobTimeId: Int) -> RequestBuilder<JobTime> {
        var path = "/v2.0/jobTime/{jobTimeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTimeId}", withString: "\(jobTimeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<JobTime>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a jobTime
     
     - parameter body: (body) JobTime to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJobTime(body body: JobTime, completion: ((error: ErrorType?) -> Void)) {
        updateJobTimeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a jobTime
     
     - PUT /v2.0/jobTime
     - Updates an existing jobTime using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) JobTime to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJobTimeWithRequestBuilder(body body: JobTime) -> RequestBuilder<Void> {
        let path = "/v2.0/jobTime"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a jobTime custom fields
     
     - parameter body: (body) JobTime to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJobTimeCustomFields(body body: JobTime, completion: ((error: ErrorType?) -> Void)) {
        updateJobTimeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a jobTime custom fields
     
     - PUT /v2.0/jobTime/customFields
     - Updates an existing jobTime custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) JobTime to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJobTimeCustomFieldsWithRequestBuilder(body body: JobTime) -> RequestBuilder<Void> {
        let path = "/v2.0/jobTime/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
