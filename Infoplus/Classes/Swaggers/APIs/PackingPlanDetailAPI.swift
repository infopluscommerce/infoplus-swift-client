//
// PackingPlanDetailAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PackingPlanDetailAPI: APIBase {
    /**
     Add new audit for a packingPlanDetail
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add an audit to 
     - parameter packingPlanDetailAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanDetailAudit(packingPlanDetailId packingPlanDetailId: Int32, packingPlanDetailAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanDetailAuditWithRequestBuilder(packingPlanDetailId: packingPlanDetailId, packingPlanDetailAudit: packingPlanDetailAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a packingPlanDetail
     - PUT /beta/packingPlanDetail/{packingPlanDetailId}/audit/{packingPlanDetailAudit}
     - Adds an audit to an existing packingPlanDetail.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add an audit to 
     - parameter packingPlanDetailAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanDetailAuditWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32, packingPlanDetailAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/audit/{packingPlanDetailAudit}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailAudit}", withString: "\(packingPlanDetailAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a packingPlanDetail
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanDetailFile(packingPlanDetailId packingPlanDetailId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanDetailFileWithRequestBuilder(packingPlanDetailId: packingPlanDetailId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a packingPlanDetail
     - POST /beta/packingPlanDetail/{packingPlanDetailId}/file/{fileName}
     - Adds a file to an existing packingPlanDetail.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanDetailFileWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a packingPlanDetail by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanDetailFileByURL(body body: RecordFile, packingPlanDetailId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanDetailFileByURLWithRequestBuilder(body: body, packingPlanDetailId: packingPlanDetailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a packingPlanDetail by URL.
     - POST /beta/packingPlanDetail/{packingPlanDetailId}/file
     - Adds a file to an existing packingPlanDetail by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanDetailFileByURLWithRequestBuilder(body body: RecordFile, packingPlanDetailId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/file"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a packingPlanDetail.
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add a tag to 
     - parameter packingPlanDetailTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addPackingPlanDetailTag(packingPlanDetailId packingPlanDetailId: Int32, packingPlanDetailTag: String, completion: ((error: ErrorType?) -> Void)) {
        addPackingPlanDetailTagWithRequestBuilder(packingPlanDetailId: packingPlanDetailId, packingPlanDetailTag: packingPlanDetailTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a packingPlanDetail.
     - PUT /beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}
     - Adds a tag to an existing packingPlanDetail.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to add a tag to 
     - parameter packingPlanDetailTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addPackingPlanDetailTagWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32, packingPlanDetailTag: String) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailTag}", withString: "\(packingPlanDetailTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a packingPlanDetail.
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingPlanDetailFile(packingPlanDetailId packingPlanDetailId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deletePackingPlanDetailFileWithRequestBuilder(packingPlanDetailId: packingPlanDetailId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a packingPlanDetail.
     - DELETE /beta/packingPlanDetail/{packingPlanDetailId}/file/{fileId}
     - Deletes an existing packingPlanDetail file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingPlanDetailFileWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a packingPlanDetail.
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to remove tag from 
     - parameter packingPlanDetailTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePackingPlanDetailTag(packingPlanDetailId packingPlanDetailId: Int32, packingPlanDetailTag: String, completion: ((error: ErrorType?) -> Void)) {
        deletePackingPlanDetailTagWithRequestBuilder(packingPlanDetailId: packingPlanDetailId, packingPlanDetailTag: packingPlanDetailTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a packingPlanDetail.
     - DELETE /beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}
     - Deletes an existing packingPlanDetail tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to remove tag from 
     - parameter packingPlanDetailTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePackingPlanDetailTagWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32, packingPlanDetailTag: String) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/tag/{packingPlanDetailTag}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailTag}", withString: "\(packingPlanDetailTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a packingPlanDetail by id
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicatePackingPlanDetailById(packingPlanDetailId packingPlanDetailId: Int32, completion: ((data: PackingPlanDetail?, error: ErrorType?) -> Void)) {
        getDuplicatePackingPlanDetailByIdWithRequestBuilder(packingPlanDetailId: packingPlanDetailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a packingPlanDetail by id
     - GET /beta/packingPlanDetail/duplicate/{packingPlanDetailId}
     - Returns a duplicated packingPlanDetail identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonTypeId" : 9,
  "masterCartonNo" : 5,
  "quantity" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 2.027123023002321833274663731572218239307403564453125,
  "lineItemId" : 1,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 3,
  "palletNo" : 1,
  "palletTypeId" : 5,
  "packingPlanId" : 6,
  "cartonNo" : 7,
  "masterCartonTypeId" : 2,
  "id" : 0,
  "skuId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 4
}}]
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to be duplicated. 

     - returns: RequestBuilder<PackingPlanDetail> 
     */
    public class func getDuplicatePackingPlanDetailByIdWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32) -> RequestBuilder<PackingPlanDetail> {
        var path = "/beta/packingPlanDetail/duplicate/{packingPlanDetailId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingPlanDetail>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search packingPlanDetails by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanDetailByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [PackingPlanDetail]?, error: ErrorType?) -> Void)) {
        getPackingPlanDetailByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search packingPlanDetails by filter
     - GET /beta/packingPlanDetail/search
     - Returns the list of packingPlanDetails that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "cartonTypeId" : 9,
  "masterCartonNo" : 5,
  "quantity" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 2.027123023002321833274663731572218239307403564453125,
  "lineItemId" : 1,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 3,
  "palletNo" : 1,
  "palletTypeId" : 5,
  "packingPlanId" : 6,
  "cartonNo" : 7,
  "masterCartonTypeId" : 2,
  "id" : 0,
  "skuId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 4
}, {
  "cartonTypeId" : 9,
  "masterCartonNo" : 5,
  "quantity" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 2.027123023002321833274663731572218239307403564453125,
  "lineItemId" : 1,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 3,
  "palletNo" : 1,
  "palletTypeId" : 5,
  "packingPlanId" : 6,
  "cartonNo" : 7,
  "masterCartonTypeId" : 2,
  "id" : 0,
  "skuId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 4
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[PackingPlanDetail]> 
     */
    public class func getPackingPlanDetailByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[PackingPlanDetail]> {
        let path = "/beta/packingPlanDetail/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PackingPlanDetail]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a packingPlanDetail by id
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanDetailById(packingPlanDetailId packingPlanDetailId: Int32, completion: ((data: PackingPlanDetail?, error: ErrorType?) -> Void)) {
        getPackingPlanDetailByIdWithRequestBuilder(packingPlanDetailId: packingPlanDetailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a packingPlanDetail by id
     - GET /beta/packingPlanDetail/{packingPlanDetailId}
     - Returns the packingPlanDetail identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonTypeId" : 9,
  "masterCartonNo" : 5,
  "quantity" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "orderId" : 2.027123023002321833274663731572218239307403564453125,
  "lineItemId" : 1,
  "customFields" : {
    "key" : "{}"
  },
  "cartonId" : 3,
  "palletNo" : 1,
  "palletTypeId" : 5,
  "packingPlanId" : 6,
  "cartonNo" : 7,
  "masterCartonTypeId" : 2,
  "id" : 0,
  "skuId" : 7,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 4
}}]
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to be returned. 

     - returns: RequestBuilder<PackingPlanDetail> 
     */
    public class func getPackingPlanDetailByIdWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32) -> RequestBuilder<PackingPlanDetail> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PackingPlanDetail>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a packingPlanDetail.
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanDetailFiles(packingPlanDetailId packingPlanDetailId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPackingPlanDetailFilesWithRequestBuilder(packingPlanDetailId: packingPlanDetailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a packingPlanDetail.
     - GET /beta/packingPlanDetail/{packingPlanDetailId}/file
     - Get all existing packingPlanDetail files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPackingPlanDetailFilesWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/file"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a packingPlanDetail.
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackingPlanDetailTags(packingPlanDetailId packingPlanDetailId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getPackingPlanDetailTagsWithRequestBuilder(packingPlanDetailId: packingPlanDetailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a packingPlanDetail.
     - GET /beta/packingPlanDetail/{packingPlanDetailId}/tag
     - Get all existing packingPlanDetail tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter packingPlanDetailId: (path) Id of the packingPlanDetail to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getPackingPlanDetailTagsWithRequestBuilder(packingPlanDetailId packingPlanDetailId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/packingPlanDetail/{packingPlanDetailId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{packingPlanDetailId}", withString: "\(packingPlanDetailId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a packingPlanDetail custom fields
     
     - parameter body: (body) PackingPlanDetail to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updatePackingPlanDetailCustomFields(body body: PackingPlanDetail, completion: ((error: ErrorType?) -> Void)) {
        updatePackingPlanDetailCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a packingPlanDetail custom fields
     - PUT /beta/packingPlanDetail/customFields
     - Updates an existing packingPlanDetail custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) PackingPlanDetail to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updatePackingPlanDetailCustomFieldsWithRequestBuilder(body body: PackingPlanDetail) -> RequestBuilder<Void> {
        let path = "/beta/packingPlanDetail/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
