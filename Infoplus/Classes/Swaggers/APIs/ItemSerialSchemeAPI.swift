//
// ItemSerialSchemeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemSerialSchemeAPI: APIBase {
    /**
     Create an itemSerialScheme
     
     - parameter body: (body) ItemSerialScheme to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialScheme(body body: ItemSerialScheme, completion: ((data: ItemSerialScheme?, error: ErrorType?) -> Void)) {
        addItemSerialSchemeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an itemSerialScheme
     - POST /beta/itemSerialScheme
     - Inserts a new itemSerialScheme using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "shippingBehavior" : "shippingBehavior",
  "id" : 0,
  "receivingBehavior" : "receivingBehavior",
  "requireUnique" : "requireUnique",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) ItemSerialScheme to be inserted. 

     - returns: RequestBuilder<ItemSerialScheme> 
     */
    public class func addItemSerialSchemeWithRequestBuilder(body body: ItemSerialScheme) -> RequestBuilder<ItemSerialScheme> {
        let path = "/beta/itemSerialScheme"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSerialScheme>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an itemSerialScheme
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to add an audit to 
     - parameter itemSerialSchemeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialSchemeAudit(itemSerialSchemeId itemSerialSchemeId: Int32, itemSerialSchemeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSerialSchemeAuditWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId, itemSerialSchemeAudit: itemSerialSchemeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an itemSerialScheme
     - PUT /beta/itemSerialScheme/{itemSerialSchemeId}/audit/{itemSerialSchemeAudit}
     - Adds an audit to an existing itemSerialScheme.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to add an audit to 
     - parameter itemSerialSchemeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSerialSchemeAuditWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32, itemSerialSchemeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerialScheme/{itemSerialSchemeId}/audit/{itemSerialSchemeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeAudit}", withString: "\(itemSerialSchemeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an itemSerialScheme.
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to add a tag to 
     - parameter itemSerialSchemeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialSchemeTag(itemSerialSchemeId itemSerialSchemeId: Int32, itemSerialSchemeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSerialSchemeTagWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId, itemSerialSchemeTag: itemSerialSchemeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an itemSerialScheme.
     - PUT /beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}
     - Adds a tag to an existing itemSerialScheme.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to add a tag to 
     - parameter itemSerialSchemeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSerialSchemeTagWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32, itemSerialSchemeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeTag}", withString: "\(itemSerialSchemeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an itemSerialScheme
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSerialScheme(itemSerialSchemeId itemSerialSchemeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSerialSchemeWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an itemSerialScheme
     - DELETE /beta/itemSerialScheme/{itemSerialSchemeId}
     - Deletes the itemSerialScheme identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSerialSchemeWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerialScheme/{itemSerialSchemeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an itemSerialScheme.
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to remove tag from 
     - parameter itemSerialSchemeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSerialSchemeTag(itemSerialSchemeId itemSerialSchemeId: Int32, itemSerialSchemeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSerialSchemeTagWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId, itemSerialSchemeTag: itemSerialSchemeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an itemSerialScheme.
     - DELETE /beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}
     - Deletes an existing itemSerialScheme tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to remove tag from 
     - parameter itemSerialSchemeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSerialSchemeTagWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32, itemSerialSchemeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag/{itemSerialSchemeTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeTag}", withString: "\(itemSerialSchemeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an itemSerialScheme by id
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemSerialSchemeById(itemSerialSchemeId itemSerialSchemeId: Int32, completion: ((data: ItemSerialScheme?, error: ErrorType?) -> Void)) {
        getDuplicateItemSerialSchemeByIdWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an itemSerialScheme by id
     - GET /beta/itemSerialScheme/duplicate/{itemSerialSchemeId}
     - Returns a duplicated itemSerialScheme identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "shippingBehavior" : "shippingBehavior",
  "id" : 0,
  "receivingBehavior" : "receivingBehavior",
  "requireUnique" : "requireUnique",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to be duplicated. 

     - returns: RequestBuilder<ItemSerialScheme> 
     */
    public class func getDuplicateItemSerialSchemeByIdWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32) -> RequestBuilder<ItemSerialScheme> {
        var path = "/beta/itemSerialScheme/duplicate/{itemSerialSchemeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSerialScheme>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search itemSerialSchemes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialSchemeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ItemSerialScheme]?, error: ErrorType?) -> Void)) {
        getItemSerialSchemeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search itemSerialSchemes by filter
     - GET /beta/itemSerialScheme/search
     - Returns the list of itemSerialSchemes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "shippingBehavior" : "shippingBehavior",
  "id" : 0,
  "receivingBehavior" : "receivingBehavior",
  "requireUnique" : "requireUnique",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "shippingBehavior" : "shippingBehavior",
  "id" : 0,
  "receivingBehavior" : "receivingBehavior",
  "requireUnique" : "requireUnique",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemSerialScheme]> 
     */
    public class func getItemSerialSchemeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ItemSerialScheme]> {
        let path = "/beta/itemSerialScheme/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ItemSerialScheme]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an itemSerialScheme by id
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialSchemeById(itemSerialSchemeId itemSerialSchemeId: Int32, completion: ((data: ItemSerialScheme?, error: ErrorType?) -> Void)) {
        getItemSerialSchemeByIdWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an itemSerialScheme by id
     - GET /beta/itemSerialScheme/{itemSerialSchemeId}
     - Returns the itemSerialScheme identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "shippingBehavior" : "shippingBehavior",
  "id" : 0,
  "receivingBehavior" : "receivingBehavior",
  "requireUnique" : "requireUnique",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to be returned. 

     - returns: RequestBuilder<ItemSerialScheme> 
     */
    public class func getItemSerialSchemeByIdWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32) -> RequestBuilder<ItemSerialScheme> {
        var path = "/beta/itemSerialScheme/{itemSerialSchemeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSerialScheme>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an itemSerialScheme.
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialSchemeTags(itemSerialSchemeId itemSerialSchemeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemSerialSchemeTagsWithRequestBuilder(itemSerialSchemeId: itemSerialSchemeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an itemSerialScheme.
     - GET /beta/itemSerialScheme/{itemSerialSchemeId}/tag
     - Get all existing itemSerialScheme tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialSchemeId: (path) Id of the itemSerialScheme to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemSerialSchemeTagsWithRequestBuilder(itemSerialSchemeId itemSerialSchemeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerialScheme/{itemSerialSchemeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialSchemeId}", withString: "\(itemSerialSchemeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an itemSerialScheme
     
     - parameter body: (body) ItemSerialScheme to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemSerialScheme(body body: ItemSerialScheme, completion: ((error: ErrorType?) -> Void)) {
        updateItemSerialSchemeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an itemSerialScheme
     - PUT /beta/itemSerialScheme
     - Updates an existing itemSerialScheme using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemSerialScheme to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemSerialSchemeWithRequestBuilder(body body: ItemSerialScheme) -> RequestBuilder<Void> {
        let path = "/beta/itemSerialScheme"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
