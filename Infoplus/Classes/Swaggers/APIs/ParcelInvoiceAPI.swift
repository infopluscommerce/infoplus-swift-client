//
// ParcelInvoiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ParcelInvoiceAPI: APIBase {
    /**
     Add new audit for a parcelInvoice
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to add an audit to 
     - parameter parcelInvoiceAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelInvoiceAudit(parcelInvoiceId parcelInvoiceId: Int32, parcelInvoiceAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addParcelInvoiceAuditWithRequestBuilder(parcelInvoiceId: parcelInvoiceId, parcelInvoiceAudit: parcelInvoiceAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a parcelInvoice
     - PUT /beta/parcelInvoice/{parcelInvoiceId}/audit/{parcelInvoiceAudit}
     - Adds an audit to an existing parcelInvoice.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to add an audit to 
     - parameter parcelInvoiceAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelInvoiceAuditWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32, parcelInvoiceAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}/audit/{parcelInvoiceAudit}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceAudit}", withString: "\(parcelInvoiceAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a parcelInvoice
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelInvoiceFile(parcelInvoiceId parcelInvoiceId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addParcelInvoiceFileWithRequestBuilder(parcelInvoiceId: parcelInvoiceId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a parcelInvoice
     - POST /beta/parcelInvoice/{parcelInvoiceId}/file/{fileName}
     - Adds a file to an existing parcelInvoice.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelInvoiceFileWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a parcelInvoice.
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to add a tag to 
     - parameter parcelInvoiceTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addParcelInvoiceTag(parcelInvoiceId parcelInvoiceId: Int32, parcelInvoiceTag: String, completion: ((error: ErrorType?) -> Void)) {
        addParcelInvoiceTagWithRequestBuilder(parcelInvoiceId: parcelInvoiceId, parcelInvoiceTag: parcelInvoiceTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a parcelInvoice.
     - PUT /beta/parcelInvoice/{parcelInvoiceId}/tag/{parcelInvoiceTag}
     - Adds a tag to an existing parcelInvoice.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to add a tag to 
     - parameter parcelInvoiceTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addParcelInvoiceTagWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32, parcelInvoiceTag: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}/tag/{parcelInvoiceTag}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceTag}", withString: "\(parcelInvoiceTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a parcelInvoice
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteParcelInvoice(parcelInvoiceId parcelInvoiceId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteParcelInvoiceWithRequestBuilder(parcelInvoiceId: parcelInvoiceId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a parcelInvoice
     - DELETE /beta/parcelInvoice/{parcelInvoiceId}
     - Deletes the parcelInvoice identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteParcelInvoiceWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a parcelInvoice.
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to remove tag from 
     - parameter parcelInvoiceTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteParcelInvoiceTag(parcelInvoiceId parcelInvoiceId: Int32, parcelInvoiceTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteParcelInvoiceTagWithRequestBuilder(parcelInvoiceId: parcelInvoiceId, parcelInvoiceTag: parcelInvoiceTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a parcelInvoice.
     - DELETE /beta/parcelInvoice/{parcelInvoiceId}/tag/{parcelInvoiceTag}
     - Deletes an existing parcelInvoice tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to remove tag from 
     - parameter parcelInvoiceTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteParcelInvoiceTagWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32, parcelInvoiceTag: String) -> RequestBuilder<Void> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}/tag/{parcelInvoiceTag}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceTag}", withString: "\(parcelInvoiceTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a parcelInvoice by id
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateParcelInvoiceById(parcelInvoiceId parcelInvoiceId: Int32, completion: ((data: ParcelInvoice?, error: ErrorType?) -> Void)) {
        getDuplicateParcelInvoiceByIdWithRequestBuilder(parcelInvoiceId: parcelInvoiceId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a parcelInvoice by id
     - GET /beta/parcelInvoice/duplicate/{parcelInvoiceId}
     - Returns a duplicated parcelInvoice identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "invoiceAmount" : 6.02745618307040320615897144307382404804229736328125,
  "id" : 0,
  "invoiceNo" : "invoiceNo",
  "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to be duplicated. 

     - returns: RequestBuilder<ParcelInvoice> 
     */
    public class func getDuplicateParcelInvoiceByIdWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32) -> RequestBuilder<ParcelInvoice> {
        var path = "/beta/parcelInvoice/duplicate/{parcelInvoiceId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ParcelInvoice>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search parcelInvoices by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelInvoiceByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ParcelInvoice]?, error: ErrorType?) -> Void)) {
        getParcelInvoiceByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search parcelInvoices by filter
     - GET /beta/parcelInvoice/search
     - Returns the list of parcelInvoices that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "invoiceAmount" : 6.02745618307040320615897144307382404804229736328125,
  "id" : 0,
  "invoiceNo" : "invoiceNo",
  "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "invoiceAmount" : 6.02745618307040320615897144307382404804229736328125,
  "id" : 0,
  "invoiceNo" : "invoiceNo",
  "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ParcelInvoice]> 
     */
    public class func getParcelInvoiceByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ParcelInvoice]> {
        let path = "/beta/parcelInvoice/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ParcelInvoice]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a parcelInvoice by id
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelInvoiceById(parcelInvoiceId parcelInvoiceId: Int32, completion: ((data: ParcelInvoice?, error: ErrorType?) -> Void)) {
        getParcelInvoiceByIdWithRequestBuilder(parcelInvoiceId: parcelInvoiceId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a parcelInvoice by id
     - GET /beta/parcelInvoice/{parcelInvoiceId}
     - Returns the parcelInvoice identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "carrier" : "carrier",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "accountNo" : "accountNo",
  "invoiceAmount" : 6.02745618307040320615897144307382404804229736328125,
  "id" : 0,
  "invoiceNo" : "invoiceNo",
  "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to be returned. 

     - returns: RequestBuilder<ParcelInvoice> 
     */
    public class func getParcelInvoiceByIdWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32) -> RequestBuilder<ParcelInvoice> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ParcelInvoice>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a parcelInvoice.
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getParcelInvoiceTags(parcelInvoiceId parcelInvoiceId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getParcelInvoiceTagsWithRequestBuilder(parcelInvoiceId: parcelInvoiceId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a parcelInvoice.
     - GET /beta/parcelInvoice/{parcelInvoiceId}/tag
     - Get all existing parcelInvoice tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter parcelInvoiceId: (path) Id of the parcelInvoice to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getParcelInvoiceTagsWithRequestBuilder(parcelInvoiceId parcelInvoiceId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/parcelInvoice/{parcelInvoiceId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{parcelInvoiceId}", withString: "\(parcelInvoiceId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
