//
// CartonAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CartonAPI: APIBase {
    /**
     
     Create a carton
     
     - parameter body: (body) Carton to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addCarton(body body: Carton, completion: ((data: Carton?, error: ErrorType?) -> Void)) {
        addCartonWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a carton
     
     - POST /beta/carton
     - Inserts a new carton using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonNo" : 123,
  "cartonTypeId" : 123,
  "weightLbs" : 1.3579000000000001069366817318950779736042022705078125,
  "orderNo" : 1.3579000000000001069366817318950779736042022705078125,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "cartonLPN" : "aeiou"
}}]
     
     - parameter body: (body) Carton to be inserted. 

     - returns: RequestBuilder<Carton> 
     */
    public class func addCartonWithRequestBuilder(body body: Carton) -> RequestBuilder<Carton> {
        let path = "/beta/carton"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Carton>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a carton
     
     - parameter cartonId: (path) Id of the carton to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCarton(cartonId cartonId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteCartonWithRequestBuilder(cartonId: cartonId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a carton
     
     - DELETE /beta/carton/{cartonId}
     - Deletes the carton identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter cartonId: (path) Id of the carton to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCartonWithRequestBuilder(cartonId cartonId: Int) -> RequestBuilder<Void> {
        var path = "/beta/carton/{cartonId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonId}", withString: "\(cartonId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search cartons by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Carton]?, error: ErrorType?) -> Void)) {
        getCartonByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search cartons by filter
     
     - GET /beta/carton/search
     - Returns the list of cartons that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "cartonNo" : 123,
  "cartonTypeId" : 123,
  "weightLbs" : 1.3579000000000001069366817318950779736042022705078125,
  "orderNo" : 1.3579000000000001069366817318950779736042022705078125,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "cartonLPN" : "aeiou"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Carton]> 
     */
    public class func getCartonByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Carton]> {
        let path = "/beta/carton/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Carton]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a carton by id
     
     - parameter cartonId: (path) Id of the carton to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCartonById(cartonId cartonId: Int, completion: ((data: Carton?, error: ErrorType?) -> Void)) {
        getCartonByIdWithRequestBuilder(cartonId: cartonId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a carton by id
     
     - GET /beta/carton/{cartonId}
     - Returns the carton identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "cartonNo" : 123,
  "cartonTypeId" : 123,
  "weightLbs" : 1.3579000000000001069366817318950779736042022705078125,
  "orderNo" : 1.3579000000000001069366817318950779736042022705078125,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 123,
  "cartonLPN" : "aeiou"
}}]
     
     - parameter cartonId: (path) Id of the carton to be returned. 

     - returns: RequestBuilder<Carton> 
     */
    public class func getCartonByIdWithRequestBuilder(cartonId cartonId: Int) -> RequestBuilder<Carton> {
        var path = "/beta/carton/{cartonId}"
        path = path.stringByReplacingOccurrencesOfString("{cartonId}", withString: "\(cartonId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Carton>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a carton
     
     - parameter body: (body) Carton to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCarton(body body: Carton, completion: ((error: ErrorType?) -> Void)) {
        updateCartonWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a carton
     
     - PUT /beta/carton
     - Updates an existing carton using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Carton to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCartonWithRequestBuilder(body body: Carton) -> RequestBuilder<Void> {
        let path = "/beta/carton"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a carton custom fields
     
     - parameter body: (body) Carton to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateCartonCustomFields(body body: Carton, completion: ((error: ErrorType?) -> Void)) {
        updateCartonCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a carton custom fields
     
     - PUT /beta/carton/customFields
     - Updates an existing carton custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Carton to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateCartonCustomFieldsWithRequestBuilder(body body: Carton) -> RequestBuilder<Void> {
        let path = "/beta/carton/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
