//
// SubstitutionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SubstitutionAPI: APIBase {
    /**
     
     Create a substitution
     
     - parameter body: (body) Substitution to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubstitution(body body: Substitution, completion: ((data: Substitution?, error: ErrorType?) -> Void)) {
        addSubstitutionWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a substitution
     
     - POST /v2.0/substitution
     - Inserts a new substitution using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "period" : "aeiou",
  "orderSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "substituteSKUId" : 123
}}]
     
     - parameter body: (body) Substitution to be inserted. 

     - returns: RequestBuilder<Substitution> 
     */
    public class func addSubstitutionWithRequestBuilder(body body: Substitution) -> RequestBuilder<Substitution> {
        let path = "/v2.0/substitution"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Substitution>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a substitution
     
     - parameter substitutionId: (path) Id of the substitution to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubstitution(substitutionId substitutionId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteSubstitutionWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a substitution
     
     - DELETE /v2.0/substitution/{substitutionId}
     - Deletes the substitution identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubstitutionWithRequestBuilder(substitutionId substitutionId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/substitution/{substitutionId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated a substitution by id
     
     - parameter substitutionId: (path) Id of the substitution to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateSubstitutionById(substitutionId substitutionId: Int, completion: ((data: Substitution?, error: ErrorType?) -> Void)) {
        getDuplicateSubstitutionByIdWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated a substitution by id
     
     - GET /v2.0/substitution/duplicate/{substitutionId}
     - Returns a duplicated substitution identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "period" : "aeiou",
  "orderSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "substituteSKUId" : 123
}}]
     
     - parameter substitutionId: (path) Id of the substitution to be duplicated. 

     - returns: RequestBuilder<Substitution> 
     */
    public class func getDuplicateSubstitutionByIdWithRequestBuilder(substitutionId substitutionId: Int) -> RequestBuilder<Substitution> {
        var path = "/v2.0/substitution/duplicate/{substitutionId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Substitution>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search substitutions by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubstitutionByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [Substitution]?, error: ErrorType?) -> Void)) {
        getSubstitutionByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search substitutions by filter
     
     - GET /v2.0/substitution/search
     - Returns the list of substitutions that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "period" : "aeiou",
  "orderSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "substituteSKUId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Substitution]> 
     */
    public class func getSubstitutionByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[Substitution]> {
        let path = "/v2.0/substitution/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[Substitution]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a substitution by id
     
     - parameter substitutionId: (path) Id of the substitution to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubstitutionById(substitutionId substitutionId: Int, completion: ((data: Substitution?, error: ErrorType?) -> Void)) {
        getSubstitutionByIdWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a substitution by id
     
     - GET /v2.0/substitution/{substitutionId}
     - Returns the substitution identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "period" : "aeiou",
  "orderSKUId" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "type" : "aeiou",
  "lobId" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "substituteSKUId" : 123
}}]
     
     - parameter substitutionId: (path) Id of the substitution to be returned. 

     - returns: RequestBuilder<Substitution> 
     */
    public class func getSubstitutionByIdWithRequestBuilder(substitutionId substitutionId: Int) -> RequestBuilder<Substitution> {
        var path = "/v2.0/substitution/{substitutionId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Substitution>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a substitution
     
     - parameter body: (body) Substitution to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSubstitution(body body: Substitution, completion: ((error: ErrorType?) -> Void)) {
        updateSubstitutionWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a substitution
     
     - PUT /v2.0/substitution
     - Updates an existing substitution using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Substitution to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSubstitutionWithRequestBuilder(body body: Substitution) -> RequestBuilder<Void> {
        let path = "/v2.0/substitution"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a substitution custom fields
     
     - parameter body: (body) Substitution to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSubstitutionCustomFields(body body: Substitution, completion: ((error: ErrorType?) -> Void)) {
        updateSubstitutionCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a substitution custom fields
     
     - PUT /v2.0/substitution/customFields
     - Updates an existing substitution custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Substitution to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSubstitutionCustomFieldsWithRequestBuilder(body body: Substitution) -> RequestBuilder<Void> {
        let path = "/v2.0/substitution/customFields"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
