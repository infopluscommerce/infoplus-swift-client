//
// SubstitutionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SubstitutionAPI: APIBase {
    /**
     Create a substitution
     
     - parameter body: (body) Substitution to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubstitution(body body: Substitution, completion: ((data: Substitution?, error: ErrorType?) -> Void)) {
        addSubstitutionWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a substitution
     - POST /beta/substitution
     - Inserts a new substitution using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "period" : "period",
  "substituteSKU" : "substituteSKU",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 6,
  "type" : "type",
  "orderSKU" : "orderSKU",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) Substitution to be inserted. 

     - returns: RequestBuilder<Substitution> 
     */
    public class func addSubstitutionWithRequestBuilder(body body: Substitution) -> RequestBuilder<Substitution> {
        let path = "/beta/substitution"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Substitution>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a substitution
     
     - parameter substitutionId: (path) Id of the substitution to add an audit to 
     - parameter substitutionAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubstitutionAudit(substitutionId substitutionId: Int32, substitutionAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addSubstitutionAuditWithRequestBuilder(substitutionId: substitutionId, substitutionAudit: substitutionAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a substitution
     - PUT /beta/substitution/{substitutionId}/audit/{substitutionAudit}
     - Adds an audit to an existing substitution.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to add an audit to 
     - parameter substitutionAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addSubstitutionAuditWithRequestBuilder(substitutionId substitutionId: Int32, substitutionAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/audit/{substitutionAudit}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{substitutionAudit}", withString: "\(substitutionAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a substitution
     
     - parameter substitutionId: (path) Id of the substitution to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubstitutionFile(substitutionId substitutionId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addSubstitutionFileWithRequestBuilder(substitutionId: substitutionId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a substitution
     - POST /beta/substitution/{substitutionId}/file/{fileName}
     - Adds a file to an existing substitution.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addSubstitutionFileWithRequestBuilder(substitutionId substitutionId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a substitution by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter substitutionId: (path) Id of the substitution to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubstitutionFileByURL(body body: RecordFile, substitutionId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addSubstitutionFileByURLWithRequestBuilder(body: body, substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a substitution by URL.
     - POST /beta/substitution/{substitutionId}/file
     - Adds a file to an existing substitution by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter substitutionId: (path) Id of the substitution to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addSubstitutionFileByURLWithRequestBuilder(body body: RecordFile, substitutionId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/file"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a substitution.
     
     - parameter substitutionId: (path) Id of the substitution to add a tag to 
     - parameter substitutionTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addSubstitutionTag(substitutionId substitutionId: Int32, substitutionTag: String, completion: ((error: ErrorType?) -> Void)) {
        addSubstitutionTagWithRequestBuilder(substitutionId: substitutionId, substitutionTag: substitutionTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a substitution.
     - PUT /beta/substitution/{substitutionId}/tag/{substitutionTag}
     - Adds a tag to an existing substitution.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to add a tag to 
     - parameter substitutionTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addSubstitutionTagWithRequestBuilder(substitutionId substitutionId: Int32, substitutionTag: String) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/tag/{substitutionTag}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{substitutionTag}", withString: "\(substitutionTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a substitution
     
     - parameter substitutionId: (path) Id of the substitution to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubstitution(substitutionId substitutionId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteSubstitutionWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a substitution
     - DELETE /beta/substitution/{substitutionId}
     - Deletes the substitution identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubstitutionWithRequestBuilder(substitutionId substitutionId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a substitution.
     
     - parameter substitutionId: (path) Id of the substitution to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubstitutionFile(substitutionId substitutionId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteSubstitutionFileWithRequestBuilder(substitutionId: substitutionId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a substitution.
     - DELETE /beta/substitution/{substitutionId}/file/{fileId}
     - Deletes an existing substitution file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubstitutionFileWithRequestBuilder(substitutionId substitutionId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a substitution.
     
     - parameter substitutionId: (path) Id of the substitution to remove tag from 
     - parameter substitutionTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubstitutionTag(substitutionId substitutionId: Int32, substitutionTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteSubstitutionTagWithRequestBuilder(substitutionId: substitutionId, substitutionTag: substitutionTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a substitution.
     - DELETE /beta/substitution/{substitutionId}/tag/{substitutionTag}
     - Deletes an existing substitution tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to remove tag from 
     - parameter substitutionTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubstitutionTagWithRequestBuilder(substitutionId substitutionId: Int32, substitutionTag: String) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/tag/{substitutionTag}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{substitutionTag}", withString: "\(substitutionTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a substitution by id
     
     - parameter substitutionId: (path) Id of the substitution to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateSubstitutionById(substitutionId substitutionId: Int32, completion: ((data: Substitution?, error: ErrorType?) -> Void)) {
        getDuplicateSubstitutionByIdWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a substitution by id
     - GET /beta/substitution/duplicate/{substitutionId}
     - Returns a duplicated substitution identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "period" : "period",
  "substituteSKU" : "substituteSKU",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 6,
  "type" : "type",
  "orderSKU" : "orderSKU",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter substitutionId: (path) Id of the substitution to be duplicated. 

     - returns: RequestBuilder<Substitution> 
     */
    public class func getDuplicateSubstitutionByIdWithRequestBuilder(substitutionId substitutionId: Int32) -> RequestBuilder<Substitution> {
        var path = "/beta/substitution/duplicate/{substitutionId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Substitution>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search substitutions by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubstitutionByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Substitution]?, error: ErrorType?) -> Void)) {
        getSubstitutionByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search substitutions by filter
     - GET /beta/substitution/search
     - Returns the list of substitutions that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "period" : "period",
  "substituteSKU" : "substituteSKU",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 6,
  "type" : "type",
  "orderSKU" : "orderSKU",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "period" : "period",
  "substituteSKU" : "substituteSKU",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 6,
  "type" : "type",
  "orderSKU" : "orderSKU",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Substitution]> 
     */
    public class func getSubstitutionByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Substitution]> {
        let path = "/beta/substitution/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Substitution]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a substitution by id
     
     - parameter substitutionId: (path) Id of the substitution to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubstitutionById(substitutionId substitutionId: Int32, completion: ((data: Substitution?, error: ErrorType?) -> Void)) {
        getSubstitutionByIdWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a substitution by id
     - GET /beta/substitution/{substitutionId}
     - Returns the substitution identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "period" : "period",
  "substituteSKU" : "substituteSKU",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "substitutionQuantity" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 6,
  "type" : "type",
  "orderSKU" : "orderSKU",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter substitutionId: (path) Id of the substitution to be returned. 

     - returns: RequestBuilder<Substitution> 
     */
    public class func getSubstitutionByIdWithRequestBuilder(substitutionId substitutionId: Int32) -> RequestBuilder<Substitution> {
        var path = "/beta/substitution/{substitutionId}"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Substitution>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a substitution.
     
     - parameter substitutionId: (path) Id of the substitution to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubstitutionFiles(substitutionId substitutionId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getSubstitutionFilesWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a substitution.
     - GET /beta/substitution/{substitutionId}/file
     - Get all existing substitution files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getSubstitutionFilesWithRequestBuilder(substitutionId substitutionId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/file"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a substitution.
     
     - parameter substitutionId: (path) Id of the substitution to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubstitutionTags(substitutionId substitutionId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getSubstitutionTagsWithRequestBuilder(substitutionId: substitutionId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a substitution.
     - GET /beta/substitution/{substitutionId}/tag
     - Get all existing substitution tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter substitutionId: (path) Id of the substitution to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getSubstitutionTagsWithRequestBuilder(substitutionId substitutionId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/substitution/{substitutionId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{substitutionId}", withString: "\(substitutionId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a substitution
     
     - parameter body: (body) Substitution to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSubstitution(body body: Substitution, completion: ((error: ErrorType?) -> Void)) {
        updateSubstitutionWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a substitution
     - PUT /beta/substitution
     - Updates an existing substitution using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Substitution to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSubstitutionWithRequestBuilder(body body: Substitution) -> RequestBuilder<Void> {
        let path = "/beta/substitution"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a substitution custom fields
     
     - parameter body: (body) Substitution to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSubstitutionCustomFields(body body: Substitution, completion: ((error: ErrorType?) -> Void)) {
        updateSubstitutionCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a substitution custom fields
     - PUT /beta/substitution/customFields
     - Updates an existing substitution custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Substitution to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSubstitutionCustomFieldsWithRequestBuilder(body body: Substitution) -> RequestBuilder<Void> {
        let path = "/beta/substitution/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
