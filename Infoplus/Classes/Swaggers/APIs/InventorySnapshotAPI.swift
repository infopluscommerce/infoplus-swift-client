//
// InventorySnapshotAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class InventorySnapshotAPI: APIBase {
    /**
     Add new audit for an inventorySnapshot
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to add an audit to 
     - parameter inventorySnapshotAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addInventorySnapshotAudit(inventorySnapshotId inventorySnapshotId: Int32, inventorySnapshotAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addInventorySnapshotAuditWithRequestBuilder(inventorySnapshotId: inventorySnapshotId, inventorySnapshotAudit: inventorySnapshotAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an inventorySnapshot
     - PUT /beta/inventorySnapshot/{inventorySnapshotId}/audit/{inventorySnapshotAudit}
     - Adds an audit to an existing inventorySnapshot.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to add an audit to 
     - parameter inventorySnapshotAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addInventorySnapshotAuditWithRequestBuilder(inventorySnapshotId inventorySnapshotId: Int32, inventorySnapshotAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/inventorySnapshot/{inventorySnapshotId}/audit/{inventorySnapshotAudit}"
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotId}", withString: "\(inventorySnapshotId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotAudit}", withString: "\(inventorySnapshotAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an inventorySnapshot.
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to add a tag to 
     - parameter inventorySnapshotTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addInventorySnapshotTag(inventorySnapshotId inventorySnapshotId: Int32, inventorySnapshotTag: String, completion: ((error: ErrorType?) -> Void)) {
        addInventorySnapshotTagWithRequestBuilder(inventorySnapshotId: inventorySnapshotId, inventorySnapshotTag: inventorySnapshotTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an inventorySnapshot.
     - PUT /beta/inventorySnapshot/{inventorySnapshotId}/tag/{inventorySnapshotTag}
     - Adds a tag to an existing inventorySnapshot.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to add a tag to 
     - parameter inventorySnapshotTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addInventorySnapshotTagWithRequestBuilder(inventorySnapshotId inventorySnapshotId: Int32, inventorySnapshotTag: String) -> RequestBuilder<Void> {
        var path = "/beta/inventorySnapshot/{inventorySnapshotId}/tag/{inventorySnapshotTag}"
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotId}", withString: "\(inventorySnapshotId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotTag}", withString: "\(inventorySnapshotTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an inventorySnapshot.
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to remove tag from 
     - parameter inventorySnapshotTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteInventorySnapshotTag(inventorySnapshotId inventorySnapshotId: Int32, inventorySnapshotTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteInventorySnapshotTagWithRequestBuilder(inventorySnapshotId: inventorySnapshotId, inventorySnapshotTag: inventorySnapshotTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an inventorySnapshot.
     - DELETE /beta/inventorySnapshot/{inventorySnapshotId}/tag/{inventorySnapshotTag}
     - Deletes an existing inventorySnapshot tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to remove tag from 
     - parameter inventorySnapshotTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteInventorySnapshotTagWithRequestBuilder(inventorySnapshotId inventorySnapshotId: Int32, inventorySnapshotTag: String) -> RequestBuilder<Void> {
        var path = "/beta/inventorySnapshot/{inventorySnapshotId}/tag/{inventorySnapshotTag}"
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotId}", withString: "\(inventorySnapshotId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotTag}", withString: "\(inventorySnapshotTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an inventorySnapshot by id
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateInventorySnapshotById(inventorySnapshotId inventorySnapshotId: Int32, completion: ((data: InventorySnapshot?, error: ErrorType?) -> Void)) {
        getDuplicateInventorySnapshotByIdWithRequestBuilder(inventorySnapshotId: inventorySnapshotId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an inventorySnapshot by id
     - GET /beta/inventorySnapshot/duplicate/{inventorySnapshotId}
     - Returns a duplicated inventorySnapshot identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "warehouseLocationPriorityCode" : 9,
  "warehouseLocationFootprintHeight" : 5,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "estimatedPallets" : 9,
  "inventoryValue" : 3.61607674925191080461672754609026014804840087890625,
  "warehouseLocationOriginId" : 1,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 8,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 5,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 0.885137473901165261480628032586537301540374755859375,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 3,
  "alcoholType" : "alcoholType",
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 1,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 4,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 6,
  "itemSubGroupName" : "itemSubGroupName",
  "itemId" : 1,
  "itemMajorGroup" : 3,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 4,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "isMixedReceipts" : false,
  "itemSummaryCode" : 2,
  "warehouseLocationBehaviorTypeId" : 7,
  "alcoholRegion" : "alcoholRegion",
  "alcoholContainer" : "alcoholContainer",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 6,
  "warehouseLocationLevel" : 9,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 6,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 7,
  "warehouseLocationOnline" : false,
  "alcoholCountry" : "alcoholCountry",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 7,
  "receiptCaseWeight" : 7.14353804701230643559028976596891880035400390625,
  "inventoryAgeDays" : 2,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 5,
  "address" : "address",
  "receiptQuantityPerInnerPack" : 6,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 6,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "warehouseLocationFootprintId" : 1,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 2,
  "itemSubGroup" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to be duplicated. 

     - returns: RequestBuilder<InventorySnapshot> 
     */
    public class func getDuplicateInventorySnapshotByIdWithRequestBuilder(inventorySnapshotId inventorySnapshotId: Int32) -> RequestBuilder<InventorySnapshot> {
        var path = "/beta/inventorySnapshot/duplicate/{inventorySnapshotId}"
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotId}", withString: "\(inventorySnapshotId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InventorySnapshot>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search inventorySnapshots by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventorySnapshotByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [InventorySnapshot]?, error: ErrorType?) -> Void)) {
        getInventorySnapshotByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search inventorySnapshots by filter
     - GET /beta/inventorySnapshot/search
     - Returns the list of inventorySnapshots that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "warehouseLocationPriorityCode" : 9,
  "warehouseLocationFootprintHeight" : 5,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "estimatedPallets" : 9,
  "inventoryValue" : 3.61607674925191080461672754609026014804840087890625,
  "warehouseLocationOriginId" : 1,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 8,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 5,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 0.885137473901165261480628032586537301540374755859375,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 3,
  "alcoholType" : "alcoholType",
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 1,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 4,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 6,
  "itemSubGroupName" : "itemSubGroupName",
  "itemId" : 1,
  "itemMajorGroup" : 3,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 4,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "isMixedReceipts" : false,
  "itemSummaryCode" : 2,
  "warehouseLocationBehaviorTypeId" : 7,
  "alcoholRegion" : "alcoholRegion",
  "alcoholContainer" : "alcoholContainer",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 6,
  "warehouseLocationLevel" : 9,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 6,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 7,
  "warehouseLocationOnline" : false,
  "alcoholCountry" : "alcoholCountry",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 7,
  "receiptCaseWeight" : 7.14353804701230643559028976596891880035400390625,
  "inventoryAgeDays" : 2,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 5,
  "address" : "address",
  "receiptQuantityPerInnerPack" : 6,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 6,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "warehouseLocationFootprintId" : 1,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 2,
  "itemSubGroup" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}, {
  "warehouseLocationPriorityCode" : 9,
  "warehouseLocationFootprintHeight" : 5,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "estimatedPallets" : 9,
  "inventoryValue" : 3.61607674925191080461672754609026014804840087890625,
  "warehouseLocationOriginId" : 1,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 8,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 5,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 0.885137473901165261480628032586537301540374755859375,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 3,
  "alcoholType" : "alcoholType",
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 1,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 4,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 6,
  "itemSubGroupName" : "itemSubGroupName",
  "itemId" : 1,
  "itemMajorGroup" : 3,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 4,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "isMixedReceipts" : false,
  "itemSummaryCode" : 2,
  "warehouseLocationBehaviorTypeId" : 7,
  "alcoholRegion" : "alcoholRegion",
  "alcoholContainer" : "alcoholContainer",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 6,
  "warehouseLocationLevel" : 9,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 6,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 7,
  "warehouseLocationOnline" : false,
  "alcoholCountry" : "alcoholCountry",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 7,
  "receiptCaseWeight" : 7.14353804701230643559028976596891880035400390625,
  "inventoryAgeDays" : 2,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 5,
  "address" : "address",
  "receiptQuantityPerInnerPack" : 6,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 6,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "warehouseLocationFootprintId" : 1,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 2,
  "itemSubGroup" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[InventorySnapshot]> 
     */
    public class func getInventorySnapshotByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[InventorySnapshot]> {
        let path = "/beta/inventorySnapshot/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[InventorySnapshot]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an inventorySnapshot by id
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventorySnapshotById(inventorySnapshotId inventorySnapshotId: Int32, completion: ((data: InventorySnapshot?, error: ErrorType?) -> Void)) {
        getInventorySnapshotByIdWithRequestBuilder(inventorySnapshotId: inventorySnapshotId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an inventorySnapshot by id
     - GET /beta/inventorySnapshot/{inventorySnapshotId}
     - Returns the inventorySnapshot identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "warehouseLocationPriorityCode" : 9,
  "warehouseLocationFootprintHeight" : 5,
  "warehouseLocationCost" : 6,
  "itemSector" : "itemSector",
  "estimatedPallets" : 9,
  "inventoryValue" : 3.61607674925191080461672754609026014804840087890625,
  "warehouseLocationOriginId" : 1,
  "receiptDistributionDate" : "2000-01-23T04:56:07.000+00:00",
  "warehouseLocationAllowItemMixing" : false,
  "warehouseLocationNumber" : 8,
  "warehouseAisleAddress" : "warehouseAisleAddress",
  "itemVendorSku" : "itemVendorSku",
  "itemSummaryCodeName" : "itemSummaryCodeName",
  "receiptQuantityPerCase" : 5,
  "alcoholContainerVolume" : 7,
  "poNo" : "poNo",
  "alcoholContent" : 0.885137473901165261480628032586537301540374755859375,
  "receiptReceiveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "sku" : "sku",
  "receiptProductionLot" : "receiptProductionLot",
  "alcoholState" : "alcoholState",
  "alcoholTypeName" : "alcoholTypeName",
  "lobId" : 5,
  "receiptUnitCode" : 3,
  "alcoholType" : "alcoholType",
  "warehouseLocationOriginName" : "warehouseLocationOriginName",
  "warehouseZoneAddress" : "warehouseZoneAddress",
  "itemProductCodeName" : "itemProductCodeName",
  "itemProductCode" : 1,
  "warehouseZoneName" : "warehouseZoneName",
  "warehouseBuildingId" : 1,
  "receiptUnitsPerWrap" : 6,
  "receiptUnitCodeText" : "receiptUnitCodeText",
  "itemAccountCodeName" : "itemAccountCodeName",
  "warehouseLocationFootprintWidth" : 4,
  "alcoholContainerName" : "alcoholContainerName",
  "warehouseLocationBay" : 6,
  "itemSubGroupName" : "itemSubGroupName",
  "itemId" : 1,
  "itemMajorGroup" : 3,
  "warehouseBuildingName" : "warehouseBuildingName",
  "warehouseLocationBillingTypeName" : "warehouseLocationBillingTypeName",
  "warehouseLocationFootprintDepth" : 9,
  "alcoholUPCCode" : "alcoholUPCCode",
  "warehouseId" : 4,
  "warehouseLocationBehaviorTypeName" : "warehouseLocationBehaviorTypeName",
  "itemUpc" : "itemUpc",
  "isMixedReceipts" : false,
  "itemSummaryCode" : 2,
  "warehouseLocationBehaviorTypeId" : 7,
  "alcoholRegion" : "alcoholRegion",
  "alcoholContainer" : "alcoholContainer",
  "receiptStatus" : "receiptStatus",
  "receiptProductIdTag" : "receiptProductIdTag",
  "alcoholSCCCode" : "alcoholSCCCode",
  "customFields" : {
    "key" : "{}"
  },
  "warehouseLocationId" : 6,
  "warehouseLocationLevel" : 9,
  "receiptRevisionDate" : "receiptRevisionDate",
  "warehouseLocationFootprintName" : "warehouseLocationFootprintName",
  "warehouseName" : "warehouseName",
  "warehouseLocationBillingTypeId" : 6,
  "receiptStatusName" : "receiptStatusName",
  "warehouseZoneId" : 7,
  "warehouseLocationOnline" : false,
  "alcoholCountry" : "alcoholCountry",
  "receiptWrapCodeText" : "receiptWrapCodeText",
  "alcoholBrand" : "alcoholBrand",
  "estimatedCases" : 7,
  "receiptCaseWeight" : 7.14353804701230643559028976596891880035400390625,
  "inventoryAgeDays" : 2,
  "snapshotDate" : "2000-01-23T04:56:07.000+00:00",
  "alcoholVintageYear" : "alcoholVintageYear",
  "quantity" : 5,
  "address" : "address",
  "receiptQuantityPerInnerPack" : 6,
  "alcoholCountryName" : "alcoholCountryName",
  "receiptQuantityPerPallet" : 6,
  "alcoholNABCACode" : "alcoholNABCACode",
  "alcoholUNIMERCCode" : "alcoholUNIMERCCode",
  "receiptWrapCode" : 3,
  "warehouseLocationFootprintId" : 1,
  "itemAccountCode" : "itemAccountCode",
  "warehouseAisleId" : 1,
  "estimatedInnerPacks" : 2,
  "itemSubGroup" : 6,
  "itemMajorGroupName" : "itemMajorGroupName"
}}]
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to be returned. 

     - returns: RequestBuilder<InventorySnapshot> 
     */
    public class func getInventorySnapshotByIdWithRequestBuilder(inventorySnapshotId inventorySnapshotId: Int32) -> RequestBuilder<InventorySnapshot> {
        var path = "/beta/inventorySnapshot/{inventorySnapshotId}"
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotId}", withString: "\(inventorySnapshotId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InventorySnapshot>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an inventorySnapshot.
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInventorySnapshotTags(inventorySnapshotId inventorySnapshotId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getInventorySnapshotTagsWithRequestBuilder(inventorySnapshotId: inventorySnapshotId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an inventorySnapshot.
     - GET /beta/inventorySnapshot/{inventorySnapshotId}/tag
     - Get all existing inventorySnapshot tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter inventorySnapshotId: (path) Id of the inventorySnapshot to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getInventorySnapshotTagsWithRequestBuilder(inventorySnapshotId inventorySnapshotId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/inventorySnapshot/{inventorySnapshotId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{inventorySnapshotId}", withString: "\(inventorySnapshotId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
