//
// ItemSerialAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemSerialAPI: APIBase {
    /**
     Create an itemSerial
     
     - parameter body: (body) ItemSerial to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerial(body body: ItemSerial, completion: ((data: ItemSerial?, error: ErrorType?) -> Void)) {
        addItemSerialWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an itemSerial
     - POST /beta/itemSerial
     - Inserts a new itemSerial using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "customFields" : {
    "key" : "{}"
  },
  "orderNoId" : 5.63737665663332876420099637471139430999755859375,
  "s11" : "s11",
  "s10" : "s10",
  "s13" : "s13",
  "s12" : "s12",
  "s15" : "s15",
  "s14" : "s14",
  "s17" : "s17",
  "s16" : "s16",
  "s19" : "s19",
  "id" : 0,
  "s18" : "s18",
  "sku" : "sku",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "s0" : "s0",
  "s1" : "s1",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "s2" : "s2",
  "s3" : "s3",
  "s4" : "s4",
  "s5" : "s5",
  "s6" : "s6",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "s7" : "s7",
  "s8" : "s8",
  "s9" : "s9",
  "inInventory" : false,
  "serial" : "serial",
  "asnId" : 5,
  "itemReceiptId" : 6,
  "shippedDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) ItemSerial to be inserted. 

     - returns: RequestBuilder<ItemSerial> 
     */
    public class func addItemSerialWithRequestBuilder(body body: ItemSerial) -> RequestBuilder<ItemSerial> {
        let path = "/beta/itemSerial"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSerial>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an itemSerial
     
     - parameter itemSerialId: (path) Id of the itemSerial to add an audit to 
     - parameter itemSerialAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialAudit(itemSerialId itemSerialId: Int32, itemSerialAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSerialAuditWithRequestBuilder(itemSerialId: itemSerialId, itemSerialAudit: itemSerialAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an itemSerial
     - PUT /beta/itemSerial/{itemSerialId}/audit/{itemSerialAudit}
     - Adds an audit to an existing itemSerial.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to add an audit to 
     - parameter itemSerialAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSerialAuditWithRequestBuilder(itemSerialId itemSerialId: Int32, itemSerialAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/audit/{itemSerialAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSerialAudit}", withString: "\(itemSerialAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an itemSerial
     
     - parameter itemSerialId: (path) Id of the itemSerial to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialFile(itemSerialId itemSerialId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSerialFileWithRequestBuilder(itemSerialId: itemSerialId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an itemSerial
     - POST /beta/itemSerial/{itemSerialId}/file/{fileName}
     - Adds a file to an existing itemSerial.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSerialFileWithRequestBuilder(itemSerialId itemSerialId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an itemSerial by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter itemSerialId: (path) Id of the itemSerial to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialFileByURL(body body: RecordFile, itemSerialId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addItemSerialFileByURLWithRequestBuilder(body: body, itemSerialId: itemSerialId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an itemSerial by URL.
     - POST /beta/itemSerial/{itemSerialId}/file
     - Adds a file to an existing itemSerial by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter itemSerialId: (path) Id of the itemSerial to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSerialFileByURLWithRequestBuilder(body body: RecordFile, itemSerialId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/file"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an itemSerial.
     
     - parameter itemSerialId: (path) Id of the itemSerial to add a tag to 
     - parameter itemSerialTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemSerialTag(itemSerialId itemSerialId: Int32, itemSerialTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemSerialTagWithRequestBuilder(itemSerialId: itemSerialId, itemSerialTag: itemSerialTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an itemSerial.
     - PUT /beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}
     - Adds a tag to an existing itemSerial.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to add a tag to 
     - parameter itemSerialTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemSerialTagWithRequestBuilder(itemSerialId itemSerialId: Int32, itemSerialTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSerialTag}", withString: "\(itemSerialTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an itemSerial
     
     - parameter itemSerialId: (path) Id of the itemSerial to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSerial(itemSerialId itemSerialId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSerialWithRequestBuilder(itemSerialId: itemSerialId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an itemSerial
     - DELETE /beta/itemSerial/{itemSerialId}
     - Deletes the itemSerial identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSerialWithRequestBuilder(itemSerialId itemSerialId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an itemSerial.
     
     - parameter itemSerialId: (path) Id of the itemSerial to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSerialFile(itemSerialId itemSerialId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSerialFileWithRequestBuilder(itemSerialId: itemSerialId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an itemSerial.
     - DELETE /beta/itemSerial/{itemSerialId}/file/{fileId}
     - Deletes an existing itemSerial file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSerialFileWithRequestBuilder(itemSerialId itemSerialId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an itemSerial.
     
     - parameter itemSerialId: (path) Id of the itemSerial to remove tag from 
     - parameter itemSerialTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemSerialTag(itemSerialId itemSerialId: Int32, itemSerialTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemSerialTagWithRequestBuilder(itemSerialId: itemSerialId, itemSerialTag: itemSerialTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an itemSerial.
     - DELETE /beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}
     - Deletes an existing itemSerial tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to remove tag from 
     - parameter itemSerialTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemSerialTagWithRequestBuilder(itemSerialId itemSerialId: Int32, itemSerialTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/tag/{itemSerialTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemSerialTag}", withString: "\(itemSerialTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an itemSerial by id
     
     - parameter itemSerialId: (path) Id of the itemSerial to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemSerialById(itemSerialId itemSerialId: Int32, completion: ((data: ItemSerial?, error: ErrorType?) -> Void)) {
        getDuplicateItemSerialByIdWithRequestBuilder(itemSerialId: itemSerialId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an itemSerial by id
     - GET /beta/itemSerial/duplicate/{itemSerialId}
     - Returns a duplicated itemSerial identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "customFields" : {
    "key" : "{}"
  },
  "orderNoId" : 5.63737665663332876420099637471139430999755859375,
  "s11" : "s11",
  "s10" : "s10",
  "s13" : "s13",
  "s12" : "s12",
  "s15" : "s15",
  "s14" : "s14",
  "s17" : "s17",
  "s16" : "s16",
  "s19" : "s19",
  "id" : 0,
  "s18" : "s18",
  "sku" : "sku",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "s0" : "s0",
  "s1" : "s1",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "s2" : "s2",
  "s3" : "s3",
  "s4" : "s4",
  "s5" : "s5",
  "s6" : "s6",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "s7" : "s7",
  "s8" : "s8",
  "s9" : "s9",
  "inInventory" : false,
  "serial" : "serial",
  "asnId" : 5,
  "itemReceiptId" : 6,
  "shippedDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter itemSerialId: (path) Id of the itemSerial to be duplicated. 

     - returns: RequestBuilder<ItemSerial> 
     */
    public class func getDuplicateItemSerialByIdWithRequestBuilder(itemSerialId itemSerialId: Int32) -> RequestBuilder<ItemSerial> {
        var path = "/beta/itemSerial/duplicate/{itemSerialId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSerial>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search itemSerials by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [ItemSerial]?, error: ErrorType?) -> Void)) {
        getItemSerialByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search itemSerials by filter
     - GET /beta/itemSerial/search
     - Returns the list of itemSerials that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "customFields" : {
    "key" : "{}"
  },
  "orderNoId" : 5.63737665663332876420099637471139430999755859375,
  "s11" : "s11",
  "s10" : "s10",
  "s13" : "s13",
  "s12" : "s12",
  "s15" : "s15",
  "s14" : "s14",
  "s17" : "s17",
  "s16" : "s16",
  "s19" : "s19",
  "id" : 0,
  "s18" : "s18",
  "sku" : "sku",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "s0" : "s0",
  "s1" : "s1",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "s2" : "s2",
  "s3" : "s3",
  "s4" : "s4",
  "s5" : "s5",
  "s6" : "s6",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "s7" : "s7",
  "s8" : "s8",
  "s9" : "s9",
  "inInventory" : false,
  "serial" : "serial",
  "asnId" : 5,
  "itemReceiptId" : 6,
  "shippedDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "customFields" : {
    "key" : "{}"
  },
  "orderNoId" : 5.63737665663332876420099637471139430999755859375,
  "s11" : "s11",
  "s10" : "s10",
  "s13" : "s13",
  "s12" : "s12",
  "s15" : "s15",
  "s14" : "s14",
  "s17" : "s17",
  "s16" : "s16",
  "s19" : "s19",
  "id" : 0,
  "s18" : "s18",
  "sku" : "sku",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "s0" : "s0",
  "s1" : "s1",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "s2" : "s2",
  "s3" : "s3",
  "s4" : "s4",
  "s5" : "s5",
  "s6" : "s6",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "s7" : "s7",
  "s8" : "s8",
  "s9" : "s9",
  "inInventory" : false,
  "serial" : "serial",
  "asnId" : 5,
  "itemReceiptId" : 6,
  "shippedDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemSerial]> 
     */
    public class func getItemSerialByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[ItemSerial]> {
        let path = "/beta/itemSerial/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ItemSerial]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an itemSerial by id
     
     - parameter itemSerialId: (path) Id of the itemSerial to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialById(itemSerialId itemSerialId: Int32, completion: ((data: ItemSerial?, error: ErrorType?) -> Void)) {
        getItemSerialByIdWithRequestBuilder(itemSerialId: itemSerialId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an itemSerial by id
     - GET /beta/itemSerial/{itemSerialId}
     - Returns the itemSerial identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "customFields" : {
    "key" : "{}"
  },
  "orderNoId" : 5.63737665663332876420099637471139430999755859375,
  "s11" : "s11",
  "s10" : "s10",
  "s13" : "s13",
  "s12" : "s12",
  "s15" : "s15",
  "s14" : "s14",
  "s17" : "s17",
  "s16" : "s16",
  "s19" : "s19",
  "id" : 0,
  "s18" : "s18",
  "sku" : "sku",
  "receivedDate" : "2000-01-23T04:56:07.000+00:00",
  "s0" : "s0",
  "s1" : "s1",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1,
  "s2" : "s2",
  "s3" : "s3",
  "s4" : "s4",
  "s5" : "s5",
  "s6" : "s6",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "s7" : "s7",
  "s8" : "s8",
  "s9" : "s9",
  "inInventory" : false,
  "serial" : "serial",
  "asnId" : 5,
  "itemReceiptId" : 6,
  "shippedDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter itemSerialId: (path) Id of the itemSerial to be returned. 

     - returns: RequestBuilder<ItemSerial> 
     */
    public class func getItemSerialByIdWithRequestBuilder(itemSerialId itemSerialId: Int32) -> RequestBuilder<ItemSerial> {
        var path = "/beta/itemSerial/{itemSerialId}"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ItemSerial>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an itemSerial.
     
     - parameter itemSerialId: (path) Id of the itemSerial to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialFiles(itemSerialId itemSerialId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemSerialFilesWithRequestBuilder(itemSerialId: itemSerialId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an itemSerial.
     - GET /beta/itemSerial/{itemSerialId}/file
     - Get all existing itemSerial files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemSerialFilesWithRequestBuilder(itemSerialId itemSerialId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/file"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an itemSerial.
     
     - parameter itemSerialId: (path) Id of the itemSerial to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemSerialTags(itemSerialId itemSerialId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getItemSerialTagsWithRequestBuilder(itemSerialId: itemSerialId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an itemSerial.
     - GET /beta/itemSerial/{itemSerialId}/tag
     - Get all existing itemSerial tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemSerialId: (path) Id of the itemSerial to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemSerialTagsWithRequestBuilder(itemSerialId itemSerialId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/itemSerial/{itemSerialId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemSerialId}", withString: "\(itemSerialId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an itemSerial
     
     - parameter body: (body) ItemSerial to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemSerial(body body: ItemSerial, completion: ((error: ErrorType?) -> Void)) {
        updateItemSerialWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an itemSerial
     - PUT /beta/itemSerial
     - Updates an existing itemSerial using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemSerial to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemSerialWithRequestBuilder(body body: ItemSerial) -> RequestBuilder<Void> {
        let path = "/beta/itemSerial"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
