//
// NonBusinessDayAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class NonBusinessDayAPI: APIBase {
    /**
     Create a nonBusinessDay
     
     - parameter body: (body) NonBusinessDay to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addNonBusinessDay(body body: NonBusinessDay, completion: ((data: NonBusinessDay?, error: ErrorType?) -> Void)) {
        addNonBusinessDayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a nonBusinessDay
     - POST /v3.0/nonBusinessDay
     - Inserts a new nonBusinessDay using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) NonBusinessDay to be inserted. 

     - returns: RequestBuilder<NonBusinessDay> 
     */
    public class func addNonBusinessDayWithRequestBuilder(body body: NonBusinessDay) -> RequestBuilder<NonBusinessDay> {
        let path = "/v3.0/nonBusinessDay"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NonBusinessDay>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a nonBusinessDay
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add an audit to 
     - parameter nonBusinessDayAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addNonBusinessDayAudit(nonBusinessDayId nonBusinessDayId: Int32, nonBusinessDayAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addNonBusinessDayAuditWithRequestBuilder(nonBusinessDayId: nonBusinessDayId, nonBusinessDayAudit: nonBusinessDayAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a nonBusinessDay
     - PUT /v3.0/nonBusinessDay/{nonBusinessDayId}/audit/{nonBusinessDayAudit}
     - Adds an audit to an existing nonBusinessDay.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add an audit to 
     - parameter nonBusinessDayAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addNonBusinessDayAuditWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32, nonBusinessDayAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/audit/{nonBusinessDayAudit}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayAudit}", withString: "\(nonBusinessDayAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a nonBusinessDay
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addNonBusinessDayFile(nonBusinessDayId nonBusinessDayId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addNonBusinessDayFileWithRequestBuilder(nonBusinessDayId: nonBusinessDayId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a nonBusinessDay
     - POST /v3.0/nonBusinessDay/{nonBusinessDayId}/file/{fileName}
     - Adds a file to an existing nonBusinessDay.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addNonBusinessDayFileWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a nonBusinessDay by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addNonBusinessDayFileByURL(body body: RecordFile, nonBusinessDayId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addNonBusinessDayFileByURLWithRequestBuilder(body: body, nonBusinessDayId: nonBusinessDayId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a nonBusinessDay by URL.
     - POST /v3.0/nonBusinessDay/{nonBusinessDayId}/file
     - Adds a file to an existing nonBusinessDay by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addNonBusinessDayFileByURLWithRequestBuilder(body body: RecordFile, nonBusinessDayId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/file"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a nonBusinessDay.
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add a tag to 
     - parameter nonBusinessDayTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addNonBusinessDayTag(nonBusinessDayId nonBusinessDayId: Int32, nonBusinessDayTag: String, completion: ((error: ErrorType?) -> Void)) {
        addNonBusinessDayTagWithRequestBuilder(nonBusinessDayId: nonBusinessDayId, nonBusinessDayTag: nonBusinessDayTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a nonBusinessDay.
     - PUT /v3.0/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}
     - Adds a tag to an existing nonBusinessDay.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to add a tag to 
     - parameter nonBusinessDayTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addNonBusinessDayTagWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32, nonBusinessDayTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayTag}", withString: "\(nonBusinessDayTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a nonBusinessDay
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteNonBusinessDay(nonBusinessDayId nonBusinessDayId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteNonBusinessDayWithRequestBuilder(nonBusinessDayId: nonBusinessDayId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a nonBusinessDay
     - DELETE /v3.0/nonBusinessDay/{nonBusinessDayId}
     - Deletes the nonBusinessDay identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteNonBusinessDayWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a nonBusinessDay.
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteNonBusinessDayFile(nonBusinessDayId nonBusinessDayId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteNonBusinessDayFileWithRequestBuilder(nonBusinessDayId: nonBusinessDayId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a nonBusinessDay.
     - DELETE /v3.0/nonBusinessDay/{nonBusinessDayId}/file/{fileId}
     - Deletes an existing nonBusinessDay file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteNonBusinessDayFileWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a nonBusinessDay.
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to remove tag from 
     - parameter nonBusinessDayTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteNonBusinessDayTag(nonBusinessDayId nonBusinessDayId: Int32, nonBusinessDayTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteNonBusinessDayTagWithRequestBuilder(nonBusinessDayId: nonBusinessDayId, nonBusinessDayTag: nonBusinessDayTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a nonBusinessDay.
     - DELETE /v3.0/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}
     - Deletes an existing nonBusinessDay tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to remove tag from 
     - parameter nonBusinessDayTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteNonBusinessDayTagWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32, nonBusinessDayTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/tag/{nonBusinessDayTag}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayTag}", withString: "\(nonBusinessDayTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a nonBusinessDay by id
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateNonBusinessDayById(nonBusinessDayId nonBusinessDayId: Int32, completion: ((data: NonBusinessDay?, error: ErrorType?) -> Void)) {
        getDuplicateNonBusinessDayByIdWithRequestBuilder(nonBusinessDayId: nonBusinessDayId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a nonBusinessDay by id
     - GET /v3.0/nonBusinessDay/duplicate/{nonBusinessDayId}
     - Returns a duplicated nonBusinessDay identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to be duplicated. 

     - returns: RequestBuilder<NonBusinessDay> 
     */
    public class func getDuplicateNonBusinessDayByIdWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32) -> RequestBuilder<NonBusinessDay> {
        var path = "/v3.0/nonBusinessDay/duplicate/{nonBusinessDayId}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NonBusinessDay>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search nonBusinessDays by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNonBusinessDayByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [NonBusinessDay]?, error: ErrorType?) -> Void)) {
        getNonBusinessDayByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search nonBusinessDays by filter
     - GET /v3.0/nonBusinessDay/search
     - Returns the list of nonBusinessDays that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[NonBusinessDay]> 
     */
    public class func getNonBusinessDayByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[NonBusinessDay]> {
        let path = "/v3.0/nonBusinessDay/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[NonBusinessDay]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a nonBusinessDay by id
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNonBusinessDayById(nonBusinessDayId nonBusinessDayId: Int32, completion: ((data: NonBusinessDay?, error: ErrorType?) -> Void)) {
        getNonBusinessDayByIdWithRequestBuilder(nonBusinessDayId: nonBusinessDayId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a nonBusinessDay by id
     - GET /v3.0/nonBusinessDay/{nonBusinessDayId}
     - Returns the nonBusinessDay identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "date" : "2000-01-23T04:56:07.000+00:00",
  "note" : "note",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to be returned. 

     - returns: RequestBuilder<NonBusinessDay> 
     */
    public class func getNonBusinessDayByIdWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32) -> RequestBuilder<NonBusinessDay> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NonBusinessDay>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a nonBusinessDay.
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNonBusinessDayFiles(nonBusinessDayId nonBusinessDayId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getNonBusinessDayFilesWithRequestBuilder(nonBusinessDayId: nonBusinessDayId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a nonBusinessDay.
     - GET /v3.0/nonBusinessDay/{nonBusinessDayId}/file
     - Get all existing nonBusinessDay files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getNonBusinessDayFilesWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/file"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a nonBusinessDay.
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNonBusinessDayTags(nonBusinessDayId nonBusinessDayId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getNonBusinessDayTagsWithRequestBuilder(nonBusinessDayId: nonBusinessDayId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a nonBusinessDay.
     - GET /v3.0/nonBusinessDay/{nonBusinessDayId}/tag
     - Get all existing nonBusinessDay tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter nonBusinessDayId: (path) Id of the nonBusinessDay to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getNonBusinessDayTagsWithRequestBuilder(nonBusinessDayId nonBusinessDayId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/nonBusinessDay/{nonBusinessDayId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{nonBusinessDayId}", withString: "\(nonBusinessDayId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a nonBusinessDay
     
     - parameter body: (body) NonBusinessDay to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateNonBusinessDay(body body: NonBusinessDay, completion: ((error: ErrorType?) -> Void)) {
        updateNonBusinessDayWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a nonBusinessDay
     - PUT /v3.0/nonBusinessDay
     - Updates an existing nonBusinessDay using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) NonBusinessDay to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateNonBusinessDayWithRequestBuilder(body body: NonBusinessDay) -> RequestBuilder<Void> {
        let path = "/v3.0/nonBusinessDay"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
