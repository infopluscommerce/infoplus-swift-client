//
// AlertAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AlertAPI: APIBase {
    /**
     Create an alert
     
     - parameter body: (body) Alert to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAlert(body body: Alert, completion: ((data: Alert?, error: ErrorType?) -> Void)) {
        addAlertWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an alert
     - POST /beta/alert
     - Inserts a new alert using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "level" : "level",
  "customFields" : {
    "key" : "{}"
  },
  "link" : "link",
  "linkText" : "linkText",
  "id" : 0,
  "type" : "type",
  "message" : "message",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "acknowledgeDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter body: (body) Alert to be inserted. 

     - returns: RequestBuilder<Alert> 
     */
    public class func addAlertWithRequestBuilder(body body: Alert) -> RequestBuilder<Alert> {
        let path = "/beta/alert"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Alert>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an alert
     
     - parameter alertId: (path) Id of the alert to add an audit to 
     - parameter alertAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAlertAudit(alertId alertId: Int32, alertAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addAlertAuditWithRequestBuilder(alertId: alertId, alertAudit: alertAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an alert
     - PUT /beta/alert/{alertId}/audit/{alertAudit}
     - Adds an audit to an existing alert.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to add an audit to 
     - parameter alertAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addAlertAuditWithRequestBuilder(alertId alertId: Int32, alertAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/audit/{alertAudit}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{alertAudit}", withString: "\(alertAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an alert
     
     - parameter alertId: (path) Id of the alert to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAlertFile(alertId alertId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addAlertFileWithRequestBuilder(alertId: alertId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an alert
     - POST /beta/alert/{alertId}/file/{fileName}
     - Adds a file to an existing alert.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addAlertFileWithRequestBuilder(alertId alertId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an alert by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter alertId: (path) Id of the alert to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAlertFileByURL(body body: RecordFile, alertId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addAlertFileByURLWithRequestBuilder(body: body, alertId: alertId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an alert by URL.
     - POST /beta/alert/{alertId}/file
     - Adds a file to an existing alert by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter alertId: (path) Id of the alert to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addAlertFileByURLWithRequestBuilder(body body: RecordFile, alertId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/file"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an alert.
     
     - parameter alertId: (path) Id of the alert to add a tag to 
     - parameter alertTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addAlertTag(alertId alertId: Int32, alertTag: String, completion: ((error: ErrorType?) -> Void)) {
        addAlertTagWithRequestBuilder(alertId: alertId, alertTag: alertTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an alert.
     - PUT /beta/alert/{alertId}/tag/{alertTag}
     - Adds a tag to an existing alert.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to add a tag to 
     - parameter alertTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addAlertTagWithRequestBuilder(alertId alertId: Int32, alertTag: String) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/tag/{alertTag}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{alertTag}", withString: "\(alertTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an alert.
     
     - parameter alertId: (path) Id of the alert to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAlertFile(alertId alertId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteAlertFileWithRequestBuilder(alertId: alertId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an alert.
     - DELETE /beta/alert/{alertId}/file/{fileId}
     - Deletes an existing alert file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAlertFileWithRequestBuilder(alertId alertId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an alert.
     
     - parameter alertId: (path) Id of the alert to remove tag from 
     - parameter alertTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAlertTag(alertId alertId: Int32, alertTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteAlertTagWithRequestBuilder(alertId: alertId, alertTag: alertTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an alert.
     - DELETE /beta/alert/{alertId}/tag/{alertTag}
     - Deletes an existing alert tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to remove tag from 
     - parameter alertTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAlertTagWithRequestBuilder(alertId alertId: Int32, alertTag: String) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/tag/{alertTag}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{alertTag}", withString: "\(alertTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search alerts by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [Alert]?, error: ErrorType?) -> Void)) {
        getAlertByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search alerts by filter
     - GET /beta/alert/search
     - Returns the list of alerts that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "level" : "level",
  "customFields" : {
    "key" : "{}"
  },
  "link" : "link",
  "linkText" : "linkText",
  "id" : 0,
  "type" : "type",
  "message" : "message",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "acknowledgeDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}, {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "level" : "level",
  "customFields" : {
    "key" : "{}"
  },
  "link" : "link",
  "linkText" : "linkText",
  "id" : 0,
  "type" : "type",
  "message" : "message",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "acknowledgeDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[Alert]> 
     */
    public class func getAlertByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[Alert]> {
        let path = "/beta/alert/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Alert]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an alert by id
     
     - parameter alertId: (path) Id of the alert to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertById(alertId alertId: Int32, completion: ((data: Alert?, error: ErrorType?) -> Void)) {
        getAlertByIdWithRequestBuilder(alertId: alertId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an alert by id
     - GET /beta/alert/{alertId}
     - Returns the alert identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "level" : "level",
  "customFields" : {
    "key" : "{}"
  },
  "link" : "link",
  "linkText" : "linkText",
  "id" : 0,
  "type" : "type",
  "message" : "message",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "acknowledgeDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter alertId: (path) Id of the alert to be returned. 

     - returns: RequestBuilder<Alert> 
     */
    public class func getAlertByIdWithRequestBuilder(alertId alertId: Int32) -> RequestBuilder<Alert> {
        var path = "/beta/alert/{alertId}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Alert>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an alert.
     
     - parameter alertId: (path) Id of the alert to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertFiles(alertId alertId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getAlertFilesWithRequestBuilder(alertId: alertId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an alert.
     - GET /beta/alert/{alertId}/file
     - Get all existing alert files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getAlertFilesWithRequestBuilder(alertId alertId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/file"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an alert.
     
     - parameter alertId: (path) Id of the alert to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertTags(alertId alertId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getAlertTagsWithRequestBuilder(alertId: alertId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an alert.
     - GET /beta/alert/{alertId}/tag
     - Get all existing alert tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter alertId: (path) Id of the alert to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getAlertTagsWithRequestBuilder(alertId alertId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/alert/{alertId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an alert by id
     
     - parameter alertId: (path) Id of the alert to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateAlertById(alertId alertId: Int32, completion: ((data: Alert?, error: ErrorType?) -> Void)) {
        getDuplicateAlertByIdWithRequestBuilder(alertId: alertId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an alert by id
     - GET /beta/alert/duplicate/{alertId}
     - Returns a duplicated alert identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "level" : "level",
  "customFields" : {
    "key" : "{}"
  },
  "link" : "link",
  "linkText" : "linkText",
  "id" : 0,
  "type" : "type",
  "message" : "message",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00",
  "acknowledgeDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter alertId: (path) Id of the alert to be duplicated. 

     - returns: RequestBuilder<Alert> 
     */
    public class func getDuplicateAlertByIdWithRequestBuilder(alertId alertId: Int32) -> RequestBuilder<Alert> {
        var path = "/beta/alert/duplicate/{alertId}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Alert>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an alert custom fields
     
     - parameter body: (body) Alert to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateAlertCustomFields(body body: Alert, completion: ((error: ErrorType?) -> Void)) {
        updateAlertCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an alert custom fields
     - PUT /beta/alert/customFields
     - Updates an existing alert custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) Alert to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateAlertCustomFieldsWithRequestBuilder(body body: Alert) -> RequestBuilder<Void> {
        let path = "/beta/alert/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
