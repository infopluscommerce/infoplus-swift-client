//
// BillingCodeTypeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BillingCodeTypeAPI: APIBase {
    /**
     Create a billingCodeType
     
     - parameter body: (body) BillingCodeType to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCodeType(body body: BillingCodeType, completion: ((data: BillingCodeType?, error: ErrorType?) -> Void)) {
        addBillingCodeTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a billingCodeType
     - POST /beta/billingCodeType
     - Inserts a new billingCodeType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "billingCode" : "billingCode",
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) BillingCodeType to be inserted. 

     - returns: RequestBuilder<BillingCodeType> 
     */
    public class func addBillingCodeTypeWithRequestBuilder(body body: BillingCodeType) -> RequestBuilder<BillingCodeType> {
        let path = "/beta/billingCodeType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BillingCodeType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a billingCodeType
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to add an audit to 
     - parameter billingCodeTypeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCodeTypeAudit(billingCodeTypeId billingCodeTypeId: Int32, billingCodeTypeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addBillingCodeTypeAuditWithRequestBuilder(billingCodeTypeId: billingCodeTypeId, billingCodeTypeAudit: billingCodeTypeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a billingCodeType
     - PUT /beta/billingCodeType/{billingCodeTypeId}/audit/{billingCodeTypeAudit}
     - Adds an audit to an existing billingCodeType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to add an audit to 
     - parameter billingCodeTypeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addBillingCodeTypeAuditWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32, billingCodeTypeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/billingCodeType/{billingCodeTypeId}/audit/{billingCodeTypeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeAudit}", withString: "\(billingCodeTypeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a billingCodeType.
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to add a tag to 
     - parameter billingCodeTypeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addBillingCodeTypeTag(billingCodeTypeId billingCodeTypeId: Int32, billingCodeTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addBillingCodeTypeTagWithRequestBuilder(billingCodeTypeId: billingCodeTypeId, billingCodeTypeTag: billingCodeTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a billingCodeType.
     - PUT /beta/billingCodeType/{billingCodeTypeId}/tag/{billingCodeTypeTag}
     - Adds a tag to an existing billingCodeType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to add a tag to 
     - parameter billingCodeTypeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addBillingCodeTypeTagWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32, billingCodeTypeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/billingCodeType/{billingCodeTypeId}/tag/{billingCodeTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeTag}", withString: "\(billingCodeTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a billingCodeType
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBillingCodeType(billingCodeTypeId billingCodeTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteBillingCodeTypeWithRequestBuilder(billingCodeTypeId: billingCodeTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a billingCodeType
     - DELETE /beta/billingCodeType/{billingCodeTypeId}
     - Deletes the billingCodeType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBillingCodeTypeWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/billingCodeType/{billingCodeTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a billingCodeType.
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to remove tag from 
     - parameter billingCodeTypeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteBillingCodeTypeTag(billingCodeTypeId billingCodeTypeId: Int32, billingCodeTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteBillingCodeTypeTagWithRequestBuilder(billingCodeTypeId: billingCodeTypeId, billingCodeTypeTag: billingCodeTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a billingCodeType.
     - DELETE /beta/billingCodeType/{billingCodeTypeId}/tag/{billingCodeTypeTag}
     - Deletes an existing billingCodeType tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to remove tag from 
     - parameter billingCodeTypeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteBillingCodeTypeTagWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32, billingCodeTypeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/billingCodeType/{billingCodeTypeId}/tag/{billingCodeTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeTag}", withString: "\(billingCodeTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search billingCodeTypes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeTypeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [BillingCodeType]?, error: ErrorType?) -> Void)) {
        getBillingCodeTypeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search billingCodeTypes by filter
     - GET /beta/billingCodeType/search
     - Returns the list of billingCodeTypes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "billingCode" : "billingCode",
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "billingCode" : "billingCode",
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[BillingCodeType]> 
     */
    public class func getBillingCodeTypeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[BillingCodeType]> {
        let path = "/beta/billingCodeType/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[BillingCodeType]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a billingCodeType by id
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeTypeById(billingCodeTypeId billingCodeTypeId: Int32, completion: ((data: BillingCodeType?, error: ErrorType?) -> Void)) {
        getBillingCodeTypeByIdWithRequestBuilder(billingCodeTypeId: billingCodeTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a billingCodeType by id
     - GET /beta/billingCodeType/{billingCodeTypeId}
     - Returns the billingCodeType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "billingCode" : "billingCode",
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to be returned. 

     - returns: RequestBuilder<BillingCodeType> 
     */
    public class func getBillingCodeTypeByIdWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32) -> RequestBuilder<BillingCodeType> {
        var path = "/beta/billingCodeType/{billingCodeTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BillingCodeType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a billingCodeType.
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBillingCodeTypeTags(billingCodeTypeId billingCodeTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getBillingCodeTypeTagsWithRequestBuilder(billingCodeTypeId: billingCodeTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a billingCodeType.
     - GET /beta/billingCodeType/{billingCodeTypeId}/tag
     - Get all existing billingCodeType tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getBillingCodeTypeTagsWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/billingCodeType/{billingCodeTypeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a billingCodeType by id
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateBillingCodeTypeById(billingCodeTypeId billingCodeTypeId: Int32, completion: ((data: BillingCodeType?, error: ErrorType?) -> Void)) {
        getDuplicateBillingCodeTypeByIdWithRequestBuilder(billingCodeTypeId: billingCodeTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a billingCodeType by id
     - GET /beta/billingCodeType/duplicate/{billingCodeTypeId}
     - Returns a duplicated billingCodeType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "billingCode" : "billingCode",
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter billingCodeTypeId: (path) Id of the billingCodeType to be duplicated. 

     - returns: RequestBuilder<BillingCodeType> 
     */
    public class func getDuplicateBillingCodeTypeByIdWithRequestBuilder(billingCodeTypeId billingCodeTypeId: Int32) -> RequestBuilder<BillingCodeType> {
        var path = "/beta/billingCodeType/duplicate/{billingCodeTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{billingCodeTypeId}", withString: "\(billingCodeTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BillingCodeType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a billingCodeType
     
     - parameter body: (body) BillingCodeType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBillingCodeType(body body: BillingCodeType, completion: ((error: ErrorType?) -> Void)) {
        updateBillingCodeTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a billingCodeType
     - PUT /beta/billingCodeType
     - Updates an existing billingCodeType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) BillingCodeType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBillingCodeTypeWithRequestBuilder(body body: BillingCodeType) -> RequestBuilder<Void> {
        let path = "/beta/billingCodeType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a billingCodeType custom fields
     
     - parameter body: (body) BillingCodeType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateBillingCodeTypeCustomFields(body body: BillingCodeType, completion: ((error: ErrorType?) -> Void)) {
        updateBillingCodeTypeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a billingCodeType custom fields
     - PUT /beta/billingCodeType/customFields
     - Updates an existing billingCodeType custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) BillingCodeType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateBillingCodeTypeCustomFieldsWithRequestBuilder(body body: BillingCodeType) -> RequestBuilder<Void> {
        let path = "/beta/billingCodeType/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
