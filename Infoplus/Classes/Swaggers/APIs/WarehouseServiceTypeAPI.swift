//
// WarehouseServiceTypeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WarehouseServiceTypeAPI: APIBase {
    /**
     Create a warehouseServiceType
     
     - parameter body: (body) WarehouseServiceType to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseServiceType(body body: WarehouseServiceType, completion: ((data: WarehouseServiceType?, error: ErrorType?) -> Void)) {
        addWarehouseServiceTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a warehouseServiceType
     - POST /beta/warehouseServiceType
     - Inserts a new warehouseServiceType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) WarehouseServiceType to be inserted. 

     - returns: RequestBuilder<WarehouseServiceType> 
     */
    public class func addWarehouseServiceTypeWithRequestBuilder(body body: WarehouseServiceType) -> RequestBuilder<WarehouseServiceType> {
        let path = "/beta/warehouseServiceType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WarehouseServiceType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a warehouseServiceType
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add an audit to 
     - parameter warehouseServiceTypeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseServiceTypeAudit(warehouseServiceTypeId warehouseServiceTypeId: Int32, warehouseServiceTypeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseServiceTypeAuditWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId, warehouseServiceTypeAudit: warehouseServiceTypeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a warehouseServiceType
     - PUT /beta/warehouseServiceType/{warehouseServiceTypeId}/audit/{warehouseServiceTypeAudit}
     - Adds an audit to an existing warehouseServiceType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add an audit to 
     - parameter warehouseServiceTypeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseServiceTypeAuditWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32, warehouseServiceTypeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/audit/{warehouseServiceTypeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeAudit}", withString: "\(warehouseServiceTypeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a warehouseServiceType
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseServiceTypeFile(warehouseServiceTypeId warehouseServiceTypeId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseServiceTypeFileWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a warehouseServiceType
     - POST /beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileName}
     - Adds a file to an existing warehouseServiceType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseServiceTypeFileWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a warehouseServiceType by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseServiceTypeFileByURL(body body: RecordFile, warehouseServiceTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseServiceTypeFileByURLWithRequestBuilder(body: body, warehouseServiceTypeId: warehouseServiceTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a warehouseServiceType by URL.
     - POST /beta/warehouseServiceType/{warehouseServiceTypeId}/file
     - Adds a file to an existing warehouseServiceType by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseServiceTypeFileByURLWithRequestBuilder(body body: RecordFile, warehouseServiceTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a warehouseServiceType.
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add a tag to 
     - parameter warehouseServiceTypeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWarehouseServiceTypeTag(warehouseServiceTypeId warehouseServiceTypeId: Int32, warehouseServiceTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addWarehouseServiceTypeTagWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId, warehouseServiceTypeTag: warehouseServiceTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a warehouseServiceType.
     - PUT /beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}
     - Adds a tag to an existing warehouseServiceType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to add a tag to 
     - parameter warehouseServiceTypeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addWarehouseServiceTypeTagWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32, warehouseServiceTypeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeTag}", withString: "\(warehouseServiceTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a warehouseServiceType
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWarehouseServiceType(warehouseServiceTypeId warehouseServiceTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteWarehouseServiceTypeWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a warehouseServiceType
     - DELETE /beta/warehouseServiceType/{warehouseServiceTypeId}
     - Deletes the warehouseServiceType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWarehouseServiceTypeWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a warehouseServiceType.
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWarehouseServiceTypeFile(warehouseServiceTypeId warehouseServiceTypeId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteWarehouseServiceTypeFileWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a warehouseServiceType.
     - DELETE /beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileId}
     - Deletes an existing warehouseServiceType file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWarehouseServiceTypeFileWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a warehouseServiceType.
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to remove tag from 
     - parameter warehouseServiceTypeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWarehouseServiceTypeTag(warehouseServiceTypeId warehouseServiceTypeId: Int32, warehouseServiceTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteWarehouseServiceTypeTagWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId, warehouseServiceTypeTag: warehouseServiceTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a warehouseServiceType.
     - DELETE /beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}
     - Deletes an existing warehouseServiceType tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to remove tag from 
     - parameter warehouseServiceTypeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteWarehouseServiceTypeTagWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32, warehouseServiceTypeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag/{warehouseServiceTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeTag}", withString: "\(warehouseServiceTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a warehouseServiceType by id
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateWarehouseServiceTypeById(warehouseServiceTypeId warehouseServiceTypeId: Int32, completion: ((data: WarehouseServiceType?, error: ErrorType?) -> Void)) {
        getDuplicateWarehouseServiceTypeByIdWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a warehouseServiceType by id
     - GET /beta/warehouseServiceType/duplicate/{warehouseServiceTypeId}
     - Returns a duplicated warehouseServiceType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to be duplicated. 

     - returns: RequestBuilder<WarehouseServiceType> 
     */
    public class func getDuplicateWarehouseServiceTypeByIdWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32) -> RequestBuilder<WarehouseServiceType> {
        var path = "/beta/warehouseServiceType/duplicate/{warehouseServiceTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WarehouseServiceType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search warehouseServiceTypes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseServiceTypeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [WarehouseServiceType]?, error: ErrorType?) -> Void)) {
        getWarehouseServiceTypeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search warehouseServiceTypes by filter
     - GET /beta/warehouseServiceType/search
     - Returns the list of warehouseServiceTypes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[WarehouseServiceType]> 
     */
    public class func getWarehouseServiceTypeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[WarehouseServiceType]> {
        let path = "/beta/warehouseServiceType/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[WarehouseServiceType]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a warehouseServiceType by id
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseServiceTypeById(warehouseServiceTypeId warehouseServiceTypeId: Int32, completion: ((data: WarehouseServiceType?, error: ErrorType?) -> Void)) {
        getWarehouseServiceTypeByIdWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a warehouseServiceType by id
     - GET /beta/warehouseServiceType/{warehouseServiceTypeId}
     - Returns the warehouseServiceType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to be returned. 

     - returns: RequestBuilder<WarehouseServiceType> 
     */
    public class func getWarehouseServiceTypeByIdWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32) -> RequestBuilder<WarehouseServiceType> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<WarehouseServiceType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a warehouseServiceType.
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseServiceTypeFiles(warehouseServiceTypeId warehouseServiceTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getWarehouseServiceTypeFilesWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a warehouseServiceType.
     - GET /beta/warehouseServiceType/{warehouseServiceTypeId}/file
     - Get all existing warehouseServiceType files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getWarehouseServiceTypeFilesWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a warehouseServiceType.
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWarehouseServiceTypeTags(warehouseServiceTypeId warehouseServiceTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getWarehouseServiceTypeTagsWithRequestBuilder(warehouseServiceTypeId: warehouseServiceTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a warehouseServiceType.
     - GET /beta/warehouseServiceType/{warehouseServiceTypeId}/tag
     - Get all existing warehouseServiceType tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter warehouseServiceTypeId: (path) Id of the warehouseServiceType to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getWarehouseServiceTypeTagsWithRequestBuilder(warehouseServiceTypeId warehouseServiceTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/warehouseServiceType/{warehouseServiceTypeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{warehouseServiceTypeId}", withString: "\(warehouseServiceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a warehouseServiceType
     
     - parameter body: (body) WarehouseServiceType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWarehouseServiceType(body body: WarehouseServiceType, completion: ((error: ErrorType?) -> Void)) {
        updateWarehouseServiceTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a warehouseServiceType
     - PUT /beta/warehouseServiceType
     - Updates an existing warehouseServiceType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) WarehouseServiceType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWarehouseServiceTypeWithRequestBuilder(body body: WarehouseServiceType) -> RequestBuilder<Void> {
        let path = "/beta/warehouseServiceType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a warehouseServiceType custom fields
     
     - parameter body: (body) WarehouseServiceType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateWarehouseServiceTypeCustomFields(body body: WarehouseServiceType, completion: ((error: ErrorType?) -> Void)) {
        updateWarehouseServiceTypeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a warehouseServiceType custom fields
     - PUT /beta/warehouseServiceType/customFields
     - Updates an existing warehouseServiceType custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) WarehouseServiceType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateWarehouseServiceTypeCustomFieldsWithRequestBuilder(body body: WarehouseServiceType) -> RequestBuilder<Void> {
        let path = "/beta/warehouseServiceType/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
