//
// FulfillmentProcessLogAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class FulfillmentProcessLogAPI: APIBase {
    /**
     Add new audit for a fulfillmentProcessLog
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to add an audit to 
     - parameter fulfillmentProcessLogAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentProcessLogAudit(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fulfillmentProcessLogAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentProcessLogAuditWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId, fulfillmentProcessLogAudit: fulfillmentProcessLogAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a fulfillmentProcessLog
     - PUT /beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/audit/{fulfillmentProcessLogAudit}
     - Adds an audit to an existing fulfillmentProcessLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to add an audit to 
     - parameter fulfillmentProcessLogAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentProcessLogAuditWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fulfillmentProcessLogAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/audit/{fulfillmentProcessLogAudit}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogAudit}", withString: "\(fulfillmentProcessLogAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a fulfillmentProcessLog
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentProcessLogFile(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentProcessLogFileWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a fulfillmentProcessLog
     - POST /beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileName}
     - Adds a file to an existing fulfillmentProcessLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentProcessLogFileWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a fulfillmentProcessLog.
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to add a tag to 
     - parameter fulfillmentProcessLogTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFulfillmentProcessLogTag(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fulfillmentProcessLogTag: String, completion: ((error: ErrorType?) -> Void)) {
        addFulfillmentProcessLogTagWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId, fulfillmentProcessLogTag: fulfillmentProcessLogTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a fulfillmentProcessLog.
     - PUT /beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}
     - Adds a tag to an existing fulfillmentProcessLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to add a tag to 
     - parameter fulfillmentProcessLogTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFulfillmentProcessLogTagWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fulfillmentProcessLogTag: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogTag}", withString: "\(fulfillmentProcessLogTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a fulfillmentProcessLog.
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to remove tag from 
     - parameter fulfillmentProcessLogTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFulfillmentProcessLogTag(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fulfillmentProcessLogTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteFulfillmentProcessLogTagWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId, fulfillmentProcessLogTag: fulfillmentProcessLogTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a fulfillmentProcessLog.
     - DELETE /beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}
     - Deletes an existing fulfillmentProcessLog tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to remove tag from 
     - parameter fulfillmentProcessLogTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFulfillmentProcessLogTagWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, fulfillmentProcessLogTag: String) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag/{fulfillmentProcessLogTag}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogTag}", withString: "\(fulfillmentProcessLogTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a fulfillmentProcessLog by id
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateFulfillmentProcessLogById(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, completion: ((data: FulfillmentProcessLog?, error: ErrorType?) -> Void)) {
        getDuplicateFulfillmentProcessLogByIdWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a fulfillmentProcessLog by id
     - GET /beta/fulfillmentProcessLog/duplicate/{fulfillmentProcessLogId}
     - Returns a duplicated fulfillmentProcessLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "allocationIssueType" : "allocationIssueType",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "processNoId" : 6,
  "orderId" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "message" : "message",
  "warehouseId" : 1,
  "locationId" : 7,
  "id" : 0,
  "itemReceiptId" : 9,
  "skuId" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
}}]
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to be duplicated. 

     - returns: RequestBuilder<FulfillmentProcessLog> 
     */
    public class func getDuplicateFulfillmentProcessLogByIdWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32) -> RequestBuilder<FulfillmentProcessLog> {
        var path = "/beta/fulfillmentProcessLog/duplicate/{fulfillmentProcessLogId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentProcessLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search fulfillmentProcessLogs by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentProcessLogByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [FulfillmentProcessLog]?, error: ErrorType?) -> Void)) {
        getFulfillmentProcessLogByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search fulfillmentProcessLogs by filter
     - GET /beta/fulfillmentProcessLog/search
     - Returns the list of fulfillmentProcessLogs that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "allocationIssueType" : "allocationIssueType",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "processNoId" : 6,
  "orderId" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "message" : "message",
  "warehouseId" : 1,
  "locationId" : 7,
  "id" : 0,
  "itemReceiptId" : 9,
  "skuId" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
}, {
  "allocationIssueType" : "allocationIssueType",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "processNoId" : 6,
  "orderId" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "message" : "message",
  "warehouseId" : 1,
  "locationId" : 7,
  "id" : 0,
  "itemReceiptId" : 9,
  "skuId" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[FulfillmentProcessLog]> 
     */
    public class func getFulfillmentProcessLogByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[FulfillmentProcessLog]> {
        let path = "/beta/fulfillmentProcessLog/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[FulfillmentProcessLog]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a fulfillmentProcessLog by id
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentProcessLogById(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, completion: ((data: FulfillmentProcessLog?, error: ErrorType?) -> Void)) {
        getFulfillmentProcessLogByIdWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a fulfillmentProcessLog by id
     - GET /beta/fulfillmentProcessLog/{fulfillmentProcessLogId}
     - Returns the fulfillmentProcessLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "allocationIssueType" : "allocationIssueType",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "processNoId" : 6,
  "orderId" : 5.962133916683182377482808078639209270477294921875,
  "customFields" : {
    "key" : "{}"
  },
  "message" : "message",
  "warehouseId" : 1,
  "locationId" : 7,
  "id" : 0,
  "itemReceiptId" : 9,
  "skuId" : 2,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 5
}}]
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to be returned. 

     - returns: RequestBuilder<FulfillmentProcessLog> 
     */
    public class func getFulfillmentProcessLogByIdWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32) -> RequestBuilder<FulfillmentProcessLog> {
        var path = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FulfillmentProcessLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a fulfillmentProcessLog.
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFulfillmentProcessLogTags(fulfillmentProcessLogId fulfillmentProcessLogId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getFulfillmentProcessLogTagsWithRequestBuilder(fulfillmentProcessLogId: fulfillmentProcessLogId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a fulfillmentProcessLog.
     - GET /beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag
     - Get all existing fulfillmentProcessLog tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter fulfillmentProcessLogId: (path) Id of the fulfillmentProcessLog to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getFulfillmentProcessLogTagsWithRequestBuilder(fulfillmentProcessLogId fulfillmentProcessLogId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/fulfillmentProcessLog/{fulfillmentProcessLogId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{fulfillmentProcessLogId}", withString: "\(fulfillmentProcessLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
