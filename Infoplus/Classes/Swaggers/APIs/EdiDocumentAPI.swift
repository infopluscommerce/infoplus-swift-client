//
// EdiDocumentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class EdiDocumentAPI: APIBase {
    /**
     Create an ediDocument
     
     - parameter body: (body) EdiDocument to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addEdiDocument(body body: EdiDocument, completion: ((data: EdiDocument?, error: ErrorType?) -> Void)) {
        addEdiDocumentWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an ediDocument
     - POST /v3.0/ediDocument
     - Inserts a new ediDocument using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "documentTypeId" : 5,
  "transactionIndex" : 9,
  "jsonBody" : "jsonBody",
  "groupIndex" : 7,
  "as2PartnerId" : 1,
  "body" : "body",
  "transactionType" : "transactionType",
  "interchangeIndex" : 2,
  "id" : 0,
  "ediConnectionId" : 6,
  "lobId" : 5,
  "direction" : "direction",
  "status" : "status",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) EdiDocument to be inserted. 

     - returns: RequestBuilder<EdiDocument> 
     */
    public class func addEdiDocumentWithRequestBuilder(body body: EdiDocument) -> RequestBuilder<EdiDocument> {
        let path = "/v3.0/ediDocument"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EdiDocument>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an ediDocument
     
     - parameter ediDocumentId: (path) Id of the ediDocument to add an audit to 
     - parameter ediDocumentAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addEdiDocumentAudit(ediDocumentId ediDocumentId: Int32, ediDocumentAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addEdiDocumentAuditWithRequestBuilder(ediDocumentId: ediDocumentId, ediDocumentAudit: ediDocumentAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an ediDocument
     - PUT /v3.0/ediDocument/{ediDocumentId}/audit/{ediDocumentAudit}
     - Adds an audit to an existing ediDocument.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to add an audit to 
     - parameter ediDocumentAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addEdiDocumentAuditWithRequestBuilder(ediDocumentId ediDocumentId: Int32, ediDocumentAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/audit/{ediDocumentAudit}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentAudit}", withString: "\(ediDocumentAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an ediDocument
     
     - parameter ediDocumentId: (path) Id of the ediDocument to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addEdiDocumentFile(ediDocumentId ediDocumentId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addEdiDocumentFileWithRequestBuilder(ediDocumentId: ediDocumentId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an ediDocument
     - POST /v3.0/ediDocument/{ediDocumentId}/file/{fileName}
     - Adds a file to an existing ediDocument.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addEdiDocumentFileWithRequestBuilder(ediDocumentId ediDocumentId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an ediDocument by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter ediDocumentId: (path) Id of the ediDocument to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addEdiDocumentFileByURL(body body: RecordFile, ediDocumentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addEdiDocumentFileByURLWithRequestBuilder(body: body, ediDocumentId: ediDocumentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an ediDocument by URL.
     - POST /v3.0/ediDocument/{ediDocumentId}/file
     - Adds a file to an existing ediDocument by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter ediDocumentId: (path) Id of the ediDocument to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addEdiDocumentFileByURLWithRequestBuilder(body body: RecordFile, ediDocumentId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an ediDocument.
     
     - parameter ediDocumentId: (path) Id of the ediDocument to add a tag to 
     - parameter ediDocumentTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addEdiDocumentTag(ediDocumentId ediDocumentId: Int32, ediDocumentTag: String, completion: ((error: ErrorType?) -> Void)) {
        addEdiDocumentTagWithRequestBuilder(ediDocumentId: ediDocumentId, ediDocumentTag: ediDocumentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an ediDocument.
     - PUT /v3.0/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}
     - Adds a tag to an existing ediDocument.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to add a tag to 
     - parameter ediDocumentTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addEdiDocumentTagWithRequestBuilder(ediDocumentId ediDocumentId: Int32, ediDocumentTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentTag}", withString: "\(ediDocumentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an ediDocument.
     
     - parameter ediDocumentId: (path) Id of the ediDocument to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteEdiDocumentFile(ediDocumentId ediDocumentId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteEdiDocumentFileWithRequestBuilder(ediDocumentId: ediDocumentId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an ediDocument.
     - DELETE /v3.0/ediDocument/{ediDocumentId}/file/{fileId}
     - Deletes an existing ediDocument file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteEdiDocumentFileWithRequestBuilder(ediDocumentId ediDocumentId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an ediDocument.
     
     - parameter ediDocumentId: (path) Id of the ediDocument to remove tag from 
     - parameter ediDocumentTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteEdiDocumentTag(ediDocumentId ediDocumentId: Int32, ediDocumentTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteEdiDocumentTagWithRequestBuilder(ediDocumentId: ediDocumentId, ediDocumentTag: ediDocumentTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an ediDocument.
     - DELETE /v3.0/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}
     - Deletes an existing ediDocument tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to remove tag from 
     - parameter ediDocumentTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteEdiDocumentTagWithRequestBuilder(ediDocumentId ediDocumentId: Int32, ediDocumentTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/tag/{ediDocumentTag}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentTag}", withString: "\(ediDocumentTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an ediDocument by id
     
     - parameter ediDocumentId: (path) Id of the ediDocument to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateEdiDocumentById(ediDocumentId ediDocumentId: Int32, completion: ((data: EdiDocument?, error: ErrorType?) -> Void)) {
        getDuplicateEdiDocumentByIdWithRequestBuilder(ediDocumentId: ediDocumentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an ediDocument by id
     - GET /v3.0/ediDocument/duplicate/{ediDocumentId}
     - Returns a duplicated ediDocument identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "documentTypeId" : 5,
  "transactionIndex" : 9,
  "jsonBody" : "jsonBody",
  "groupIndex" : 7,
  "as2PartnerId" : 1,
  "body" : "body",
  "transactionType" : "transactionType",
  "interchangeIndex" : 2,
  "id" : 0,
  "ediConnectionId" : 6,
  "lobId" : 5,
  "direction" : "direction",
  "status" : "status",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter ediDocumentId: (path) Id of the ediDocument to be duplicated. 

     - returns: RequestBuilder<EdiDocument> 
     */
    public class func getDuplicateEdiDocumentByIdWithRequestBuilder(ediDocumentId ediDocumentId: Int32) -> RequestBuilder<EdiDocument> {
        var path = "/v3.0/ediDocument/duplicate/{ediDocumentId}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EdiDocument>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search ediDocuments by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEdiDocumentByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [EdiDocument]?, error: ErrorType?) -> Void)) {
        getEdiDocumentByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search ediDocuments by filter
     - GET /v3.0/ediDocument/search
     - Returns the list of ediDocuments that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "documentTypeId" : 5,
  "transactionIndex" : 9,
  "jsonBody" : "jsonBody",
  "groupIndex" : 7,
  "as2PartnerId" : 1,
  "body" : "body",
  "transactionType" : "transactionType",
  "interchangeIndex" : 2,
  "id" : 0,
  "ediConnectionId" : 6,
  "lobId" : 5,
  "direction" : "direction",
  "status" : "status",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "documentTypeId" : 5,
  "transactionIndex" : 9,
  "jsonBody" : "jsonBody",
  "groupIndex" : 7,
  "as2PartnerId" : 1,
  "body" : "body",
  "transactionType" : "transactionType",
  "interchangeIndex" : 2,
  "id" : 0,
  "ediConnectionId" : 6,
  "lobId" : 5,
  "direction" : "direction",
  "status" : "status",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[EdiDocument]> 
     */
    public class func getEdiDocumentByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[EdiDocument]> {
        let path = "/v3.0/ediDocument/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[EdiDocument]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an ediDocument by id
     
     - parameter ediDocumentId: (path) Id of the ediDocument to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEdiDocumentById(ediDocumentId ediDocumentId: Int32, completion: ((data: EdiDocument?, error: ErrorType?) -> Void)) {
        getEdiDocumentByIdWithRequestBuilder(ediDocumentId: ediDocumentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an ediDocument by id
     - GET /v3.0/ediDocument/{ediDocumentId}
     - Returns the ediDocument identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "documentTypeId" : 5,
  "transactionIndex" : 9,
  "jsonBody" : "jsonBody",
  "groupIndex" : 7,
  "as2PartnerId" : 1,
  "body" : "body",
  "transactionType" : "transactionType",
  "interchangeIndex" : 2,
  "id" : 0,
  "ediConnectionId" : 6,
  "lobId" : 5,
  "direction" : "direction",
  "status" : "status",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter ediDocumentId: (path) Id of the ediDocument to be returned. 

     - returns: RequestBuilder<EdiDocument> 
     */
    public class func getEdiDocumentByIdWithRequestBuilder(ediDocumentId ediDocumentId: Int32) -> RequestBuilder<EdiDocument> {
        var path = "/v3.0/ediDocument/{ediDocumentId}"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EdiDocument>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an ediDocument.
     
     - parameter ediDocumentId: (path) Id of the ediDocument to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEdiDocumentFiles(ediDocumentId ediDocumentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getEdiDocumentFilesWithRequestBuilder(ediDocumentId: ediDocumentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an ediDocument.
     - GET /v3.0/ediDocument/{ediDocumentId}/file
     - Get all existing ediDocument files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getEdiDocumentFilesWithRequestBuilder(ediDocumentId ediDocumentId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/file"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an ediDocument.
     
     - parameter ediDocumentId: (path) Id of the ediDocument to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEdiDocumentTags(ediDocumentId ediDocumentId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getEdiDocumentTagsWithRequestBuilder(ediDocumentId: ediDocumentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an ediDocument.
     - GET /v3.0/ediDocument/{ediDocumentId}/tag
     - Get all existing ediDocument tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter ediDocumentId: (path) Id of the ediDocument to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getEdiDocumentTagsWithRequestBuilder(ediDocumentId ediDocumentId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/ediDocument/{ediDocumentId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{ediDocumentId}", withString: "\(ediDocumentId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
