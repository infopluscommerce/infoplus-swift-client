//
// JobRecipeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class JobRecipeAPI: APIBase {
    /**
     Create a jobRecipe
     
     - parameter body: (body) JobRecipe to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobRecipe(body body: JobRecipe, completion: ((data: JobRecipe?, error: ErrorType?) -> Void)) {
        addJobRecipeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a jobRecipe
     - POST /beta/jobRecipe
     - Inserts a new jobRecipe using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "trackSteps" : false,
  "customFields" : {
    "key" : "{}"
  },
  "steps" : [ {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  }, {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  } ],
  "fulfillmentPlanId" : 7,
  "layout" : "layout",
  "warehouseId" : 6,
  "name" : "name",
  "trackAssemblies" : false,
  "assemblyInstructions" : "assemblyInstructions",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}}]
     
     - parameter body: (body) JobRecipe to be inserted. 

     - returns: RequestBuilder<JobRecipe> 
     */
    public class func addJobRecipeWithRequestBuilder(body body: JobRecipe) -> RequestBuilder<JobRecipe> {
        let path = "/beta/jobRecipe"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JobRecipe>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a jobRecipe
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to add an audit to 
     - parameter jobRecipeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobRecipeAudit(jobRecipeId jobRecipeId: Int32, jobRecipeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addJobRecipeAuditWithRequestBuilder(jobRecipeId: jobRecipeId, jobRecipeAudit: jobRecipeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a jobRecipe
     - PUT /beta/jobRecipe/{jobRecipeId}/audit/{jobRecipeAudit}
     - Adds an audit to an existing jobRecipe.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to add an audit to 
     - parameter jobRecipeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobRecipeAuditWithRequestBuilder(jobRecipeId jobRecipeId: Int32, jobRecipeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/audit/{jobRecipeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeAudit}", withString: "\(jobRecipeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a jobRecipe
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobRecipeFile(jobRecipeId jobRecipeId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addJobRecipeFileWithRequestBuilder(jobRecipeId: jobRecipeId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a jobRecipe
     - POST /beta/jobRecipe/{jobRecipeId}/file/{fileName}
     - Adds a file to an existing jobRecipe.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobRecipeFileWithRequestBuilder(jobRecipeId jobRecipeId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a jobRecipe by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter jobRecipeId: (path) Id of the jobRecipe to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobRecipeFileByURL(body body: RecordFile, jobRecipeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addJobRecipeFileByURLWithRequestBuilder(body: body, jobRecipeId: jobRecipeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a jobRecipe by URL.
     - POST /beta/jobRecipe/{jobRecipeId}/file
     - Adds a file to an existing jobRecipe by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter jobRecipeId: (path) Id of the jobRecipe to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobRecipeFileByURLWithRequestBuilder(body body: RecordFile, jobRecipeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a jobRecipe.
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to add a tag to 
     - parameter jobRecipeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobRecipeTag(jobRecipeId jobRecipeId: Int32, jobRecipeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addJobRecipeTagWithRequestBuilder(jobRecipeId: jobRecipeId, jobRecipeTag: jobRecipeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a jobRecipe.
     - PUT /beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}
     - Adds a tag to an existing jobRecipe.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to add a tag to 
     - parameter jobRecipeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobRecipeTagWithRequestBuilder(jobRecipeId jobRecipeId: Int32, jobRecipeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeTag}", withString: "\(jobRecipeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a jobRecipe
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobRecipe(jobRecipeId jobRecipeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteJobRecipeWithRequestBuilder(jobRecipeId: jobRecipeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a jobRecipe
     - DELETE /beta/jobRecipe/{jobRecipeId}
     - Deletes the jobRecipe identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobRecipeWithRequestBuilder(jobRecipeId jobRecipeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a jobRecipe.
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobRecipeFile(jobRecipeId jobRecipeId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteJobRecipeFileWithRequestBuilder(jobRecipeId: jobRecipeId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a jobRecipe.
     - DELETE /beta/jobRecipe/{jobRecipeId}/file/{fileId}
     - Deletes an existing jobRecipe file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobRecipeFileWithRequestBuilder(jobRecipeId jobRecipeId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a jobRecipe.
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to remove tag from 
     - parameter jobRecipeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobRecipeTag(jobRecipeId jobRecipeId: Int32, jobRecipeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteJobRecipeTagWithRequestBuilder(jobRecipeId: jobRecipeId, jobRecipeTag: jobRecipeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a jobRecipe.
     - DELETE /beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}
     - Deletes an existing jobRecipe tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to remove tag from 
     - parameter jobRecipeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobRecipeTagWithRequestBuilder(jobRecipeId jobRecipeId: Int32, jobRecipeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/tag/{jobRecipeTag}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeTag}", withString: "\(jobRecipeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a jobRecipe by id
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateJobRecipeById(jobRecipeId jobRecipeId: Int32, completion: ((data: JobRecipe?, error: ErrorType?) -> Void)) {
        getDuplicateJobRecipeByIdWithRequestBuilder(jobRecipeId: jobRecipeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a jobRecipe by id
     - GET /beta/jobRecipe/duplicate/{jobRecipeId}
     - Returns a duplicated jobRecipe identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "trackSteps" : false,
  "customFields" : {
    "key" : "{}"
  },
  "steps" : [ {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  }, {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  } ],
  "fulfillmentPlanId" : 7,
  "layout" : "layout",
  "warehouseId" : 6,
  "name" : "name",
  "trackAssemblies" : false,
  "assemblyInstructions" : "assemblyInstructions",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}}]
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to be duplicated. 

     - returns: RequestBuilder<JobRecipe> 
     */
    public class func getDuplicateJobRecipeByIdWithRequestBuilder(jobRecipeId jobRecipeId: Int32) -> RequestBuilder<JobRecipe> {
        var path = "/beta/jobRecipe/duplicate/{jobRecipeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JobRecipe>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search jobRecipes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobRecipeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [JobRecipe]?, error: ErrorType?) -> Void)) {
        getJobRecipeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search jobRecipes by filter
     - GET /beta/jobRecipe/search
     - Returns the list of jobRecipes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "outputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "trackSteps" : false,
  "customFields" : {
    "key" : "{}"
  },
  "steps" : [ {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  }, {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  } ],
  "fulfillmentPlanId" : 7,
  "layout" : "layout",
  "warehouseId" : 6,
  "name" : "name",
  "trackAssemblies" : false,
  "assemblyInstructions" : "assemblyInstructions",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}, {
  "outputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "trackSteps" : false,
  "customFields" : {
    "key" : "{}"
  },
  "steps" : [ {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  }, {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  } ],
  "fulfillmentPlanId" : 7,
  "layout" : "layout",
  "warehouseId" : 6,
  "name" : "name",
  "trackAssemblies" : false,
  "assemblyInstructions" : "assemblyInstructions",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[JobRecipe]> 
     */
    public class func getJobRecipeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[JobRecipe]> {
        let path = "/beta/jobRecipe/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JobRecipe]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a jobRecipe by id
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobRecipeById(jobRecipeId jobRecipeId: Int32, completion: ((data: JobRecipe?, error: ErrorType?) -> Void)) {
        getJobRecipeByIdWithRequestBuilder(jobRecipeId: jobRecipeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a jobRecipe by id
     - GET /beta/jobRecipe/{jobRecipeId}
     - Returns the jobRecipe identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "outputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  }, {
    "quantity" : 5,
    "customFields" : {
      "key" : "{}"
    },
    "sku" : "sku"
  } ],
  "trackSteps" : false,
  "customFields" : {
    "key" : "{}"
  },
  "steps" : [ {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  }, {
    "sequenceNo" : 2,
    "customFields" : {
      "key" : "{}"
    },
    "name" : "name",
    "assemblyInstructions" : "assemblyInstructions"
  } ],
  "fulfillmentPlanId" : 7,
  "layout" : "layout",
  "warehouseId" : 6,
  "name" : "name",
  "trackAssemblies" : false,
  "assemblyInstructions" : "assemblyInstructions",
  "id" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 1
}}]
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to be returned. 

     - returns: RequestBuilder<JobRecipe> 
     */
    public class func getJobRecipeByIdWithRequestBuilder(jobRecipeId jobRecipeId: Int32) -> RequestBuilder<JobRecipe> {
        var path = "/beta/jobRecipe/{jobRecipeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JobRecipe>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a jobRecipe.
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobRecipeFiles(jobRecipeId jobRecipeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getJobRecipeFilesWithRequestBuilder(jobRecipeId: jobRecipeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a jobRecipe.
     - GET /beta/jobRecipe/{jobRecipeId}/file
     - Get all existing jobRecipe files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getJobRecipeFilesWithRequestBuilder(jobRecipeId jobRecipeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a jobRecipe.
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobRecipeTags(jobRecipeId jobRecipeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getJobRecipeTagsWithRequestBuilder(jobRecipeId: jobRecipeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a jobRecipe.
     - GET /beta/jobRecipe/{jobRecipeId}/tag
     - Get all existing jobRecipe tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobRecipeId: (path) Id of the jobRecipe to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getJobRecipeTagsWithRequestBuilder(jobRecipeId jobRecipeId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/jobRecipe/{jobRecipeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{jobRecipeId}", withString: "\(jobRecipeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a jobRecipe
     
     - parameter body: (body) JobRecipe to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJobRecipe(body body: JobRecipe, completion: ((error: ErrorType?) -> Void)) {
        updateJobRecipeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a jobRecipe
     - PUT /beta/jobRecipe
     - Updates an existing jobRecipe using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) JobRecipe to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJobRecipeWithRequestBuilder(body body: JobRecipe) -> RequestBuilder<Void> {
        let path = "/beta/jobRecipe"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a jobRecipe custom fields
     
     - parameter body: (body) JobRecipe to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJobRecipeCustomFields(body body: JobRecipe, completion: ((error: ErrorType?) -> Void)) {
        updateJobRecipeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a jobRecipe custom fields
     - PUT /beta/jobRecipe/customFields
     - Updates an existing jobRecipe custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) JobRecipe to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJobRecipeCustomFieldsWithRequestBuilder(body body: JobRecipe) -> RequestBuilder<Void> {
        let path = "/beta/jobRecipe/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
