//
// ItemLowstockCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemLowstockCodeAPI: APIBase {
    /**
     
     Create an itemLowstockCode
     
     - parameter body: (body) ItemLowstockCode to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemLowstockCode(body body: ItemLowstockCode, completion: ((data: ItemLowstockCode?, error: ErrorType?) -> Void)) {
        addItemLowstockCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an itemLowstockCode
     
     - POST /beta/itemLowstockCode
     - Inserts a new itemLowstockCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter body: (body) ItemLowstockCode to be inserted. 

     - returns: RequestBuilder<ItemLowstockCode> 
     */
    public class func addItemLowstockCodeWithRequestBuilder(body body: ItemLowstockCode) -> RequestBuilder<ItemLowstockCode> {
        let path = "/beta/itemLowstockCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ItemLowstockCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new audit for an itemLowstockCode
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to add an audit to 
     - parameter itemLowstockCodeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemLowstockCodeAudit(itemLowstockCodeId itemLowstockCodeId: Int, itemLowstockCodeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addItemLowstockCodeAuditWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId, itemLowstockCodeAudit: itemLowstockCodeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new audit for an itemLowstockCode
     
     - PUT /beta/itemLowstockCode/{itemLowstockCodeId}/audit/{itemLowstockCodeAudit}
     - Adds an audit to an existing itemLowstockCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to add an audit to 
     - parameter itemLowstockCodeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemLowstockCodeAuditWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int, itemLowstockCodeAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/itemLowstockCode/{itemLowstockCodeId}/audit/{itemLowstockCodeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeAudit}", withString: "\(itemLowstockCodeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Add new tags for an itemLowstockCode.
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to add a tag to 
     - parameter itemLowstockCodeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemLowstockCodeTag(itemLowstockCodeId itemLowstockCodeId: Int, itemLowstockCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addItemLowstockCodeTagWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId, itemLowstockCodeTag: itemLowstockCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Add new tags for an itemLowstockCode.
     
     - PUT /beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}
     - Adds a tag to an existing itemLowstockCode.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to add a tag to 
     - parameter itemLowstockCodeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addItemLowstockCodeTagWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int, itemLowstockCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeTag}", withString: "\(itemLowstockCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an itemLowstockCode
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemLowstockCode(itemLowstockCodeId itemLowstockCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteItemLowstockCodeWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an itemLowstockCode
     
     - DELETE /beta/itemLowstockCode/{itemLowstockCodeId}
     - Deletes the itemLowstockCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemLowstockCodeWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int) -> RequestBuilder<Void> {
        var path = "/beta/itemLowstockCode/{itemLowstockCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a tag for an itemLowstockCode.
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to remove tag from 
     - parameter itemLowstockCodeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemLowstockCodeTag(itemLowstockCodeId itemLowstockCodeId: Int, itemLowstockCodeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteItemLowstockCodeTagWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId, itemLowstockCodeTag: itemLowstockCodeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a tag for an itemLowstockCode.
     
     - DELETE /beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}
     - Deletes an existing itemLowstockCode tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to remove tag from 
     - parameter itemLowstockCodeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemLowstockCodeTagWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int, itemLowstockCodeTag: String) -> RequestBuilder<Void> {
        var path = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag/{itemLowstockCodeTag}"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeTag}", withString: "\(itemLowstockCodeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated an itemLowstockCode by id
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemLowstockCodeById(itemLowstockCodeId itemLowstockCodeId: Int, completion: ((data: ItemLowstockCode?, error: ErrorType?) -> Void)) {
        getDuplicateItemLowstockCodeByIdWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an itemLowstockCode by id
     
     - GET /beta/itemLowstockCode/duplicate/{itemLowstockCodeId}
     - Returns a duplicated itemLowstockCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to be duplicated. 

     - returns: RequestBuilder<ItemLowstockCode> 
     */
    public class func getDuplicateItemLowstockCodeByIdWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int) -> RequestBuilder<ItemLowstockCode> {
        var path = "/beta/itemLowstockCode/duplicate/{itemLowstockCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemLowstockCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search itemLowstockCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemLowstockCodeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ItemLowstockCode]?, error: ErrorType?) -> Void)) {
        getItemLowstockCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search itemLowstockCodes by filter
     
     - GET /beta/itemLowstockCode/search
     - Returns the list of itemLowstockCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemLowstockCode]> 
     */
    public class func getItemLowstockCodeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ItemLowstockCode]> {
        let path = "/beta/itemLowstockCode/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ItemLowstockCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an itemLowstockCode by id
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemLowstockCodeById(itemLowstockCodeId itemLowstockCodeId: Int, completion: ((data: ItemLowstockCode?, error: ErrorType?) -> Void)) {
        getItemLowstockCodeByIdWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an itemLowstockCode by id
     
     - GET /beta/itemLowstockCode/{itemLowstockCodeId}
     - Returns the itemLowstockCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to be returned. 

     - returns: RequestBuilder<ItemLowstockCode> 
     */
    public class func getItemLowstockCodeByIdWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int) -> RequestBuilder<ItemLowstockCode> {
        var path = "/beta/itemLowstockCode/{itemLowstockCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemLowstockCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get the tags for an itemLowstockCode.
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemLowstockCodeTags(itemLowstockCodeId itemLowstockCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        getItemLowstockCodeTagsWithRequestBuilder(itemLowstockCodeId: itemLowstockCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Get the tags for an itemLowstockCode.
     
     - GET /beta/itemLowstockCode/{itemLowstockCodeId}/tag
     - Get all existing itemLowstockCode tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemLowstockCodeId: (path) Id of the itemLowstockCode to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getItemLowstockCodeTagsWithRequestBuilder(itemLowstockCodeId itemLowstockCodeId: Int) -> RequestBuilder<Void> {
        var path = "/beta/itemLowstockCode/{itemLowstockCodeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{itemLowstockCodeId}", withString: "\(itemLowstockCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an itemLowstockCode
     
     - parameter body: (body) ItemLowstockCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemLowstockCode(body body: ItemLowstockCode, completion: ((error: ErrorType?) -> Void)) {
        updateItemLowstockCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an itemLowstockCode
     
     - PUT /beta/itemLowstockCode
     - Updates an existing itemLowstockCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemLowstockCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemLowstockCodeWithRequestBuilder(body body: ItemLowstockCode) -> RequestBuilder<Void> {
        let path = "/beta/itemLowstockCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
