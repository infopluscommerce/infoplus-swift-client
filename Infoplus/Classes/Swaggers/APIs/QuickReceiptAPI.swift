//
// QuickReceiptAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class QuickReceiptAPI: APIBase {
    /**
     
     Create a quickReceipt
     
     - parameter body: (body) QuickReceipt to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addQuickReceipt(body body: QuickReceipt, completion: ((data: QuickReceipt?, error: ErrorType?) -> Void)) {
        addQuickReceiptWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create a quickReceipt
     
     - POST /v1.0/quickReceipt
     - Inserts a new quickReceipt using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "wrapCode" : "aeiou",
  "locationId" : 123,
  "unitsPerWrap" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "cartonLength" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "pricingPer" : "aeiou",
  "sell" : 1.3579000000000001069366817318950779736042022705078125,
  "lobId" : 123,
  "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
  "carrier" : "aeiou",
  "quantity" : 123,
  "unitsPerCase" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "unitCode" : "aeiou",
  "casesPerPallet" : 123,
  "productionLot" : "aeiou",
  "cartonWidth" : 1.3579000000000001069366817318950779736042022705078125,
  "status" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "origin" : "aeiou",
  "warehouseId" : 123,
  "revisionDate" : "aeiou",
  "sku" : "aeiou",
  "vendorId" : 123,
  "cost" : 1.3579000000000001069366817318950779736042022705078125,
  "cartonHeight" : 1.3579000000000001069366817318950779736042022705078125,
  "createdBy" : 123
}, contentType=application/json}]
     
     - parameter body: (body) QuickReceipt to be inserted. 

     - returns: RequestBuilder<QuickReceipt> 
     */
    public class func addQuickReceiptWithRequestBuilder(body body: QuickReceipt) -> RequestBuilder<QuickReceipt> {
        let path = "/v1.0/quickReceipt"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<QuickReceipt>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete a quickReceipt
     
     - parameter quickReceiptId: (path) Id of the quickReceipt to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQuickReceipt(quickReceiptId quickReceiptId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteQuickReceiptWithRequestBuilder(quickReceiptId: quickReceiptId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete a quickReceipt
     
     - DELETE /v1.0/quickReceipt/{quickReceiptId}
     - Deletes the quickReceipt identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter quickReceiptId: (path) Id of the quickReceipt to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteQuickReceiptWithRequestBuilder(quickReceiptId quickReceiptId: Int) -> RequestBuilder<Void> {
        var path = "/v1.0/quickReceipt/{quickReceiptId}"
        path = path.stringByReplacingOccurrencesOfString("{quickReceiptId}", withString: "\(quickReceiptId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search quickReceipts by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQuickReceiptByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [QuickReceipt]?, error: ErrorType?) -> Void)) {
        getQuickReceiptByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search quickReceipts by filter
     
     - GET /v1.0/quickReceipt/search
     - Returns the list of quickReceipts that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example=[ {
  "wrapCode" : "aeiou",
  "locationId" : 123,
  "unitsPerWrap" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "cartonLength" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "pricingPer" : "aeiou",
  "sell" : 1.3579000000000001069366817318950779736042022705078125,
  "lobId" : 123,
  "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
  "carrier" : "aeiou",
  "quantity" : 123,
  "unitsPerCase" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "unitCode" : "aeiou",
  "casesPerPallet" : 123,
  "productionLot" : "aeiou",
  "cartonWidth" : 1.3579000000000001069366817318950779736042022705078125,
  "status" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "origin" : "aeiou",
  "warehouseId" : 123,
  "revisionDate" : "aeiou",
  "sku" : "aeiou",
  "vendorId" : 123,
  "cost" : 1.3579000000000001069366817318950779736042022705078125,
  "cartonHeight" : 1.3579000000000001069366817318950779736042022705078125,
  "createdBy" : 123
} ], contentType=application/json}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[QuickReceipt]> 
     */
    public class func getQuickReceiptByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[QuickReceipt]> {
        let path = "/v1.0/quickReceipt/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[QuickReceipt]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get a quickReceipt by id
     
     - parameter quickReceiptId: (path) Id of the quickReceipt to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQuickReceiptById(quickReceiptId quickReceiptId: Int, completion: ((data: QuickReceipt?, error: ErrorType?) -> Void)) {
        getQuickReceiptByIdWithRequestBuilder(quickReceiptId: quickReceiptId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a quickReceipt by id
     
     - GET /v1.0/quickReceipt/{quickReceiptId}
     - Returns the quickReceipt identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "wrapCode" : "aeiou",
  "locationId" : 123,
  "unitsPerWrap" : 123,
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "cartonLength" : 1.3579000000000001069366817318950779736042022705078125,
  "id" : 123,
  "pricingPer" : "aeiou",
  "sell" : 1.3579000000000001069366817318950779736042022705078125,
  "lobId" : 123,
  "caseWeight" : 1.3579000000000001069366817318950779736042022705078125,
  "carrier" : "aeiou",
  "quantity" : 123,
  "unitsPerCase" : 123,
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "unitCode" : "aeiou",
  "casesPerPallet" : 123,
  "productionLot" : "aeiou",
  "cartonWidth" : 1.3579000000000001069366817318950779736042022705078125,
  "status" : "aeiou",
  "weightPerWrap" : 1.3579000000000001069366817318950779736042022705078125,
  "origin" : "aeiou",
  "warehouseId" : 123,
  "revisionDate" : "aeiou",
  "sku" : "aeiou",
  "vendorId" : 123,
  "cost" : 1.3579000000000001069366817318950779736042022705078125,
  "cartonHeight" : 1.3579000000000001069366817318950779736042022705078125,
  "createdBy" : 123
}, contentType=application/json}]
     
     - parameter quickReceiptId: (path) Id of the quickReceipt to be returned. 

     - returns: RequestBuilder<QuickReceipt> 
     */
    public class func getQuickReceiptByIdWithRequestBuilder(quickReceiptId quickReceiptId: Int) -> RequestBuilder<QuickReceipt> {
        var path = "/v1.0/quickReceipt/{quickReceiptId}"
        path = path.stringByReplacingOccurrencesOfString("{quickReceiptId}", withString: "\(quickReceiptId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<QuickReceipt>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update a quickReceipt
     
     - parameter body: (body) QuickReceipt to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateQuickReceipt(body body: QuickReceipt, completion: ((error: ErrorType?) -> Void)) {
        updateQuickReceiptWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update a quickReceipt
     
     - PUT /v1.0/quickReceipt
     - Updates an existing quickReceipt using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) QuickReceipt to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateQuickReceiptWithRequestBuilder(body body: QuickReceipt) -> RequestBuilder<Void> {
        let path = "/v1.0/quickReceipt"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
