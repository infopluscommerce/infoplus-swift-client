//
// FinanceSystemConnectionLogAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class FinanceSystemConnectionLogAPI: APIBase {
    /**
     Create a financeSystemConnectionLog
     
     - parameter body: (body) FinanceSystemConnectionLog to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFinanceSystemConnectionLog(body body: FinanceSystemConnectionLog, completion: ((data: FinanceSystemConnectionLog?, error: ErrorType?) -> Void)) {
        addFinanceSystemConnectionLogWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a financeSystemConnectionLog
     - POST /beta/financeSystemConnectionLog
     - Inserts a new financeSystemConnectionLog using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "financeSystemConnectionId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) FinanceSystemConnectionLog to be inserted. 

     - returns: RequestBuilder<FinanceSystemConnectionLog> 
     */
    public class func addFinanceSystemConnectionLogWithRequestBuilder(body body: FinanceSystemConnectionLog) -> RequestBuilder<FinanceSystemConnectionLog> {
        let path = "/beta/financeSystemConnectionLog"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FinanceSystemConnectionLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a financeSystemConnectionLog
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to add an audit to 
     - parameter financeSystemConnectionLogAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFinanceSystemConnectionLogAudit(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, financeSystemConnectionLogAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addFinanceSystemConnectionLogAuditWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId, financeSystemConnectionLogAudit: financeSystemConnectionLogAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a financeSystemConnectionLog
     - PUT /beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/audit/{financeSystemConnectionLogAudit}
     - Adds an audit to an existing financeSystemConnectionLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to add an audit to 
     - parameter financeSystemConnectionLogAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFinanceSystemConnectionLogAuditWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, financeSystemConnectionLogAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/audit/{financeSystemConnectionLogAudit}"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogAudit}", withString: "\(financeSystemConnectionLogAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a financeSystemConnectionLog.
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to add a tag to 
     - parameter financeSystemConnectionLogTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addFinanceSystemConnectionLogTag(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, financeSystemConnectionLogTag: String, completion: ((error: ErrorType?) -> Void)) {
        addFinanceSystemConnectionLogTagWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId, financeSystemConnectionLogTag: financeSystemConnectionLogTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a financeSystemConnectionLog.
     - PUT /beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}
     - Adds a tag to an existing financeSystemConnectionLog.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to add a tag to 
     - parameter financeSystemConnectionLogTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addFinanceSystemConnectionLogTagWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, financeSystemConnectionLogTag: String) -> RequestBuilder<Void> {
        var path = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogTag}", withString: "\(financeSystemConnectionLogTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a financeSystemConnectionLog
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFinanceSystemConnectionLog(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteFinanceSystemConnectionLogWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a financeSystemConnectionLog
     - DELETE /beta/financeSystemConnectionLog/{financeSystemConnectionLogId}
     - Deletes the financeSystemConnectionLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFinanceSystemConnectionLogWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a financeSystemConnectionLog.
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to remove tag from 
     - parameter financeSystemConnectionLogTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteFinanceSystemConnectionLogTag(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, financeSystemConnectionLogTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteFinanceSystemConnectionLogTagWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId, financeSystemConnectionLogTag: financeSystemConnectionLogTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a financeSystemConnectionLog.
     - DELETE /beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}
     - Deletes an existing financeSystemConnectionLog tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to remove tag from 
     - parameter financeSystemConnectionLogTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteFinanceSystemConnectionLogTagWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, financeSystemConnectionLogTag: String) -> RequestBuilder<Void> {
        var path = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag/{financeSystemConnectionLogTag}"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogTag}", withString: "\(financeSystemConnectionLogTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a financeSystemConnectionLog by id
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateFinanceSystemConnectionLogById(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, completion: ((data: FinanceSystemConnectionLog?, error: ErrorType?) -> Void)) {
        getDuplicateFinanceSystemConnectionLogByIdWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a financeSystemConnectionLog by id
     - GET /beta/financeSystemConnectionLog/duplicate/{financeSystemConnectionLogId}
     - Returns a duplicated financeSystemConnectionLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "financeSystemConnectionId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to be duplicated. 

     - returns: RequestBuilder<FinanceSystemConnectionLog> 
     */
    public class func getDuplicateFinanceSystemConnectionLogByIdWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32) -> RequestBuilder<FinanceSystemConnectionLog> {
        var path = "/beta/financeSystemConnectionLog/duplicate/{financeSystemConnectionLogId}"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FinanceSystemConnectionLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search financeSystemConnectionLogs by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFinanceSystemConnectionLogByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [FinanceSystemConnectionLog]?, error: ErrorType?) -> Void)) {
        getFinanceSystemConnectionLogByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search financeSystemConnectionLogs by filter
     - GET /beta/financeSystemConnectionLog/search
     - Returns the list of financeSystemConnectionLogs that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "notes" : "notes",
  "financeSystemConnectionId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "notes" : "notes",
  "financeSystemConnectionId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[FinanceSystemConnectionLog]> 
     */
    public class func getFinanceSystemConnectionLogByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[FinanceSystemConnectionLog]> {
        let path = "/beta/financeSystemConnectionLog/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[FinanceSystemConnectionLog]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a financeSystemConnectionLog by id
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFinanceSystemConnectionLogById(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, completion: ((data: FinanceSystemConnectionLog?, error: ErrorType?) -> Void)) {
        getFinanceSystemConnectionLogByIdWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a financeSystemConnectionLog by id
     - GET /beta/financeSystemConnectionLog/{financeSystemConnectionLogId}
     - Returns the financeSystemConnectionLog identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "notes" : "notes",
  "financeSystemConnectionId" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "type" : "type",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to be returned. 

     - returns: RequestBuilder<FinanceSystemConnectionLog> 
     */
    public class func getFinanceSystemConnectionLogByIdWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32) -> RequestBuilder<FinanceSystemConnectionLog> {
        var path = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FinanceSystemConnectionLog>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a financeSystemConnectionLog.
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFinanceSystemConnectionLogTags(financeSystemConnectionLogId financeSystemConnectionLogId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getFinanceSystemConnectionLogTagsWithRequestBuilder(financeSystemConnectionLogId: financeSystemConnectionLogId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a financeSystemConnectionLog.
     - GET /beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag
     - Get all existing financeSystemConnectionLog tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter financeSystemConnectionLogId: (path) Id of the financeSystemConnectionLog to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getFinanceSystemConnectionLogTagsWithRequestBuilder(financeSystemConnectionLogId financeSystemConnectionLogId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/financeSystemConnectionLog/{financeSystemConnectionLogId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{financeSystemConnectionLogId}", withString: "\(financeSystemConnectionLogId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a financeSystemConnectionLog
     
     - parameter body: (body) FinanceSystemConnectionLog to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateFinanceSystemConnectionLog(body body: FinanceSystemConnectionLog, completion: ((error: ErrorType?) -> Void)) {
        updateFinanceSystemConnectionLogWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a financeSystemConnectionLog
     - PUT /beta/financeSystemConnectionLog
     - Updates an existing financeSystemConnectionLog using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) FinanceSystemConnectionLog to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateFinanceSystemConnectionLogWithRequestBuilder(body body: FinanceSystemConnectionLog) -> RequestBuilder<Void> {
        let path = "/beta/financeSystemConnectionLog"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
