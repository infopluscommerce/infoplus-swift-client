//
// ItemBuyerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemBuyerAPI: APIBase {
    /**
     
     Search itemBuyers
     
     - parameter searchText: (query) Search text, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemBuyerBySearchText(searchText searchText: String?, page: Int?, limit: Int?, completion: ((data: [ItemBuyer]?, error: ErrorType?) -> Void)) {
        getItemBuyerBySearchTextWithRequestBuilder(searchText: searchText, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search itemBuyers
     
     - GET /v1.0/itemBuyer/search
     - Returns the list of itemBuyers that match the given searchText.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example=[ {
  "id" : 123,
  "label" : "aeiou"
} ], contentType=application/json}]
     
     - parameter searchText: (query) Search text, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)

     - returns: RequestBuilder<[ItemBuyer]> 
     */
    public class func getItemBuyerBySearchTextWithRequestBuilder(searchText searchText: String?, page: Int?, limit: Int?) -> RequestBuilder<[ItemBuyer]> {
        let path = "/v1.0/itemBuyer/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "searchText": searchText,
            "page": page,
            "limit": limit
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ItemBuyer]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an itemBuyer by id
     
     - parameter itemBuyerId: (path) Id of itemBuyer to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getTranslateBuyerById(itemBuyerId itemBuyerId: String, completion: ((data: ItemBuyer?, error: ErrorType?) -> Void)) {
        getTranslateBuyerByIdWithRequestBuilder(itemBuyerId: itemBuyerId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an itemBuyer by id
     
     - GET /v1.0/itemBuyer/{itemBuyerId}
     - Returns the itemBuyer identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{example={
  "id" : 123,
  "label" : "aeiou"
}, contentType=application/json}]
     
     - parameter itemBuyerId: (path) Id of itemBuyer to be returned. 

     - returns: RequestBuilder<ItemBuyer> 
     */
    public class func getTranslateBuyerByIdWithRequestBuilder(itemBuyerId itemBuyerId: String) -> RequestBuilder<ItemBuyer> {
        var path = "/v1.0/itemBuyer/{itemBuyerId}"
        path = path.stringByReplacingOccurrencesOfString("{itemBuyerId}", withString: "\(itemBuyerId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemBuyer>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

}
