//
// JobTypeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class JobTypeAPI: APIBase {
    /**
     Create a jobType
     
     - parameter body: (body) JobType to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobType(body body: JobType, completion: ((data: JobType?, error: ErrorType?) -> Void)) {
        addJobTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a jobType
     - POST /v3.0/jobType
     - Inserts a new jobType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "jobCode" : "jobCode",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter body: (body) JobType to be inserted. 

     - returns: RequestBuilder<JobType> 
     */
    public class func addJobTypeWithRequestBuilder(body body: JobType) -> RequestBuilder<JobType> {
        let path = "/v3.0/jobType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JobType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for a jobType
     
     - parameter jobTypeId: (path) Id of the jobType to add an audit to 
     - parameter jobTypeAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobTypeAudit(jobTypeId jobTypeId: Int32, jobTypeAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addJobTypeAuditWithRequestBuilder(jobTypeId: jobTypeId, jobTypeAudit: jobTypeAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for a jobType
     - PUT /v3.0/jobType/{jobTypeId}/audit/{jobTypeAudit}
     - Adds an audit to an existing jobType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to add an audit to 
     - parameter jobTypeAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobTypeAuditWithRequestBuilder(jobTypeId jobTypeId: Int32, jobTypeAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/audit/{jobTypeAudit}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jobTypeAudit}", withString: "\(jobTypeAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a jobType
     
     - parameter jobTypeId: (path) Id of the jobType to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobTypeFile(jobTypeId jobTypeId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addJobTypeFileWithRequestBuilder(jobTypeId: jobTypeId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a jobType
     - POST /v3.0/jobType/{jobTypeId}/file/{fileName}
     - Adds a file to an existing jobType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobTypeFileWithRequestBuilder(jobTypeId jobTypeId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to a jobType by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter jobTypeId: (path) Id of the jobType to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobTypeFileByURL(body body: RecordFile, jobTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addJobTypeFileByURLWithRequestBuilder(body: body, jobTypeId: jobTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to a jobType by URL.
     - POST /v3.0/jobType/{jobTypeId}/file
     - Adds a file to an existing jobType by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter jobTypeId: (path) Id of the jobType to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobTypeFileByURLWithRequestBuilder(body body: RecordFile, jobTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for a jobType.
     
     - parameter jobTypeId: (path) Id of the jobType to add a tag to 
     - parameter jobTypeTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addJobTypeTag(jobTypeId jobTypeId: Int32, jobTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        addJobTypeTagWithRequestBuilder(jobTypeId: jobTypeId, jobTypeTag: jobTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for a jobType.
     - PUT /v3.0/jobType/{jobTypeId}/tag/{jobTypeTag}
     - Adds a tag to an existing jobType.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to add a tag to 
     - parameter jobTypeTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addJobTypeTagWithRequestBuilder(jobTypeId jobTypeId: Int32, jobTypeTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/tag/{jobTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jobTypeTag}", withString: "\(jobTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a jobType
     
     - parameter jobTypeId: (path) Id of the jobType to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobType(jobTypeId jobTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteJobTypeWithRequestBuilder(jobTypeId: jobTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a jobType
     - DELETE /v3.0/jobType/{jobTypeId}
     - Deletes the jobType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobTypeWithRequestBuilder(jobTypeId jobTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for a jobType.
     
     - parameter jobTypeId: (path) Id of the jobType to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobTypeFile(jobTypeId jobTypeId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteJobTypeFileWithRequestBuilder(jobTypeId: jobTypeId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for a jobType.
     - DELETE /v3.0/jobType/{jobTypeId}/file/{fileId}
     - Deletes an existing jobType file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobTypeFileWithRequestBuilder(jobTypeId jobTypeId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for a jobType.
     
     - parameter jobTypeId: (path) Id of the jobType to remove tag from 
     - parameter jobTypeTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteJobTypeTag(jobTypeId jobTypeId: Int32, jobTypeTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteJobTypeTagWithRequestBuilder(jobTypeId: jobTypeId, jobTypeTag: jobTypeTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for a jobType.
     - DELETE /v3.0/jobType/{jobTypeId}/tag/{jobTypeTag}
     - Deletes an existing jobType tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to remove tag from 
     - parameter jobTypeTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteJobTypeTagWithRequestBuilder(jobTypeId jobTypeId: Int32, jobTypeTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/tag/{jobTypeTag}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jobTypeTag}", withString: "\(jobTypeTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated a jobType by id
     
     - parameter jobTypeId: (path) Id of the jobType to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateJobTypeById(jobTypeId jobTypeId: Int32, completion: ((data: JobType?, error: ErrorType?) -> Void)) {
        getDuplicateJobTypeByIdWithRequestBuilder(jobTypeId: jobTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated a jobType by id
     - GET /v3.0/jobType/duplicate/{jobTypeId}
     - Returns a duplicated jobType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "jobCode" : "jobCode",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobTypeId: (path) Id of the jobType to be duplicated. 

     - returns: RequestBuilder<JobType> 
     */
    public class func getDuplicateJobTypeByIdWithRequestBuilder(jobTypeId jobTypeId: Int32) -> RequestBuilder<JobType> {
        var path = "/v3.0/jobType/duplicate/{jobTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JobType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search jobTypes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobTypeByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [JobType]?, error: ErrorType?) -> Void)) {
        getJobTypeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search jobTypes by filter
     - GET /v3.0/jobType/search
     - Returns the list of jobTypes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "jobCode" : "jobCode",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, {
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "jobCode" : "jobCode",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[JobType]> 
     */
    public class func getJobTypeByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[JobType]> {
        let path = "/v3.0/jobType/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JobType]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a jobType by id
     
     - parameter jobTypeId: (path) Id of the jobType to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobTypeById(jobTypeId jobTypeId: Int32, completion: ((data: JobType?, error: ErrorType?) -> Void)) {
        getJobTypeByIdWithRequestBuilder(jobTypeId: jobTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a jobType by id
     - GET /v3.0/jobType/{jobTypeId}
     - Returns the jobType identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "clientId" : 6,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "customFields" : {
    "key" : "{}"
  },
  "name" : "name",
  "description" : "description",
  "jobCode" : "jobCode",
  "id" : 0,
  "isActive" : false,
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobTypeId: (path) Id of the jobType to be returned. 

     - returns: RequestBuilder<JobType> 
     */
    public class func getJobTypeByIdWithRequestBuilder(jobTypeId jobTypeId: Int32) -> RequestBuilder<JobType> {
        var path = "/v3.0/jobType/{jobTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JobType>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for a jobType.
     
     - parameter jobTypeId: (path) Id of the jobType to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobTypeFiles(jobTypeId jobTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getJobTypeFilesWithRequestBuilder(jobTypeId: jobTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for a jobType.
     - GET /v3.0/jobType/{jobTypeId}/file
     - Get all existing jobType files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getJobTypeFilesWithRequestBuilder(jobTypeId jobTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/file"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for a jobType.
     
     - parameter jobTypeId: (path) Id of the jobType to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJobTypeTags(jobTypeId jobTypeId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getJobTypeTagsWithRequestBuilder(jobTypeId: jobTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for a jobType.
     - GET /v3.0/jobType/{jobTypeId}/tag
     - Get all existing jobType tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter jobTypeId: (path) Id of the jobType to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getJobTypeTagsWithRequestBuilder(jobTypeId jobTypeId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/jobType/{jobTypeId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{jobTypeId}", withString: "\(jobTypeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a jobType
     
     - parameter body: (body) JobType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJobType(body body: JobType, completion: ((error: ErrorType?) -> Void)) {
        updateJobTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a jobType
     - PUT /v3.0/jobType
     - Updates an existing jobType using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) JobType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJobTypeWithRequestBuilder(body body: JobType) -> RequestBuilder<Void> {
        let path = "/v3.0/jobType"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a jobType custom fields
     
     - parameter body: (body) JobType to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJobTypeCustomFields(body body: JobType, completion: ((error: ErrorType?) -> Void)) {
        updateJobTypeCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a jobType custom fields
     - PUT /v3.0/jobType/customFields
     - Updates an existing jobType custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) JobType to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJobTypeCustomFieldsWithRequestBuilder(body body: JobType) -> RequestBuilder<Void> {
        let path = "/v3.0/jobType/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
