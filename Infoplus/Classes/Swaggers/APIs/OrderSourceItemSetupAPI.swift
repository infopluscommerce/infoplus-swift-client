//
// OrderSourceItemSetupAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class OrderSourceItemSetupAPI: APIBase {
    /**
     Create an orderSourceItemSetup
     
     - parameter body: (body) OrderSourceItemSetup to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderSourceItemSetup(body body: OrderSourceItemSetup, completion: ((data: OrderSourceItemSetup?, error: ErrorType?) -> Void)) {
        addOrderSourceItemSetupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an orderSourceItemSetup
     - POST /v3.0/orderSourceItemSetup
     - Inserts a new orderSourceItemSetup using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "orderSourceId" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "packingNotes" : "packingNotes",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "sku" : "sku",
  "skuTranslation" : "skuTranslation",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter body: (body) OrderSourceItemSetup to be inserted. 

     - returns: RequestBuilder<OrderSourceItemSetup> 
     */
    public class func addOrderSourceItemSetupWithRequestBuilder(body body: OrderSourceItemSetup) -> RequestBuilder<OrderSourceItemSetup> {
        let path = "/v3.0/orderSourceItemSetup"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderSourceItemSetup>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an orderSourceItemSetup
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add an audit to 
     - parameter orderSourceItemSetupAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderSourceItemSetupAudit(orderSourceItemSetupId orderSourceItemSetupId: Int32, orderSourceItemSetupAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderSourceItemSetupAuditWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId, orderSourceItemSetupAudit: orderSourceItemSetupAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an orderSourceItemSetup
     - PUT /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/audit/{orderSourceItemSetupAudit}
     - Adds an audit to an existing orderSourceItemSetup.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add an audit to 
     - parameter orderSourceItemSetupAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderSourceItemSetupAuditWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32, orderSourceItemSetupAudit: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/audit/{orderSourceItemSetupAudit}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupAudit}", withString: "\(orderSourceItemSetupAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an orderSourceItemSetup
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderSourceItemSetupFile(orderSourceItemSetupId orderSourceItemSetupId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderSourceItemSetupFileWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an orderSourceItemSetup
     - POST /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileName}
     - Adds a file to an existing orderSourceItemSetup.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderSourceItemSetupFileWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an orderSourceItemSetup by URL.
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add an file to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderSourceItemSetupFileByURL(body body: RecordFile, orderSourceItemSetupId: Int32, completion: ((error: ErrorType?) -> Void)) {
        addOrderSourceItemSetupFileByURLWithRequestBuilder(body: body, orderSourceItemSetupId: orderSourceItemSetupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an orderSourceItemSetup by URL.
     - POST /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file
     - Adds a file to an existing orderSourceItemSetup by URL.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) The url and optionly fileName to be used. 
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add an file to 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderSourceItemSetupFileByURLWithRequestBuilder(body body: RecordFile, orderSourceItemSetupId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an orderSourceItemSetup.
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add a tag to 
     - parameter orderSourceItemSetupTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOrderSourceItemSetupTag(orderSourceItemSetupId orderSourceItemSetupId: Int32, orderSourceItemSetupTag: String, completion: ((error: ErrorType?) -> Void)) {
        addOrderSourceItemSetupTagWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId, orderSourceItemSetupTag: orderSourceItemSetupTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an orderSourceItemSetup.
     - PUT /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}
     - Adds a tag to an existing orderSourceItemSetup.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to add a tag to 
     - parameter orderSourceItemSetupTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOrderSourceItemSetupTagWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32, orderSourceItemSetupTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupTag}", withString: "\(orderSourceItemSetupTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an orderSourceItemSetup
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderSourceItemSetup(orderSourceItemSetupId orderSourceItemSetupId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderSourceItemSetupWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an orderSourceItemSetup
     - DELETE /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}
     - Deletes the orderSourceItemSetup identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderSourceItemSetupWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a file for an orderSourceItemSetup.
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to remove file from 
     - parameter fileId: (path) Id of the file to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderSourceItemSetupFile(orderSourceItemSetupId orderSourceItemSetupId: Int32, fileId: Int32, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderSourceItemSetupFileWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId, fileId: fileId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a file for an orderSourceItemSetup.
     - DELETE /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileId}
     - Deletes an existing orderSourceItemSetup file using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to remove file from 
     - parameter fileId: (path) Id of the file to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderSourceItemSetupFileWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32, fileId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file/{fileId}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileId}", withString: "\(fileId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an orderSourceItemSetup.
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to remove tag from 
     - parameter orderSourceItemSetupTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrderSourceItemSetupTag(orderSourceItemSetupId orderSourceItemSetupId: Int32, orderSourceItemSetupTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteOrderSourceItemSetupTagWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId, orderSourceItemSetupTag: orderSourceItemSetupTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an orderSourceItemSetup.
     - DELETE /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}
     - Deletes an existing orderSourceItemSetup tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to remove tag from 
     - parameter orderSourceItemSetupTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOrderSourceItemSetupTagWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32, orderSourceItemSetupTag: String) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/tag/{orderSourceItemSetupTag}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupTag}", withString: "\(orderSourceItemSetupTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an orderSourceItemSetup by id
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateOrderSourceItemSetupById(orderSourceItemSetupId orderSourceItemSetupId: Int32, completion: ((data: OrderSourceItemSetup?, error: ErrorType?) -> Void)) {
        getDuplicateOrderSourceItemSetupByIdWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an orderSourceItemSetup by id
     - GET /v3.0/orderSourceItemSetup/duplicate/{orderSourceItemSetupId}
     - Returns a duplicated orderSourceItemSetup identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "orderSourceId" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "packingNotes" : "packingNotes",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "sku" : "sku",
  "skuTranslation" : "skuTranslation",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to be duplicated. 

     - returns: RequestBuilder<OrderSourceItemSetup> 
     */
    public class func getDuplicateOrderSourceItemSetupByIdWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32) -> RequestBuilder<OrderSourceItemSetup> {
        var path = "/v3.0/orderSourceItemSetup/duplicate/{orderSourceItemSetupId}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderSourceItemSetup>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search orderSourceItemSetups by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderSourceItemSetupByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [OrderSourceItemSetup]?, error: ErrorType?) -> Void)) {
        getOrderSourceItemSetupByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search orderSourceItemSetups by filter
     - GET /v3.0/orderSourceItemSetup/search
     - Returns the list of orderSourceItemSetups that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "orderSourceId" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "packingNotes" : "packingNotes",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "sku" : "sku",
  "skuTranslation" : "skuTranslation",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}, {
  "orderSourceId" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "packingNotes" : "packingNotes",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "sku" : "sku",
  "skuTranslation" : "skuTranslation",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[OrderSourceItemSetup]> 
     */
    public class func getOrderSourceItemSetupByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[OrderSourceItemSetup]> {
        let path = "/v3.0/orderSourceItemSetup/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[OrderSourceItemSetup]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an orderSourceItemSetup by id
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderSourceItemSetupById(orderSourceItemSetupId orderSourceItemSetupId: Int32, completion: ((data: OrderSourceItemSetup?, error: ErrorType?) -> Void)) {
        getOrderSourceItemSetupByIdWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an orderSourceItemSetup by id
     - GET /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}
     - Returns the orderSourceItemSetup identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "orderSourceId" : 1,
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "packingNotes" : "packingNotes",
  "customFields" : {
    "key" : "{}"
  },
  "id" : 0,
  "sku" : "sku",
  "skuTranslation" : "skuTranslation",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "lobId" : 6
}}]
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to be returned. 

     - returns: RequestBuilder<OrderSourceItemSetup> 
     */
    public class func getOrderSourceItemSetupByIdWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32) -> RequestBuilder<OrderSourceItemSetup> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrderSourceItemSetup>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the files for an orderSourceItemSetup.
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to get files for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderSourceItemSetupFiles(orderSourceItemSetupId orderSourceItemSetupId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getOrderSourceItemSetupFilesWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the files for an orderSourceItemSetup.
     - GET /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file
     - Get all existing orderSourceItemSetup files.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to get files for 

     - returns: RequestBuilder<Void> 
     */
    public class func getOrderSourceItemSetupFilesWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/file"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an orderSourceItemSetup.
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrderSourceItemSetupTags(orderSourceItemSetupId orderSourceItemSetupId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getOrderSourceItemSetupTagsWithRequestBuilder(orderSourceItemSetupId: orderSourceItemSetupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an orderSourceItemSetup.
     - GET /v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/tag
     - Get all existing orderSourceItemSetup tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter orderSourceItemSetupId: (path) Id of the orderSourceItemSetup to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getOrderSourceItemSetupTagsWithRequestBuilder(orderSourceItemSetupId orderSourceItemSetupId: Int32) -> RequestBuilder<Void> {
        var path = "/v3.0/orderSourceItemSetup/{orderSourceItemSetupId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{orderSourceItemSetupId}", withString: "\(orderSourceItemSetupId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an orderSourceItemSetup
     
     - parameter body: (body) OrderSourceItemSetup to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOrderSourceItemSetup(body body: OrderSourceItemSetup, completion: ((error: ErrorType?) -> Void)) {
        updateOrderSourceItemSetupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an orderSourceItemSetup
     - PUT /v3.0/orderSourceItemSetup
     - Updates an existing orderSourceItemSetup using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) OrderSourceItemSetup to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateOrderSourceItemSetupWithRequestBuilder(body body: OrderSourceItemSetup) -> RequestBuilder<Void> {
        let path = "/v3.0/orderSourceItemSetup"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an orderSourceItemSetup custom fields
     
     - parameter body: (body) OrderSourceItemSetup to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOrderSourceItemSetupCustomFields(body body: OrderSourceItemSetup, completion: ((error: ErrorType?) -> Void)) {
        updateOrderSourceItemSetupCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an orderSourceItemSetup custom fields
     - PUT /v3.0/orderSourceItemSetup/customFields
     - Updates an existing orderSourceItemSetup custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) OrderSourceItemSetup to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateOrderSourceItemSetupCustomFieldsWithRequestBuilder(body body: OrderSourceItemSetup) -> RequestBuilder<Void> {
        let path = "/v3.0/orderSourceItemSetup/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
