//
// OmsOrderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class OmsOrderAPI: APIBase {
    /**
     Create an omsOrder
     
     - parameter body: (body) OmsOrder to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOmsOrder(body body: OmsOrder, completion: ((data: OmsOrder?, error: ErrorType?) -> Void)) {
        addOmsOrderWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an omsOrder
     - POST /beta/omsOrder
     - Inserts a new omsOrder using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "customFields" : {
    "key" : "{}"
  },
  "orderStatus" : "orderStatus",
  "subTotal" : 1.489415909854170383397331534069962799549102783203125,
  "integrationPartnerId" : 7,
  "total" : 1.46581298050294517310021547018550336360931396484375,
  "orderEntryProgramId" : 5,
  "mailRecipient" : false,
  "customerId" : 9,
  "isGift" : false,
  "id" : 2,
  "keyCodeDescription" : "keyCodeDescription",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "orderSourceId" : 1,
  "batchNo" : "batchNo",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shOverrideAmount" : 4.1456080298839363962315474054776132106781005859375,
  "giftMessage" : "giftMessage",
  "externalId" : "externalId",
  "tax" : 3.61607674925191080461672754609026014804840087890625,
  "emailRecipient" : false,
  "nextOMSOrderId" : 7,
  "keyCode" : "keyCode",
  "omsOrderNo" : 6,
  "legacyUserId" : 5,
  "shippingHandling" : 2.027123023002321833274663731572218239307403564453125,
  "distCharges" : 1.024645700144157789424070870154537260532379150390625
}}]
     
     - parameter body: (body) OmsOrder to be inserted. 

     - returns: RequestBuilder<OmsOrder> 
     */
    public class func addOmsOrderWithRequestBuilder(body body: OmsOrder) -> RequestBuilder<OmsOrder> {
        let path = "/beta/omsOrder"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OmsOrder>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new audit for an omsOrder
     
     - parameter omsOrderId: (path) Id of the omsOrder to add an audit to 
     - parameter omsOrderAudit: (path) The audit to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOmsOrderAudit(omsOrderId omsOrderId: Int32, omsOrderAudit: String, completion: ((error: ErrorType?) -> Void)) {
        addOmsOrderAuditWithRequestBuilder(omsOrderId: omsOrderId, omsOrderAudit: omsOrderAudit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new audit for an omsOrder
     - PUT /beta/omsOrder/{omsOrderId}/audit/{omsOrderAudit}
     - Adds an audit to an existing omsOrder.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter omsOrderId: (path) Id of the omsOrder to add an audit to 
     - parameter omsOrderAudit: (path) The audit to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOmsOrderAuditWithRequestBuilder(omsOrderId omsOrderId: Int32, omsOrderAudit: String) -> RequestBuilder<Void> {
        var path = "/beta/omsOrder/{omsOrderId}/audit/{omsOrderAudit}"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{omsOrderAudit}", withString: "\(omsOrderAudit)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Attach a file to an omsOrder
     
     - parameter omsOrderId: (path) Id of the omsOrder to add a file to 
     - parameter fileName: (path) Name of file 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOmsOrderFile(omsOrderId omsOrderId: Int32, fileName: String, completion: ((error: ErrorType?) -> Void)) {
        addOmsOrderFileWithRequestBuilder(omsOrderId: omsOrderId, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Attach a file to an omsOrder
     - POST /beta/omsOrder/{omsOrderId}/file/{fileName}
     - Adds a file to an existing omsOrder.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter omsOrderId: (path) Id of the omsOrder to add a file to 
     - parameter fileName: (path) Name of file 

     - returns: RequestBuilder<Void> 
     */
    public class func addOmsOrderFileWithRequestBuilder(omsOrderId omsOrderId: Int32, fileName: String) -> RequestBuilder<Void> {
        var path = "/beta/omsOrder/{omsOrderId}/file/{fileName}"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{fileName}", withString: "\(fileName)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add new tags for an omsOrder.
     
     - parameter omsOrderId: (path) Id of the omsOrder to add a tag to 
     - parameter omsOrderTag: (path) The tag to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addOmsOrderTag(omsOrderId omsOrderId: Int32, omsOrderTag: String, completion: ((error: ErrorType?) -> Void)) {
        addOmsOrderTagWithRequestBuilder(omsOrderId: omsOrderId, omsOrderTag: omsOrderTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add new tags for an omsOrder.
     - PUT /beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}
     - Adds a tag to an existing omsOrder.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter omsOrderId: (path) Id of the omsOrder to add a tag to 
     - parameter omsOrderTag: (path) The tag to add 

     - returns: RequestBuilder<Void> 
     */
    public class func addOmsOrderTagWithRequestBuilder(omsOrderId omsOrderId: Int32, omsOrderTag: String) -> RequestBuilder<Void> {
        var path = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{omsOrderTag}", withString: "\(omsOrderTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a tag for an omsOrder.
     
     - parameter omsOrderId: (path) Id of the omsOrder to remove tag from 
     - parameter omsOrderTag: (path) The tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOmsOrderTag(omsOrderId omsOrderId: Int32, omsOrderTag: String, completion: ((error: ErrorType?) -> Void)) {
        deleteOmsOrderTagWithRequestBuilder(omsOrderId: omsOrderId, omsOrderTag: omsOrderTag).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a tag for an omsOrder.
     - DELETE /beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}
     - Deletes an existing omsOrder tag using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter omsOrderId: (path) Id of the omsOrder to remove tag from 
     - parameter omsOrderTag: (path) The tag to delete 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteOmsOrderTagWithRequestBuilder(omsOrderId omsOrderId: Int32, omsOrderTag: String) -> RequestBuilder<Void> {
        var path = "/beta/omsOrder/{omsOrderId}/tag/{omsOrderTag}"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{omsOrderTag}", withString: "\(omsOrderTag)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a duplicated an omsOrder by id
     
     - parameter omsOrderId: (path) Id of the omsOrder to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateOmsOrderById(omsOrderId omsOrderId: Int32, completion: ((data: OmsOrder?, error: ErrorType?) -> Void)) {
        getDuplicateOmsOrderByIdWithRequestBuilder(omsOrderId: omsOrderId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a duplicated an omsOrder by id
     - GET /beta/omsOrder/duplicate/{omsOrderId}
     - Returns a duplicated omsOrder identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "customFields" : {
    "key" : "{}"
  },
  "orderStatus" : "orderStatus",
  "subTotal" : 1.489415909854170383397331534069962799549102783203125,
  "integrationPartnerId" : 7,
  "total" : 1.46581298050294517310021547018550336360931396484375,
  "orderEntryProgramId" : 5,
  "mailRecipient" : false,
  "customerId" : 9,
  "isGift" : false,
  "id" : 2,
  "keyCodeDescription" : "keyCodeDescription",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "orderSourceId" : 1,
  "batchNo" : "batchNo",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shOverrideAmount" : 4.1456080298839363962315474054776132106781005859375,
  "giftMessage" : "giftMessage",
  "externalId" : "externalId",
  "tax" : 3.61607674925191080461672754609026014804840087890625,
  "emailRecipient" : false,
  "nextOMSOrderId" : 7,
  "keyCode" : "keyCode",
  "omsOrderNo" : 6,
  "legacyUserId" : 5,
  "shippingHandling" : 2.027123023002321833274663731572218239307403564453125,
  "distCharges" : 1.024645700144157789424070870154537260532379150390625
}}]
     
     - parameter omsOrderId: (path) Id of the omsOrder to be duplicated. 

     - returns: RequestBuilder<OmsOrder> 
     */
    public class func getDuplicateOmsOrderByIdWithRequestBuilder(omsOrderId omsOrderId: Int32) -> RequestBuilder<OmsOrder> {
        var path = "/beta/omsOrder/duplicate/{omsOrderId}"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OmsOrder>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search omsOrders by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOmsOrderByFilter(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil, completion: ((data: [OmsOrder]?, error: ErrorType?) -> Void)) {
        getOmsOrderByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search omsOrders by filter
     - GET /beta/omsOrder/search
     - Returns the list of omsOrders that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "customFields" : {
    "key" : "{}"
  },
  "orderStatus" : "orderStatus",
  "subTotal" : 1.489415909854170383397331534069962799549102783203125,
  "integrationPartnerId" : 7,
  "total" : 1.46581298050294517310021547018550336360931396484375,
  "orderEntryProgramId" : 5,
  "mailRecipient" : false,
  "customerId" : 9,
  "isGift" : false,
  "id" : 2,
  "keyCodeDescription" : "keyCodeDescription",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "orderSourceId" : 1,
  "batchNo" : "batchNo",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shOverrideAmount" : 4.1456080298839363962315474054776132106781005859375,
  "giftMessage" : "giftMessage",
  "externalId" : "externalId",
  "tax" : 3.61607674925191080461672754609026014804840087890625,
  "emailRecipient" : false,
  "nextOMSOrderId" : 7,
  "keyCode" : "keyCode",
  "omsOrderNo" : 6,
  "legacyUserId" : 5,
  "shippingHandling" : 2.027123023002321833274663731572218239307403564453125,
  "distCharges" : 1.024645700144157789424070870154537260532379150390625
}, {
  "customFields" : {
    "key" : "{}"
  },
  "orderStatus" : "orderStatus",
  "subTotal" : 1.489415909854170383397331534069962799549102783203125,
  "integrationPartnerId" : 7,
  "total" : 1.46581298050294517310021547018550336360931396484375,
  "orderEntryProgramId" : 5,
  "mailRecipient" : false,
  "customerId" : 9,
  "isGift" : false,
  "id" : 2,
  "keyCodeDescription" : "keyCodeDescription",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "orderSourceId" : 1,
  "batchNo" : "batchNo",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shOverrideAmount" : 4.1456080298839363962315474054776132106781005859375,
  "giftMessage" : "giftMessage",
  "externalId" : "externalId",
  "tax" : 3.61607674925191080461672754609026014804840087890625,
  "emailRecipient" : false,
  "nextOMSOrderId" : 7,
  "keyCode" : "keyCode",
  "omsOrderNo" : 6,
  "legacyUserId" : 5,
  "shippingHandling" : 2.027123023002321833274663731572218239307403564453125,
  "distCharges" : 1.024645700144157789424070870154537260532379150390625
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[OmsOrder]> 
     */
    public class func getOmsOrderByFilterWithRequestBuilder(filter filter: String? = nil, page: Int32? = nil, limit: Int32? = nil, sort: String? = nil) -> RequestBuilder<[OmsOrder]> {
        let path = "/beta/omsOrder/search"
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[OmsOrder]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an omsOrder by id
     
     - parameter omsOrderId: (path) Id of the omsOrder to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOmsOrderById(omsOrderId omsOrderId: Int32, completion: ((data: OmsOrder?, error: ErrorType?) -> Void)) {
        getOmsOrderByIdWithRequestBuilder(omsOrderId: omsOrderId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an omsOrder by id
     - GET /beta/omsOrder/{omsOrderId}
     - Returns the omsOrder identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "customFields" : {
    "key" : "{}"
  },
  "orderStatus" : "orderStatus",
  "subTotal" : 1.489415909854170383397331534069962799549102783203125,
  "integrationPartnerId" : 7,
  "total" : 1.46581298050294517310021547018550336360931396484375,
  "orderEntryProgramId" : 5,
  "mailRecipient" : false,
  "customerId" : 9,
  "isGift" : false,
  "id" : 2,
  "keyCodeDescription" : "keyCodeDescription",
  "lobId" : 0,
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "orderSourceId" : 1,
  "batchNo" : "batchNo",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "shOverrideAmount" : 4.1456080298839363962315474054776132106781005859375,
  "giftMessage" : "giftMessage",
  "externalId" : "externalId",
  "tax" : 3.61607674925191080461672754609026014804840087890625,
  "emailRecipient" : false,
  "nextOMSOrderId" : 7,
  "keyCode" : "keyCode",
  "omsOrderNo" : 6,
  "legacyUserId" : 5,
  "shippingHandling" : 2.027123023002321833274663731572218239307403564453125,
  "distCharges" : 1.024645700144157789424070870154537260532379150390625
}}]
     
     - parameter omsOrderId: (path) Id of the omsOrder to be returned. 

     - returns: RequestBuilder<OmsOrder> 
     */
    public class func getOmsOrderByIdWithRequestBuilder(omsOrderId omsOrderId: Int32) -> RequestBuilder<OmsOrder> {
        var path = "/beta/omsOrder/{omsOrderId}"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OmsOrder>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the tags for an omsOrder.
     
     - parameter omsOrderId: (path) Id of the omsOrder to get tags for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOmsOrderTags(omsOrderId omsOrderId: Int32, completion: ((error: ErrorType?) -> Void)) {
        getOmsOrderTagsWithRequestBuilder(omsOrderId: omsOrderId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the tags for an omsOrder.
     - GET /beta/omsOrder/{omsOrderId}/tag
     - Get all existing omsOrder tags.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter omsOrderId: (path) Id of the omsOrder to get tags for 

     - returns: RequestBuilder<Void> 
     */
    public class func getOmsOrderTagsWithRequestBuilder(omsOrderId omsOrderId: Int32) -> RequestBuilder<Void> {
        var path = "/beta/omsOrder/{omsOrderId}/tag"
        path = path.stringByReplacingOccurrencesOfString("{omsOrderId}", withString: "\(omsOrderId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an omsOrder
     
     - parameter body: (body) OmsOrder to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOmsOrder(body body: OmsOrder, completion: ((error: ErrorType?) -> Void)) {
        updateOmsOrderWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an omsOrder
     - PUT /beta/omsOrder
     - Updates an existing omsOrder using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) OmsOrder to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateOmsOrderWithRequestBuilder(body body: OmsOrder) -> RequestBuilder<Void> {
        let path = "/beta/omsOrder"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an omsOrder custom fields
     
     - parameter body: (body) OmsOrder to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateOmsOrderCustomFields(body body: OmsOrder, completion: ((error: ErrorType?) -> Void)) {
        updateOmsOrderCustomFieldsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an omsOrder custom fields
     - PUT /beta/omsOrder/customFields
     - Updates an existing omsOrder custom fields using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) OmsOrder to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateOmsOrderCustomFieldsWithRequestBuilder(body body: OmsOrder) -> RequestBuilder<Void> {
        let path = "/beta/omsOrder/customFields"
        let URLString = InfoplusAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
