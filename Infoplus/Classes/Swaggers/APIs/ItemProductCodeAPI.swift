//
// ItemProductCodeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ItemProductCodeAPI: APIBase {
    /**
     
     Create an itemProductCode
     
     - parameter body: (body) ItemProductCode to be inserted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addItemProductCode(body body: ItemProductCode, completion: ((data: ItemProductCode?, error: ErrorType?) -> Void)) {
        addItemProductCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create an itemProductCode
     
     - POST /v2.0/itemProductCode
     - Inserts a new itemProductCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter body: (body) ItemProductCode to be inserted. 

     - returns: RequestBuilder<ItemProductCode> 
     */
    public class func addItemProductCodeWithRequestBuilder(body body: ItemProductCode) -> RequestBuilder<ItemProductCode> {
        let path = "/v2.0/itemProductCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ItemProductCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Delete an itemProductCode
     
     - parameter itemProductCodeId: (path) Id of the itemProductCode to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteItemProductCode(itemProductCodeId itemProductCodeId: Int, completion: ((error: ErrorType?) -> Void)) {
        deleteItemProductCodeWithRequestBuilder(itemProductCodeId: itemProductCodeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete an itemProductCode
     
     - DELETE /v2.0/itemProductCode/{itemProductCodeId}
     - Deletes the itemProductCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter itemProductCodeId: (path) Id of the itemProductCode to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteItemProductCodeWithRequestBuilder(itemProductCodeId itemProductCodeId: Int) -> RequestBuilder<Void> {
        var path = "/v2.0/itemProductCode/{itemProductCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemProductCodeId}", withString: "\(itemProductCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get a duplicated an itemProductCode by id
     
     - parameter itemProductCodeId: (path) Id of the itemProductCode to be duplicated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDuplicateItemProductCodeById(itemProductCodeId itemProductCodeId: Int, completion: ((data: ItemProductCode?, error: ErrorType?) -> Void)) {
        getDuplicateItemProductCodeByIdWithRequestBuilder(itemProductCodeId: itemProductCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get a duplicated an itemProductCode by id
     
     - GET /v2.0/itemProductCode/duplicate/{itemProductCodeId}
     - Returns a duplicated itemProductCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemProductCodeId: (path) Id of the itemProductCode to be duplicated. 

     - returns: RequestBuilder<ItemProductCode> 
     */
    public class func getDuplicateItemProductCodeByIdWithRequestBuilder(itemProductCodeId itemProductCodeId: Int) -> RequestBuilder<ItemProductCode> {
        var path = "/v2.0/itemProductCode/duplicate/{itemProductCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemProductCodeId}", withString: "\(itemProductCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemProductCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Search itemProductCodes by filter
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemProductCodeByFilter(filter filter: String?, page: Int?, limit: Int?, sort: String?, completion: ((data: [ItemProductCode]?, error: ErrorType?) -> Void)) {
        getItemProductCodeByFilterWithRequestBuilder(filter: filter, page: page, limit: limit, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Search itemProductCodes by filter
     
     - GET /v2.0/itemProductCode/search
     - Returns the list of itemProductCodes that match the given filter.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example=[ {
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
} ]}]
     
     - parameter filter: (query) Query string, used to filter results. (optional)
     - parameter page: (query) Result page number.  Defaults to 1. (optional)
     - parameter limit: (query) Maximum results per page.  Defaults to 20.  Max allowed value is 250. (optional)
     - parameter sort: (query) Sort results by specified field. (optional)

     - returns: RequestBuilder<[ItemProductCode]> 
     */
    public class func getItemProductCodeByFilterWithRequestBuilder(filter filter: String?, page: Int?, limit: Int?, sort: String?) -> RequestBuilder<[ItemProductCode]> {
        let path = "/v2.0/itemProductCode/search"
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "filter": filter,
            "page": page,
            "limit": limit,
            "sort": sort
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<[ItemProductCode]>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get an itemProductCode by id
     
     - parameter itemProductCodeId: (path) Id of the itemProductCode to be returned. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getItemProductCodeById(itemProductCodeId itemProductCodeId: Int, completion: ((data: ItemProductCode?, error: ErrorType?) -> Void)) {
        getItemProductCodeByIdWithRequestBuilder(itemProductCodeId: itemProductCodeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get an itemProductCode by id
     
     - GET /v2.0/itemProductCode/{itemProductCodeId}
     - Returns the itemProductCode identified by the specified id.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "internalId" : 123,
  "customFields" : {
    "key" : "{}"
  },
  "name" : "aeiou",
  "id" : "aeiou",
  "lobId" : 123
}}]
     
     - parameter itemProductCodeId: (path) Id of the itemProductCode to be returned. 

     - returns: RequestBuilder<ItemProductCode> 
     */
    public class func getItemProductCodeByIdWithRequestBuilder(itemProductCodeId itemProductCodeId: Int) -> RequestBuilder<ItemProductCode> {
        var path = "/v2.0/itemProductCode/{itemProductCodeId}"
        path = path.stringByReplacingOccurrencesOfString("{itemProductCodeId}", withString: "\(itemProductCodeId)", options: .LiteralSearch, range: nil)
        let URLString = InfoplusAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ItemProductCode>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Update an itemProductCode
     
     - parameter body: (body) ItemProductCode to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateItemProductCode(body body: ItemProductCode, completion: ((error: ErrorType?) -> Void)) {
        updateItemProductCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Update an itemProductCode
     
     - PUT /v2.0/itemProductCode
     - Updates an existing itemProductCode using the specified data.
     - API Key:
       - type: apiKey API-Key 
       - name: api_key
     
     - parameter body: (body) ItemProductCode to be updated. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateItemProductCodeWithRequestBuilder(body body: ItemProductCode) -> RequestBuilder<Void> {
        let path = "/v2.0/itemProductCode"
        let URLString = InfoplusAPI.basePath + path
        
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<Void>.Type = InfoplusAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
    }

}
